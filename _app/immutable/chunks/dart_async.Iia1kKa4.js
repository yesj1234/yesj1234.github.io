import{s as Jn,a as ht,n as Ss}from"./scheduler.Bch89ZIZ.js";import{S as Nn,i as Wn,e,s as p,H as ft,c as l,g as i,f as o,j as gt,k as vt,d as s,a as c,l as a}from"./index.WsbZAp97.js";function $n(In){let u,qs='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#basic-concepts">Basic concepts</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#asynchronous-programming-in-dart">Asynchronous programming in Dart</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#future">Future</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#stream">Stream</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#isolates">Isolates</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#event-loops">Event loops</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#event-queues">Event queues</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#이벤트-루프의-실행-순서">이벤트 루프의 실행 순서</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#example">Example</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#이전-코드의-실행-순서">이전 코드의 실행 순서</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#개선된-코드의-실행-순서">개선된 코드의 실행 순서</a></li></ol></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#source">Source</a></li></ol>',_t,r,Rs="Basic concepts",wt,k,Us="Asynchronous programming in Dart",xt,m,Ds="Future",Lt,F,Es="<strong>Future</strong> 객체는 아직 결과값이 정해지지 않은 미래의 계산 작업(<strong>computation</strong>)을 의미합니다. 어떤 계산이 완료되면 Future는 그 결과값을 반환합니다. Future는 주로 별도의 스레드나 격리된 환경(<strong>Isolate</strong>)에서 실행되는 비동기 작업을 처리할 때 사용됩니다. 예를 들어, <code>dart:io</code>의 파일 입출력 작업이나 <code>dart:html</code>의 HTTP 요청 같은 경우가 있습니다.",yt,S,Is="Dart의 많은 메서드들은 특정 작업을 수행할 때 Future를 반환합니다. 예를 들어, <code>HttpServer.bind()</code> 메서드는 서버를 특정 IP와 포트에 연결하는데, 이 과정이 완료되면 Future를 통해 결과를 반환합니다.",Ct,q,Ht,jn=`<code class="language-dart"> <span class="token class-name">HttpServer</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'127.0.0.1'</span></span><span class="token punctuation">,</span> <span class="token number">4444</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">server<span class="token punctuation">.</span>isBroadcast</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">catchError</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Tt,R,js="위 코드에서 <code>bind()</code> 메서드는 서버를 설정하는 작업을 실행하고, 작업이 성공하면 <code>then()</code> 안의 코드가 실행됩니다. 여기서 <code>server.isBroadcast</code> 값을 출력하는 것이죠. 만약 오류가 발생하면 <code>catchError()</code>에 등록된 코드가 실행되어 오류 내용을 출력합니다.",Mt,U,Bs="Future는 이렇게 특정 <strong>작업이 완료된 후 실행될 코드를 미리 등록</strong>해두고, 결과를 기다렸다가 <strong>적절한 시점에 실행</strong>할 수 있도록 도와주는 개념입니다.",bt,d,Os="Stream",Pt,D,As="<strong>Stream은</strong> 비동기적으로 <strong>연속된 데이터를 제공</strong>하는 개념입니다. 데이터가 순차적으로 전달되는 예로는 마우스 클릭 같은 개별 이벤트나, 파일의 내용을 여러 개의 바이트 리스트로 나누어 읽는 경우가 있습니다.",Ft,E,Gs='아래 예제는 파일을 읽기 위해 Stream을 사용합니다.<br/> <a href="https://api.dart.dev/stable/latest/dart-async/Stream/listen.html" rel="nofollow">Stream.listen</a> 메서드를 사용하면 새로운 데이터가 들어올 때마다 실행할 콜백 함수를 등록할 수 있습니다. 또한, 오류가 발생했을 때나 스트림이 종료되었을 때 실행할 함수도 설정할 수 있습니다.',St,I,qt,Bn=`<code class="language-dart"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span>int<span class="token punctuation">></span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'quotes.txt'</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>utf8<span class="token punctuation">.</span>decoder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Rt,j,zs="이 스트림은 여러 개의 바이트 리스트를 순차적으로 내보냅니다. 프로그램은 이 바이트 리스트들을 적절한 방식으로 처리해야 합니다. 위 코드에서는 <code>dart:convert</code> 라이브러리의 UTF-8 디코더를 사용해 바이트 스트림을 문자열 스트림으로 변환하고 출력합니다.",Ut,B,Js="스트림은 웹 애플리케이션에서 사용자의 입력 이벤트를 처리할 때도 자주 사용됩니다. 예를 들어, 아래 코드는 특정 버튼이 클릭될 때마다 이벤트를 감지하고 실행됩니다.",Dt,O,Et,On=`<code class="language-dart"><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'#myButton'</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Click.'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,It,A,Ns="이렇게 스트림을 활용하면 이벤트가 발생할 때마다 즉시 반응할 수 있으며, 데이터가 도착하는 즉시 처리하는 비동기 방식의 프로그래밍이 가능합니다.",jt,f,Ws="Isolates",Bt,G,$s="<strong>Isolate</strong>는 모든 Dart 코드가 실행되는 단위입니다. 이것은 기계 안에서 <strong>독립적인</strong> 작은 공간처럼 작동하며, <strong>자체적인 메모리 영역</strong>을 가지고 있고, 하나의 스레드가 이벤트 루프를 실행하는 구조입니다.",Ot,z,Qs="C++ 같은 많은 다른 언어에서는 여러 개의 스레드가 하나의 메모리를 공유하며 원하는 코드를 실행할 수 있습니다. 하지만 Dart에서는 각 스레드가 자신만의 <code>Isolate(아이솔레이트)</code>에서 실행되며, 독립적인 메모리를 가지며, 이벤트를 처리하는 방식으로 동작합니다.",At,J,Vs='대부분의 Dart 애플리케이션은 하나의 아이솔레이트에서 모든 코드를 실행하지만, 필요하다면 여러 개를 만들 수도 있습니다. 예를 들어, 매우 큰 연산을 수행해야 하는 경우 메인 아이솔레이트에서 실행하면 프레임 드롭이 발생할 수 있습니다. 이런 경우, Dart의 <a href="https://api.dartlang.org/stable/dart-isolate/Isolate/spawn.html" rel="nofollow"><code>Isolate.spawn()</code></a> 또는 Flutter의 <a href="https://flutter.dev/docs/cookbook/networking/background-parsing#4-move-this-work-to-a-separate-isolate" rel="nofollow"><code>compute()</code> 함수</a>를 사용하면 됩니다. 이 함수들은 새로운 아이솔레이트를 생성하여 복잡한 연산을 처리하고, 메인 아이솔레이트는 위젯 트리를 리빌드하고 렌더링하는 등의 작업을 계속할 수 있도록 해줍니다.',Gt,N,Ks="새로운 아이솔레이트는 자체적인 이벤트 루프와 메모리를 가지며, 이를 생성한 원래 아이솔레이트조차도 해당 메모리에 접근할 수 없습니다. 이러한 독립적인 특성 때문에 <code>Isolate(아이솔레이트)</code>라는 이름이 붙었습니다. 즉, 각 아이솔레이트는 서로 <strong>격리(isolated)</strong> 되어 있습니다.",zt,W,Xs="실제로 아이솔레이트들이 협력하는 유일한 방법은 <strong>메시지를 주고받는 것</strong>입니다. 한 아이솔레이트가 다른 아이솔레이트로 메시지를 보내면, 받은 아이솔레이트는 자신의 <strong>이벤트 루프</strong>를 이용해 해당 메시지를 처리합니다.",Jt,$,Ys="Java나 C++ 같은 언어에서 멀티스레드 프로그래밍을 해본 경험이 있다면, Dart의 아이솔레이트 개념이 다소 제한적으로 보일 수도 있습니다. 하지만 이런 구조는 Dart 개발자들에게 몇 가지 중요한 이점을 제공합니다.",Nt,Q,Zs="예를 들어, 아이솔레이트 내부의 메모리 할당과 가비지 컬렉션(GC)은 <strong>락(lock)을 사용하지 않고도 안전하게 처리됩니다.</strong> <strong>하나의 아이솔레이트</strong>에는 <strong>단 하나의 스레드</strong>만 존재하므로, 그 스레드가 실행되지 않는 동안에는 메모리가 변경될 가능성이 없습니다. 이러한 구조는 Flutter 애플리케이션이 빠르게 위젯을 생성하고 파괴하는 작업을 수행할 때 매우 유용합니다.",Wt,g,tn="Event loops",$t,v,sn,Qt,V,nn="앱이 시작하고, 종료되기까지 여러 이벤트가 발생합니다. 디스크에서 데이터를 읽거나, 사용자가 화면을 터치하는 등 다양한 이벤트가 있습니다.",Vt,K,an=`앱은 이러한 이벤트가 언제, 어떤 순서로 발생할지 예측할 수 없으며, <strong>단 하나의 스레드</strong>로 모든 이벤트를 처리해야 합니다. 하지만 이 <strong>스레드</strong>는 절대 <strong>블로킹되지 않아야</strong> 하죠. 그래서 앱은 <strong>이벤트 루프(event loop)</strong> 를 실행합니다.<br/>
이벤트 루프는 <strong>이벤트 큐</strong>(<strong>event queue</strong>)에서 가장 오래된 이벤트를 가져와 처리하고, 다음 이벤트를 가져와 처리하는 방식으로 계속 반복됩니다. 큐가 비워질 때까지 이 과정이 이어집니다.`,Kt,X,en="앱이 실행되는 동안, 사용자는 화면을 터치하고, 파일이 다운로드되며, 타이머가 울릴 수도 있습니다. 이벤트 루프는 이러한 이벤트들을 <strong>한 번에 하나씩</strong> 처리하면서 계속 돌아갑니다.",Xt,Y,ln="이벤트가 없는 순간에는 스레드가 대기 상태가 됩니다. 이때는 가비지 컬렉션(GC)이 실행될 수도 있고, 그냥 멈춰 있을 수도 있습니다.",Yt,Z,pn="Dart의 <strong>비동기 프로그래밍을 위한 고수준 API와 언어 기능</strong>— <code>Future</code>, <code>Stream</code>, <code>async</code> 및 <code>await</code>—은 모두 이 단순한 이벤트 루프를 기반으로 작동합니다.",Zt,h,on="Event queues",ts,tt,cn=`Dart 애플리케이션은 단 하나의 <strong>이벤트 루프(event loop)</strong> 를 가지고 있으며, 여기에는 <strong>두 개의 큐(queue)</strong> 가 존재합니다.<br/>
바로 <strong>이벤트 큐(event queue)</strong> 와 <strong>마이크로태스크 큐(microtask queue)</strong> 입니다.`,ss,st,un=`<strong>이벤트 큐 (Event Queue)</strong> <strong>외부에서 발생하는 이벤트</strong> 들이 저장됩니다.<br/>
예를 들어, I/O 작업, 마우스 이벤트, 화면 렌더링 이벤트, 타이머, Dart 아이솔레이트 간의 메시지 등이 이벤트 큐에 들어갑니다.`,ns,nt,rn=`<strong>마이크로태스크 큐 (Microtask Queue)</strong> 는 특정 작업을 <strong>나중에 실행하지만, 이벤트 루프의 제어권을 반환하기 전에 반드시 실행해야 할 경우</strong> 필요합니다.<br/>
예를 들어, <strong>Observable 객체</strong>(변경 사항을 감지하는 객체)가 변경될 때, 여러 개의 변경을 묶어서 비동기적으로 보고하는 경우가 있습니다.`,as,at,kn=`이벤트 큐에는 <strong>Dart 내부에서 발생한 이벤트뿐만 아니라, 시스템 외부에서 발생한 이벤트도 포함됩니다.</strong><br/>
반면, 현재 마이크로태스크 큐에는 <strong>Dart 코드 내부에서 생성된 작업만</strong> 들어갑니다.`,es,_,mn="<strong>이벤트 루프의 실행 순서</strong>",ls,et,dn="아래 그림과 같이, <code>main()</code> 함수가 종료되면 <strong>이벤트 루프가 실행을 시작합니다.</strong>",ps,lt,fn="<li>먼저, <strong>모든 마이크로태스크</strong> 를 <strong>FIFO(First In, First Out) 순서로 실행</strong>합니다.</li> <li>그 후, <strong>이벤트 큐에서 첫 번째 이벤트를 가져와 실행</strong>합니다.</li> <li>다시 <strong>모든 마이크로태스크를 실행</strong>한 후, <strong>이벤트 큐에서 다음 이벤트를 처리</strong>합니다.</li> <li>이 과정을 반복합니다.</li>",os,pt,gn=`이벤트 큐와 마이크로태스크 큐가 <strong>모두 비어 있고, 더 이상 실행할 이벤트가 없을 때</strong>,<br/>
앱의 <strong>임베더(embedder)</strong> (예: 브라우저나 테스트 프레임워크)는 앱을 종료할 수 있습니다.`,is,w,vn,cs,x,hn="Example",us,ot,rs,An=`<code class="language-dart"><span class="token comment">// Asynchronous network request that will eventually return Future with</span>
<span class="token comment">// downloadURL as String on success, and Error on failure.</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">_uploadBytes</span><span class="token punctuation">(</span>
    <span class="token punctuation">&#123;</span>required <span class="token class-name">Uint8List</span> bytes<span class="token punctuation">,</span>
    <span class="token class-name">String</span><span class="token operator">?</span> path<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>millisecondsSinceEpoch<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Reference</span> storageRef <span class="token operator">=</span>
      <span class="token class-name">FirebaseStorage</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">path <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">''</span></span></span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">fileName</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> compressedBytes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">FlutterImageCompress</span><span class="token punctuation">.</span><span class="token function">compressWithList</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">UploadTask</span> uploadTask <span class="token operator">=</span> storageRef<span class="token punctuation">.</span><span class="token function">putData</span><span class="token punctuation">(</span>compressedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">TaskSnapshot</span> snapshot <span class="token operator">=</span> <span class="token keyword">await</span> uploadTask<span class="token punctuation">;</span>

  <span class="token class-name">String</span> downloadURL <span class="token operator">=</span> <span class="token keyword">await</span> snapshot<span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token function">getDownloadURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> downloadURL<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ks,it,_n="<strong>Before:</strong>",ms,ct,ds,Gn=`<code class="language-dart"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> imageURLs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Process the asynchronous task sequentially, which does not have any</span>
<span class="token comment">// dependencies with each other, redundantly consuming the time spent on</span>
<span class="token comment">// the whole process to complete.</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> image <span class="token keyword">in</span> images<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> bytes <span class="token operator">=</span> <span class="token keyword">await</span> image<span class="token punctuation">.</span><span class="token function">readAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// meaninglessly waiting for the upload process to finish, blocking the next</span>
  <span class="token comment">// image from uploading.</span>
  <span class="token keyword">final</span> downloadURL <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">_uploadBytes</span><span class="token punctuation">(</span>
    bytes<span class="token punctuation">:</span> bytes<span class="token punctuation">,</span>
    path<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'images'</span></span><span class="token punctuation">,</span>
    progressCallback<span class="token punctuation">:</span> progressCallback<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  imageURLs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>downloadURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
newJournal <span class="token operator">=</span> newJournal<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>images<span class="token punctuation">:</span> imageURLs<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,fs,ut,wn="<strong>After:</strong>",gs,rt,vs,zn=`<code class="language-dart"><span class="token comment">// imageUploadTasks is a list of Future&lt;String?>, which means the callback inside the .map() does not execute immediately.</span>
<span class="token keyword">final</span> imageUploadTasks <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> bytes <span class="token operator">=</span> <span class="token keyword">await</span> image<span class="token punctuation">.</span><span class="token function">readAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">_uploadBytes</span><span class="token punctuation">(</span>
        bytes<span class="token punctuation">:</span> bytes<span class="token punctuation">,</span>
        path<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'images'</span></span><span class="token punctuation">,</span>
        progressCallback<span class="token punctuation">:</span> progressCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// allow partial image upload.</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Using Future.wait() will wait for all images to be uploaded concurrently.</span>
<span class="token keyword">final</span> imageURLs <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>imageUploadTasks<span class="token punctuation">)</span><span class="token punctuation">;</span>
newJournal <span class="token operator">=</span> newJournal<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>images<span class="token punctuation">:</span> imageURLs<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,hs,L,xn="<strong>이전 코드의 실행 순서</strong>",_s,kt,Ln="<li><p><strong>반복문 시작</strong></p> <ul><li>첫 번째 이미지를 선택합니다.</li> <li><code>await image.readAsBytes()</code> 를 호출합니다.</li></ul></li> <li><p><strong>이미지 바이트 읽기</strong></p> <ul><li>이 과정은 <strong>I/O 바운드 연산</strong> 입니다.</li> <li>Dart는 이 작업을 <strong>OS 파일 시스템에 위임(offload)</strong> 하고, 이벤트 큐의 다음 작업을 처리합니다.</li> <li>OS가 파일 읽기를 완료하면, 이벤트 루프가 이를 다시 받아 실행을 계속합니다.</li></ul></li>",ws,y,yn,xs,C,Cn="<li><p><strong>이미지 업로드</strong></p> <ul><li><code>_uploadBytes</code> 를 호출하여 이미지를 서버에 업로드합니다.</li> <li>네트워크 작업 역시 <strong>OS/네트워크 스택에 위임</strong> 되므로, Dart는 다른 작업을 계속 처리할 수 있습니다.</li> <li>하지만 이벤트 루프는 <strong>이전 업로드가 완료될 때까지 다음 반복으로 넘어가지 않습니다.</strong></li></ul></li>",Ls,H,Hn,ys,T,Tn="<li><p><strong>URL 저장</strong></p> <ul><li>서버가 업로드된 이미지의 다운로드 URL을 반환합니다.</li> <li>Dart는 이 URL을 <code>imageURLs</code> 리스트에 추가합니다.</li></ul></li> <li><p><strong>이미지 2, 이미지 3에 대해 1~4를 반복</strong></p> <ul><li>Dart는 <strong>이전 이미지 업로드가 완료될 때까지 다음 이미지를 처리하지 않습니다.</strong></li> <li>즉, 이미지들이 <strong>순차적으로 처리되며, 하나의 작업이 완료되기 전까지 다음 작업이 블록(block)됩니다.</strong></li></ul></li>",Cs,Hs,Ts,M,Mn="<strong>개선된 코드의 실행 순서</strong>",Ms,mt,bn="<li><p><strong>메인 함수 시작</strong></p> <ul><li><code>image.map()</code> 내의 작업들이 <strong>이벤트 루프(event loop)</strong> 에 추가됩니다.</li></ul></li> <li><p><strong>각 <code>image.readAsBytes()</code> 실행 시작 (비동기 I/O)</strong></p> <ul><li>파일 I/O 연산(디스크 읽기) 작업이 시작됩니다.</li> <li>이는 <strong>이벤트 큐(event queue)</strong> 로 이동하며, <strong>마이크로태스크 큐(microtask queue)</strong> 에는 추가되지 않습니다.</li> <li>이벤트 루프는 <strong>이 작업이 완료될 때까지 대기하지 않고</strong> 다음 작업을 계속 실행합니다.</li></ul></li> <li><p><strong>각 <code>_uploadBytes()</code> 업로드 시작 (비동기 네트워크 I/O)</strong></p> <ul><li>네트워크에 데이터를 업로드하는 <strong>네트워크 바운드(network-bound) 연산</strong> 이 실행됩니다.</li> <li><strong>각 이미지의 읽기(read)가 완료되는 즉시</strong> 업로드가 시작됩니다.</li> <li>이전 코드와 달리, <strong>이미지들이 순차적으로 처리되는 것이 아니라 동시에(concurrently) 업로드됩니다.</strong></li></ul></li> <li><p><strong><code>Future.wait(imageUploadTasks)</code> 모든 업로드 완료 대기</strong></p> <ul><li><code>Future.wait()</code> 는 <strong>모든 이미지 업로드가 완료될 때까지 기다립니다.</strong></li> <li>모든 <code>Future</code> 들이 완료된 후, <code>imageURLs</code> 리스트에 업로드된 URL들이 저장됩니다.</li></ul></li>",bs,b,Pn,Ps,P,Fn="Source",Fs,dt,Sn='<li><a href="https://api.dart.dev/stable/latest/dart-async/index.html" rel="nofollow">https://api.dart.dev/stable/latest/dart-async/index.html</a></li> <li><a href="https://api.flutter.dev/flutter/dart-async/Future/wait.html" rel="nofollow">https://api.flutter.dev/flutter/dart-async/Future/wait.html</a></li> <li><a href="https://api.flutter.dev/flutter/dart-async/Future/then.html" rel="nofollow">https://api.flutter.dev/flutter/dart-async/Future/then.html</a></li> <li><a href="https://api.flutter.dev/flutter/dart-async/Future-class.html" rel="nofollow">https://api.flutter.dev/flutter/dart-async/Future-class.html</a></li> <li><a href="https://dart.dev/libraries/dart-async" rel="nofollow">https://dart.dev/libraries/dart-async</a></li> <li><a href="https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a" rel="nofollow">https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a</a></li>';return{c(){u=e("nav"),u.innerHTML=qs,_t=p(),r=e("h1"),r.textContent=Rs,wt=p(),k=e("h2"),k.textContent=Us,xt=p(),m=e("h3"),m.textContent=Ds,Lt=p(),F=e("p"),F.innerHTML=Es,yt=p(),S=e("p"),S.innerHTML=Is,Ct=p(),q=e("pre"),Ht=new ft(!1),Tt=p(),R=e("p"),R.innerHTML=js,Mt=p(),U=e("p"),U.innerHTML=Bs,bt=p(),d=e("h3"),d.textContent=Os,Pt=p(),D=e("p"),D.innerHTML=As,Ft=p(),E=e("p"),E.innerHTML=Gs,St=p(),I=e("pre"),qt=new ft(!1),Rt=p(),j=e("p"),j.innerHTML=zs,Ut=p(),B=e("p"),B.textContent=Js,Dt=p(),O=e("pre"),Et=new ft(!1),It=p(),A=e("p"),A.textContent=Ns,jt=p(),f=e("h3"),f.textContent=Ws,Bt=p(),G=e("p"),G.innerHTML=$s,Ot=p(),z=e("p"),z.innerHTML=Qs,At=p(),J=e("p"),J.innerHTML=Vs,Gt=p(),N=e("p"),N.innerHTML=Ks,zt=p(),W=e("p"),W.innerHTML=Xs,Jt=p(),$=e("p"),$.textContent=Ys,Nt=p(),Q=e("p"),Q.innerHTML=Zs,Wt=p(),g=e("h3"),g.textContent=tn,$t=p(),v=e("img"),Qt=p(),V=e("p"),V.textContent=nn,Vt=p(),K=e("p"),K.innerHTML=an,Kt=p(),X=e("p"),X.innerHTML=en,Xt=p(),Y=e("p"),Y.textContent=ln,Yt=p(),Z=e("p"),Z.innerHTML=pn,Zt=p(),h=e("h3"),h.textContent=on,ts=p(),tt=e("p"),tt.innerHTML=cn,ss=p(),st=e("p"),st.innerHTML=un,ns=p(),nt=e("p"),nt.innerHTML=rn,as=p(),at=e("p"),at.innerHTML=kn,es=p(),_=e("h3"),_.innerHTML=mn,ls=p(),et=e("p"),et.innerHTML=dn,ps=p(),lt=e("ol"),lt.innerHTML=fn,os=p(),pt=e("p"),pt.innerHTML=gn,is=p(),w=e("img"),cs=p(),x=e("h2"),x.textContent=hn,us=p(),ot=e("pre"),rs=new ft(!1),ks=p(),it=e("p"),it.innerHTML=_n,ms=p(),ct=e("pre"),ds=new ft(!1),fs=p(),ut=e("p"),ut.innerHTML=wn,gs=p(),rt=e("pre"),vs=new ft(!1),hs=p(),L=e("h3"),L.innerHTML=xn,_s=p(),kt=e("ol"),kt.innerHTML=Ln,ws=p(),y=e("img"),xs=p(),C=e("ol"),C.innerHTML=Cn,Ls=p(),H=e("img"),ys=p(),T=e("ol"),T.innerHTML=Tn,Cs=p(),Hs=e("hr"),Ts=p(),M=e("h3"),M.innerHTML=Mn,Ms=p(),mt=e("ol"),mt.innerHTML=bn,bs=p(),b=e("img"),Ps=p(),P=e("h1"),P.textContent=Fn,Fs=p(),dt=e("ul"),dt.innerHTML=Sn,this.h()},l(t){u=l(t,"NAV",{class:!0,"data-svelte-h":!0}),i(u)!=="svelte-c5fon5"&&(u.innerHTML=qs),_t=o(t),r=l(t,"H1",{id:!0,"data-svelte-h":!0}),i(r)!=="svelte-17lvad3"&&(r.textContent=Rs),wt=o(t),k=l(t,"H2",{id:!0,"data-svelte-h":!0}),i(k)!=="svelte-11zff2l"&&(k.textContent=Us),xt=o(t),m=l(t,"H3",{id:!0,"data-svelte-h":!0}),i(m)!=="svelte-18eyawo"&&(m.textContent=Ds),Lt=o(t),F=l(t,"P",{"data-svelte-h":!0}),i(F)!=="svelte-15xjo9c"&&(F.innerHTML=Es),yt=o(t),S=l(t,"P",{"data-svelte-h":!0}),i(S)!=="svelte-12zpbf"&&(S.innerHTML=Is),Ct=o(t),q=l(t,"PRE",{class:!0});var n=gt(q);Ht=vt(n,!1),n.forEach(s),Tt=o(t),R=l(t,"P",{"data-svelte-h":!0}),i(R)!=="svelte-104qim0"&&(R.innerHTML=js),Mt=o(t),U=l(t,"P",{"data-svelte-h":!0}),i(U)!=="svelte-1vljcxb"&&(U.innerHTML=Bs),bt=o(t),d=l(t,"H3",{id:!0,"data-svelte-h":!0}),i(d)!=="svelte-1n11wr0"&&(d.textContent=Os),Pt=o(t),D=l(t,"P",{"data-svelte-h":!0}),i(D)!=="svelte-1bdx73w"&&(D.innerHTML=As),Ft=o(t),E=l(t,"P",{"data-svelte-h":!0}),i(E)!=="svelte-eaucim"&&(E.innerHTML=Gs),St=o(t),I=l(t,"PRE",{class:!0});var qn=gt(I);qt=vt(qn,!1),qn.forEach(s),Rt=o(t),j=l(t,"P",{"data-svelte-h":!0}),i(j)!=="svelte-mr9ygy"&&(j.innerHTML=zs),Ut=o(t),B=l(t,"P",{"data-svelte-h":!0}),i(B)!=="svelte-gxr68n"&&(B.textContent=Js),Dt=o(t),O=l(t,"PRE",{class:!0});var Rn=gt(O);Et=vt(Rn,!1),Rn.forEach(s),It=o(t),A=l(t,"P",{"data-svelte-h":!0}),i(A)!=="svelte-15igqi7"&&(A.textContent=Ns),jt=o(t),f=l(t,"H3",{id:!0,"data-svelte-h":!0}),i(f)!=="svelte-1l08h3w"&&(f.textContent=Ws),Bt=o(t),G=l(t,"P",{"data-svelte-h":!0}),i(G)!=="svelte-1bqcc2a"&&(G.innerHTML=$s),Ot=o(t),z=l(t,"P",{"data-svelte-h":!0}),i(z)!=="svelte-1yf46ot"&&(z.innerHTML=Qs),At=o(t),J=l(t,"P",{"data-svelte-h":!0}),i(J)!=="svelte-1iktifq"&&(J.innerHTML=Vs),Gt=o(t),N=l(t,"P",{"data-svelte-h":!0}),i(N)!=="svelte-1wyojlr"&&(N.innerHTML=Ks),zt=o(t),W=l(t,"P",{"data-svelte-h":!0}),i(W)!=="svelte-lai47h"&&(W.innerHTML=Xs),Jt=o(t),$=l(t,"P",{"data-svelte-h":!0}),i($)!=="svelte-1ydgf1y"&&($.textContent=Ys),Nt=o(t),Q=l(t,"P",{"data-svelte-h":!0}),i(Q)!=="svelte-s5s9nn"&&(Q.innerHTML=Zs),Wt=o(t),g=l(t,"H3",{id:!0,"data-svelte-h":!0}),i(g)!=="svelte-11ms9od"&&(g.textContent=tn),$t=o(t),v=l(t,"IMG",{src:!0,width:!0,alt:!0}),Qt=o(t),V=l(t,"P",{"data-svelte-h":!0}),i(V)!=="svelte-1mxxubw"&&(V.textContent=nn),Vt=o(t),K=l(t,"P",{"data-svelte-h":!0}),i(K)!=="svelte-2vbiz7"&&(K.innerHTML=an),Kt=o(t),X=l(t,"P",{"data-svelte-h":!0}),i(X)!=="svelte-1v9glm7"&&(X.innerHTML=en),Xt=o(t),Y=l(t,"P",{"data-svelte-h":!0}),i(Y)!=="svelte-1mzpx05"&&(Y.textContent=ln),Yt=o(t),Z=l(t,"P",{"data-svelte-h":!0}),i(Z)!=="svelte-mohmmg"&&(Z.innerHTML=pn),Zt=o(t),h=l(t,"H3",{id:!0,"data-svelte-h":!0}),i(h)!=="svelte-1l4092v"&&(h.textContent=on),ts=o(t),tt=l(t,"P",{"data-svelte-h":!0}),i(tt)!=="svelte-h4lrv9"&&(tt.innerHTML=cn),ss=o(t),st=l(t,"P",{"data-svelte-h":!0}),i(st)!=="svelte-1r73dz6"&&(st.innerHTML=un),ns=o(t),nt=l(t,"P",{"data-svelte-h":!0}),i(nt)!=="svelte-imq1v1"&&(nt.innerHTML=rn),as=o(t),at=l(t,"P",{"data-svelte-h":!0}),i(at)!=="svelte-1ahcg2i"&&(at.innerHTML=kn),es=o(t),_=l(t,"H3",{id:!0,"data-svelte-h":!0}),i(_)!=="svelte-6myvnk"&&(_.innerHTML=mn),ls=o(t),et=l(t,"P",{"data-svelte-h":!0}),i(et)!=="svelte-1xi0set"&&(et.innerHTML=dn),ps=o(t),lt=l(t,"OL",{"data-svelte-h":!0}),i(lt)!=="svelte-ifxyv"&&(lt.innerHTML=fn),os=o(t),pt=l(t,"P",{"data-svelte-h":!0}),i(pt)!=="svelte-ip4xq"&&(pt.innerHTML=gn),is=o(t),w=l(t,"IMG",{src:!0,width:!0,alt:!0}),cs=o(t),x=l(t,"H2",{id:!0,"data-svelte-h":!0}),i(x)!=="svelte-1j28j6e"&&(x.textContent=hn),us=o(t),ot=l(t,"PRE",{class:!0});var Un=gt(ot);rs=vt(Un,!1),Un.forEach(s),ks=o(t),it=l(t,"P",{"data-svelte-h":!0}),i(it)!=="svelte-n6001m"&&(it.innerHTML=_n),ms=o(t),ct=l(t,"PRE",{class:!0});var Dn=gt(ct);ds=vt(Dn,!1),Dn.forEach(s),fs=o(t),ut=l(t,"P",{"data-svelte-h":!0}),i(ut)!=="svelte-u7163h"&&(ut.innerHTML=wn),gs=o(t),rt=l(t,"PRE",{class:!0});var En=gt(rt);vs=vt(En,!1),En.forEach(s),hs=o(t),L=l(t,"H3",{id:!0,"data-svelte-h":!0}),i(L)!=="svelte-1r16s6i"&&(L.innerHTML=xn),_s=o(t),kt=l(t,"OL",{"data-svelte-h":!0}),i(kt)!=="svelte-jush8i"&&(kt.innerHTML=Ln),ws=o(t),y=l(t,"IMG",{src:!0,width:!0,alt:!0}),xs=o(t),C=l(t,"OL",{start:!0,"data-svelte-h":!0}),i(C)!=="svelte-18ab6wb"&&(C.innerHTML=Cn),Ls=o(t),H=l(t,"IMG",{src:!0,width:!0,alt:!0}),ys=o(t),T=l(t,"OL",{start:!0,"data-svelte-h":!0}),i(T)!=="svelte-1ea5ayd"&&(T.innerHTML=Tn),Cs=o(t),Hs=l(t,"HR",{}),Ts=o(t),M=l(t,"H3",{id:!0,"data-svelte-h":!0}),i(M)!=="svelte-q1sy0o"&&(M.innerHTML=Mn),Ms=o(t),mt=l(t,"OL",{"data-svelte-h":!0}),i(mt)!=="svelte-3x96nc"&&(mt.innerHTML=bn),bs=o(t),b=l(t,"IMG",{src:!0,width:!0,alt:!0}),Ps=o(t),P=l(t,"H1",{id:!0,"data-svelte-h":!0}),i(P)!=="svelte-leqc2o"&&(P.textContent=Fn),Fs=o(t),dt=l(t,"UL",{"data-svelte-h":!0}),i(dt)!=="svelte-1lpkbqe"&&(dt.innerHTML=Sn),this.h()},h(){c(u,"class","toc"),c(r,"id","basic-concepts"),c(k,"id","asynchronous-programming-in-dart"),c(m,"id","future"),Ht.a=null,c(q,"class","language-dart"),c(d,"id","stream"),qt.a=null,c(I,"class","language-dart"),Et.a=null,c(O,"class","language-dart"),c(f,"id","isolates"),c(g,"id","event-loops"),ht(v.src,sn="/queue.jpg")||c(v,"src",sn),c(v,"width","70%"),c(v,"alt","queue.jpg"),c(h,"id","event-queues"),c(_,"id","이벤트-루프의-실행-순서"),ht(w.src,vn="/process.jpg")||c(w,"src",vn),c(w,"width","70%"),c(w,"alt","process.jpg"),c(x,"id","example"),rs.a=null,c(ot,"class","language-dart"),ds.a=null,c(ct,"class","language-dart"),vs.a=null,c(rt,"class","language-dart"),c(L,"id","이전-코드의-실행-순서"),ht(y.src,yn="/previous_1.jpg")||c(y,"src",yn),c(y,"width","80%"),c(y,"alt","previous_1.jpg"),c(C,"start","3"),ht(H.src,Hn="/previous_2.jpg")||c(H,"src",Hn),c(H,"width","80%"),c(H,"alt","previous_2.jpg"),c(T,"start","4"),c(M,"id","개선된-코드의-실행-순서"),ht(b.src,Pn="/after_1.jpg")||c(b,"src",Pn),c(b,"width","80%"),c(b,"alt","after_1.jpg"),c(P,"id","source")},m(t,n){a(t,u,n),a(t,_t,n),a(t,r,n),a(t,wt,n),a(t,k,n),a(t,xt,n),a(t,m,n),a(t,Lt,n),a(t,F,n),a(t,yt,n),a(t,S,n),a(t,Ct,n),a(t,q,n),Ht.m(jn,q),a(t,Tt,n),a(t,R,n),a(t,Mt,n),a(t,U,n),a(t,bt,n),a(t,d,n),a(t,Pt,n),a(t,D,n),a(t,Ft,n),a(t,E,n),a(t,St,n),a(t,I,n),qt.m(Bn,I),a(t,Rt,n),a(t,j,n),a(t,Ut,n),a(t,B,n),a(t,Dt,n),a(t,O,n),Et.m(On,O),a(t,It,n),a(t,A,n),a(t,jt,n),a(t,f,n),a(t,Bt,n),a(t,G,n),a(t,Ot,n),a(t,z,n),a(t,At,n),a(t,J,n),a(t,Gt,n),a(t,N,n),a(t,zt,n),a(t,W,n),a(t,Jt,n),a(t,$,n),a(t,Nt,n),a(t,Q,n),a(t,Wt,n),a(t,g,n),a(t,$t,n),a(t,v,n),a(t,Qt,n),a(t,V,n),a(t,Vt,n),a(t,K,n),a(t,Kt,n),a(t,X,n),a(t,Xt,n),a(t,Y,n),a(t,Yt,n),a(t,Z,n),a(t,Zt,n),a(t,h,n),a(t,ts,n),a(t,tt,n),a(t,ss,n),a(t,st,n),a(t,ns,n),a(t,nt,n),a(t,as,n),a(t,at,n),a(t,es,n),a(t,_,n),a(t,ls,n),a(t,et,n),a(t,ps,n),a(t,lt,n),a(t,os,n),a(t,pt,n),a(t,is,n),a(t,w,n),a(t,cs,n),a(t,x,n),a(t,us,n),a(t,ot,n),rs.m(An,ot),a(t,ks,n),a(t,it,n),a(t,ms,n),a(t,ct,n),ds.m(Gn,ct),a(t,fs,n),a(t,ut,n),a(t,gs,n),a(t,rt,n),vs.m(zn,rt),a(t,hs,n),a(t,L,n),a(t,_s,n),a(t,kt,n),a(t,ws,n),a(t,y,n),a(t,xs,n),a(t,C,n),a(t,Ls,n),a(t,H,n),a(t,ys,n),a(t,T,n),a(t,Cs,n),a(t,Hs,n),a(t,Ts,n),a(t,M,n),a(t,Ms,n),a(t,mt,n),a(t,bs,n),a(t,b,n),a(t,Ps,n),a(t,P,n),a(t,Fs,n),a(t,dt,n)},p:Ss,i:Ss,o:Ss,d(t){t&&(s(u),s(_t),s(r),s(wt),s(k),s(xt),s(m),s(Lt),s(F),s(yt),s(S),s(Ct),s(q),s(Tt),s(R),s(Mt),s(U),s(bt),s(d),s(Pt),s(D),s(Ft),s(E),s(St),s(I),s(Rt),s(j),s(Ut),s(B),s(Dt),s(O),s(It),s(A),s(jt),s(f),s(Bt),s(G),s(Ot),s(z),s(At),s(J),s(Gt),s(N),s(zt),s(W),s(Jt),s($),s(Nt),s(Q),s(Wt),s(g),s($t),s(v),s(Qt),s(V),s(Vt),s(K),s(Kt),s(X),s(Xt),s(Y),s(Yt),s(Z),s(Zt),s(h),s(ts),s(tt),s(ss),s(st),s(ns),s(nt),s(as),s(at),s(es),s(_),s(ls),s(et),s(ps),s(lt),s(os),s(pt),s(is),s(w),s(cs),s(x),s(us),s(ot),s(ks),s(it),s(ms),s(ct),s(fs),s(ut),s(gs),s(rt),s(hs),s(L),s(_s),s(kt),s(ws),s(y),s(xs),s(C),s(Ls),s(H),s(ys),s(T),s(Cs),s(Hs),s(Ts),s(M),s(Ms),s(mt),s(bs),s(b),s(Ps),s(P),s(Fs),s(dt))}}}const Kn={title:"Dart asynchronous programming",author:"jack",description:"Dart에서 비동기를 구현하는 방식에 대해 알아보고 예시를 통해 학습 해봅니다.",published:!0,date:"2025. 03. 27.",tags:["Dart","Flutter"]};class Xn extends Nn{constructor(u){super(),Wn(this,u,null,$n,Jn,{})}}export{Xn as default,Kn as metadata};
