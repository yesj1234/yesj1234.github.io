import{s as gt,n as ys}from"./scheduler.B-IchvsE.js";import{S as ht,i as Ct,e,s as l,H as rs,c as p,g as c,f as o,j as ds,k as ms,d as s,a as i,l as a}from"./index.BXAsoQ_g.js";function wt(mt){let u,fs='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#union-types">Union types</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#type-systems">Type systems</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#nominal-types">Nominal types</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#shaped-based-types">Shaped based types</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#tagged-union-types">Tagged Union types</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#untagged-union-types">Untagged union types</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#dart-support-for-union-types">Dart support for Union types</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#futureorlttgt">FutureOr&lt;T&gt;</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#nullable-types">Nullable types</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#sealed-class-modifier---tagged-union-types">Sealed class modifier - Tagged union types</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#package---either">package - Either</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#package---extension-type-unions">package - Extension type unions</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#refactoring-example">Refactoring example</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#source">Source</a></li></ol>',un,k,vs="Union types",kn,b,xs="개인 프로젝트를 개발하는 와중에 Union type을 사용하고 싶은 경우가 있었습니다.",rn,I,gs="상황은 다음과 같았습니다.",dn,L,hs="<li>포스트는 이미지 파일, 제목, 내용을 포함할 수 있습니다.</li> <li>이미지는 image picker 패키지를 통해 사진첩에서 XFile 타입으로 가져올 수 있으며 Image.File 위젯을 사용하여 보여줍니다.</li> <li>이미지를 포스트에 포함하여 저장할 경우에는 firestorage에 이미지 파일을 저장하고 download url을 받아 데이터베이스 해당 url을 String으로 저장합니다.</li> <li>이미지를 포함하는 기존의 포스트를 수정할 경우에는 원본 내용을 보여줘야 합니다. 이 경우 이미지는 download url을 string으로 받아서 Image.network 위젯을 \b통해 보여줍니다.</li> <li>만약 새로운 사진을 추가할 경우 이미지를 보여주는 위젯은 이제 download url(String) 과 XFile 두가지 타입을 동시에 처리할 수 있어야 합니다.</li>",mn,H,Cs="따라서 String, XFile 두 가지 타입을 받기 위해 dynamic 타입으로 받아와서 타입이 String일 경우에는 Image.network위젯을, XFile일 경우에는 Image.file을 사용하도록 해놨습니다.",yn,U,ws="위와 같은 방식은 코드를 짜기 편리하다는 장점이 있지만 단점 또한 적지 않습니다.",fn,M,_s="단점은 다음과 같습니다.",vn,P,Ts="<li>개발자가 직접 타입을 일일이 확인해서 해당 타입에 맞게 분기를 처리해주어야 하기 때문에 실수가 발생하기 쉽습니다(만약 타입이 여러개일 경우 미처 확인하지 못하고 지나가는 타입이 있는 경우 등).</li> <li>컴파일러가 타입을 인식하지 못하기 때문에 IDE의 자동완성기능과 같은 compile 언어의 장점을 제대로 활용할 수 없습니다.</li> <li>또한 String이나 XFile 타입이 아니라 다른 타입이 들어올 경우에는 runtime error가 발생할 수 있습니다.</li>",xn,S,bs="이런 단점들을 해결해보고자 Dart에서 union type을 다루는 방식에 대해 알아보고자 합니다.",gn,r,Is="Type systems",hn,F,Ls="Union type을 알아보기 전에 type에 대한 몇 가지 개념들에 대해 보고 가도록 합시다.",Cn,E,Hs=`개발 언어마다 type을 다루는 방식이 상이합니다.
예를 들어 typescript는 shape based type을 사용하고 java는 nominal type을 사용합니다.
shape based type과 nominal type은 타입간의 호환성(Type Compatibility), 유연성(Flexibility), 에러를 처리하는 방식에 차이가 있습니다.`,wn,d,Us="Nominal types",_n,O,Ms="Nominal type 은…",Tn,q,Ps="<li>선언된 타입의 이름 혹은 identity에 기반합니다.</li> <li>타입의 이름 혹은 선언이 같은 경우에 두 가지 타입이 호환됩니다.</li> <li>상속(Inheritance)이나 서브 타이핑(subtyping) 관계는 명시적으로 선언되어야 합니다.</li> <li>Java, C++, C#과 같은 언어가 nominal type을 사용합니다.</li>",bn,m,Ss="Shaped based types",In,B,Fs="Shaped based type은…",Ln,D,Es="<li>타입의 이름이나 선언이 아닌 구조 / 모양(properties, method)으로 타입을 결정합니다.</li> <li>만약 이름이 서로 다른 두 타입이 같은 구조를 갖고 있다면 같은 타입으로 간주합니다.</li> <li>typescript, Go, OCaml 언어가 shaped based type을 사용합니다.</li> <li>python과 같은 동적인 언어에서는 duck typing(“If it looks like a duck and quacks like a duck, it’s a duck.“) 이라고도 합니다.</li>",Hn,j,Os="예시 코드",Un,X,Mn,yt=`<code class="language-typescript"><span class="token comment">// Shaped based types</span>
<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
	id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>
	id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">printId</span><span class="token punctuation">(</span>entity<span class="token operator">:</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">ID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>entity<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> user<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'u123'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Alice'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> order<span class="token operator">:</span> Order <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'o456'</span><span class="token punctuation">,</span> total<span class="token operator">:</span> <span class="token number">99.99</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">printId</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span>
<span class="token function">printId</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></code>`,Pn,R,qs="위처럼 typescript와 같은 Shape base type 시스템에서는 User 든 Order든 String 타입의 id를 갖고 있기 때문에 printId 함수를 실행시키는데 문제가 없습니다.",Sn,W,Fn,ft=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">UserId</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

  <span class="token class-name">UserId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">OrderId</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

  <span class="token class-name">OrderId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">String</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">UserId</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">'User with ID: </span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">id<span class="token punctuation">.</span>value</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">String</span> <span class="token function">getOrderById</span><span class="token punctuation">(</span><span class="token class-name">OrderId</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">'Order with ID: </span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">id<span class="token punctuation">.</span>value</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> userId <span class="token operator">=</span> <span class="token class-name">UserId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'u123'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> orderId <span class="token operator">=</span> <span class="token class-name">OrderId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'o456'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span>
  <span class="token comment">// print(getUserById(orderId)); // Compile-time error</span>
<span class="token punctuation">&#125;</span></code>`,En,N,Bs="하지만 Dart와 같은 Nominal type 시스템에서는 UserId와 OrderId가 명확하게 다른 타입이기 때문에 컴파일 에러가 납니다.",On,y,Ds="Tagged Union types",qn,z,js=`Tagged union types 은 sum types, discriminated unions, 혹은 variant types 같은 이름으로도 불립니다.
이름에서 알 수 있듯이 tagged union type은 각각의 타입들이 다른 타입과는 구별되는 이름 혹은 식별자를 갖고 있기 때문에 더 안전하고 쉽게 사용할 수 있다는 장점이 있습니다.`,Bn,f,Xs="Untagged union types",Dn,V,Rs=`Untagged union type은 타입간의 구별을 위한 명시적인 이름이나 식별자가 없는 타입입니다.
따라서 하나의 객체가 여러가지의 타입을 가질 수 있게되지만 타입간의 상속관계를 정의할 수 없기 때문에 runtime에서 타입을 식별할 수 없습니다.
즉 개발자가 runtime에서 타입을 식별하기 위한 코드를 직접 작성해주어야 합니다.`,jn,v,Ws="Dart support for Union types",Xn,A,Ns=`Dart는 typescript의 <code>|</code> 와 같이 Union type을 사용하기 위한 문법은 없긴하지만 Union type을 아예 배제하고 있진 않습니다.
Dart는 특정 상황에서 필요한 몇 가지 union type을 정의해놨습니다.`,Rn,x,zs="<code>FutureOr&lt;T&gt;</code>",Wn,G,Vs="<p>A type representing values that are either Future of type T or T. This class declaration is a public stand-in for an internal future - or - value generic type, which is not a class type. References to this class are resolved to the internal type. It is a compile-time error for any class to extend, mix in or implement FutureOr.</p>",Nn,K,As="<code>Future&lt;T&gt;</code> 혹은 <code>&lt;T&gt;</code> 타입입니다.",zn,g,Gs="Nullable types",Vn,Q,Ks="<code>T</code> 혹은 <code>null</code> 타입입니다.",An,h,Qs="Sealed class modifier - Tagged union types",Gn,$,$s=`<strong>sealed modifier</strong>
sealed modifier는 이산적(enumerable)이고 다른 타입과는 구별되는(known) 서브타입들의 집합을 만들기 위해 사용됩니다.
sealed modifier로 정의된 클래스는 switch문과 함께 사용할 때 enum을 사용하는 것처럼 exhaustive checking을 보장해줍니다.`,Kn,J,Js="sealed class는 다음과 같은 성격을 갖습니다.",Qn,Y,Ys="<li>내부적으로 abstract이기 때문에 직접 instance화 하여 사용할 수 없습니다.</li> <li>factory constructor를 가질 수 있습니다.</li> <li>subclass들이 사용할 constructor를 정의할 수 있습니다.</li> <li>library외부에서 sealed class를 상속(extend 혹은 implement) 할 수 없습니다.</li>",$n,Z,Zs="이처럼 sealed class는 library내부에서만 사용할 수 있기 때문에 compiler가 해당 클래스의 서브 클래스들을 모두 정확하게 파악할 수 있습니다. 따라서 compile 타임에서 switch를 통한 exhaustive checking 기능을 사용할 수 있는 것입니다.",Jn,C,nt="package - Either",Yn,nn,st=`<p>The library for error handling and railway oriented programming.
This library supports async “map” and async “then” hiding the boilerplate of working with asynchronous computations Future[Either].</p>`,Zn,sn,tt='Source: <a href="https://pub.dev/packages/either_dart" rel="nofollow">https://pub.dev/packages/either_dart</a>',ns,w,at="package - Extension type unions",ss,tn,et='<p>Support for union types in Dart has been requested at least <a href="https://github.com/dart-lang/language/issues/1222" rel="nofollow">since 2012</a>. This repository provides a basic level of support for union types in Dart.</p>',ts,an,pt='Source: <a href="https://pub.dev/packages/extension_type_unions" rel="nofollow">https://pub.dev/packages/extension_type_unions</a>',as,_,lt="Refactoring example",es,en,ps,vt=`<code class="language-dart"><span class="token comment">/// BEFORE</span>
<span class="token comment">/// images are of type List&lt;dynamic></span>
<span class="token keyword">class</span> <span class="token class-name">PreviousFormState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PreviousForm</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> images<span class="token punctuation">;</span>

	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token class-name">Form</span><span class="token punctuation">(</span>
			child<span class="token punctuation">:</span> <span class="token class-name">ImageWidgetLayout</span><span class="token punctuation">(</span>
				images<span class="token punctuation">:</span> images <span class="token operator">as</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">/// AFTER</span>
<span class="token comment">/// To utilize the sealed class to represent union types,</span>
<span class="token comment">/// define ImageType and let UrlImage and XFileImage inherit ImageType</span>
<span class="token comment">/// so that the compiler can check if all the type is checked is switch</span>
<span class="token comment">/// exhuastive checking.</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:image_picker/image_picker.dart'</span></span><span class="token punctuation">;</span>

sealed <span class="token keyword">class</span> <span class="token class-name">ImageType</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">UrlImage</span> <span class="token keyword">extends</span> <span class="token class-name">ImageType</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">UrlImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">XFileImage</span> <span class="token keyword">extends</span> <span class="token class-name">ImageType</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">XFileImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">XFile</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/// each items of the images should be of type ImageType</span>
<span class="token keyword">class</span> <span class="token class-name">PreviousFormState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PreviousForm</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> images<span class="token punctuation">;</span>

	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token class-name">Form</span><span class="token punctuation">(</span>
			child<span class="token punctuation">:</span> <span class="token class-name">ImageWidgetLayout</span><span class="token punctuation">(</span>
				images<span class="token punctuation">:</span> images<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
						  <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">is</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
						    <span class="token keyword">return</span> <span class="token class-name">UrlImage</span><span class="token punctuation">(</span>item <span class="token operator">as</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
						    <span class="token keyword">return</span> <span class="token class-name">XFileImage</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
						  <span class="token punctuation">&#125;</span>
						<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,ls,pn,os,xt=`<code class="language-dart"><span class="token comment">/// BEFORE</span>
<span class="token comment">///</span>
<span class="token keyword">class</span> <span class="token class-name">ImageWidgetLayout</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">ImageWidgetLayout</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>images<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> images<span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
			gridDelegate<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
			itemCount<span class="token punctuation">:</span> images<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
			itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>images<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>runtimetype <span class="token operator">==</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span> <span class="token class-name">URLImageTile</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> images<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span> <span class="token class-name">XFileImageTile</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> images<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>

			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// AFTER</span>
<span class="token keyword">class</span> <span class="token class-name">ImageWidgetLayout</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">ImageWidgetLayout</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>images<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageType</span><span class="token punctuation">></span></span> images<span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
			gridDelegate<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
			itemCount<span class="token punctuation">:</span> images<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
			itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">switch</span> <span class="token punctuation">(</span>images<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">case</span> <span class="token class-name">UrlImage</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token keyword">final</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
						<span class="token keyword">return</span> <span class="token class-name">UrlImageTile</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">case</span> <span class="token class-name">XFileImage</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token keyword">final</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
						<span class="token keyword">return</span> <span class="token class-name">XFileImageTile</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">case</span> <span class="token class-name">Null</span><span class="token punctuation">:</span>
						<span class="token keyword">throw</span> <span class="token class-name">UnimplementedError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>

			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,cs,T,ot="Source",is,ln,ct='<a href="https://dcm.dev/blog/2024/12/10/demystifying-union-types-dart-tagged-untagged/" rel="nofollow">https://dcm.dev/blog/2024/12/10/demystifying-union-types-dart-tagged-untagged/</a>',us,on,it='<a href="https://pub.dev/packages/either_dart" rel="nofollow">https://pub.dev/packages/either_dart</a>',ks,cn,ut='<a href="https://pub.dev/packages/extension_type_unions" rel="nofollow">https://pub.dev/packages/extension_type_unions</a>';return{c(){u=e("nav"),u.innerHTML=fs,un=l(),k=e("h1"),k.textContent=vs,kn=l(),b=e("p"),b.textContent=xs,rn=l(),I=e("p"),I.textContent=gs,dn=l(),L=e("ol"),L.innerHTML=hs,mn=l(),H=e("p"),H.textContent=Cs,yn=l(),U=e("p"),U.textContent=ws,fn=l(),M=e("p"),M.textContent=_s,vn=l(),P=e("ul"),P.innerHTML=Ts,xn=l(),S=e("p"),S.textContent=bs,gn=l(),r=e("h1"),r.textContent=Is,hn=l(),F=e("p"),F.textContent=Ls,Cn=l(),E=e("p"),E.textContent=Hs,wn=l(),d=e("h2"),d.textContent=Us,_n=l(),O=e("p"),O.textContent=Ms,Tn=l(),q=e("ul"),q.innerHTML=Ps,bn=l(),m=e("h2"),m.textContent=Ss,In=l(),B=e("p"),B.textContent=Fs,Ln=l(),D=e("ul"),D.innerHTML=Es,Hn=l(),j=e("p"),j.textContent=Os,Un=l(),X=e("pre"),Mn=new rs(!1),Pn=l(),R=e("p"),R.textContent=qs,Sn=l(),W=e("pre"),Fn=new rs(!1),En=l(),N=e("p"),N.textContent=Bs,On=l(),y=e("h2"),y.textContent=Ds,qn=l(),z=e("p"),z.textContent=js,Bn=l(),f=e("h2"),f.textContent=Xs,Dn=l(),V=e("p"),V.textContent=Rs,jn=l(),v=e("h1"),v.textContent=Ws,Xn=l(),A=e("p"),A.innerHTML=Ns,Rn=l(),x=e("h2"),x.innerHTML=zs,Wn=l(),G=e("blockquote"),G.innerHTML=Vs,Nn=l(),K=e("p"),K.innerHTML=As,zn=l(),g=e("h2"),g.textContent=Gs,Vn=l(),Q=e("p"),Q.innerHTML=Ks,An=l(),h=e("h2"),h.textContent=Qs,Gn=l(),$=e("p"),$.innerHTML=$s,Kn=l(),J=e("p"),J.textContent=Js,Qn=l(),Y=e("ul"),Y.innerHTML=Ys,$n=l(),Z=e("p"),Z.textContent=Zs,Jn=l(),C=e("h2"),C.textContent=nt,Yn=l(),nn=e("blockquote"),nn.innerHTML=st,Zn=l(),sn=e("p"),sn.innerHTML=tt,ns=l(),w=e("h2"),w.textContent=at,ss=l(),tn=e("blockquote"),tn.innerHTML=et,ts=l(),an=e("p"),an.innerHTML=pt,as=l(),_=e("h1"),_.textContent=lt,es=l(),en=e("pre"),ps=new rs(!1),ls=l(),pn=e("pre"),os=new rs(!1),cs=l(),T=e("h1"),T.textContent=ot,is=l(),ln=e("p"),ln.innerHTML=ct,us=l(),on=e("p"),on.innerHTML=it,ks=l(),cn=e("p"),cn.innerHTML=ut,this.h()},l(n){u=p(n,"NAV",{class:!0,"data-svelte-h":!0}),c(u)!=="svelte-yrleec"&&(u.innerHTML=fs),un=o(n),k=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(k)!=="svelte-1k2d1in"&&(k.textContent=vs),kn=o(n),b=p(n,"P",{"data-svelte-h":!0}),c(b)!=="svelte-1a6fha6"&&(b.textContent=xs),rn=o(n),I=p(n,"P",{"data-svelte-h":!0}),c(I)!=="svelte-1lqpanw"&&(I.textContent=gs),dn=o(n),L=p(n,"OL",{"data-svelte-h":!0}),c(L)!=="svelte-wmjzi"&&(L.innerHTML=hs),mn=o(n),H=p(n,"P",{"data-svelte-h":!0}),c(H)!=="svelte-p64p3y"&&(H.textContent=Cs),yn=o(n),U=p(n,"P",{"data-svelte-h":!0}),c(U)!=="svelte-z9kbby"&&(U.textContent=ws),fn=o(n),M=p(n,"P",{"data-svelte-h":!0}),c(M)!=="svelte-qcfz50"&&(M.textContent=_s),vn=o(n),P=p(n,"UL",{"data-svelte-h":!0}),c(P)!=="svelte-lpjb7q"&&(P.innerHTML=Ts),xn=o(n),S=p(n,"P",{"data-svelte-h":!0}),c(S)!=="svelte-1ou4gwb"&&(S.textContent=bs),gn=o(n),r=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(r)!=="svelte-1d7r2ud"&&(r.textContent=Is),hn=o(n),F=p(n,"P",{"data-svelte-h":!0}),c(F)!=="svelte-1jx27r6"&&(F.textContent=Ls),Cn=o(n),E=p(n,"P",{"data-svelte-h":!0}),c(E)!=="svelte-1df43at"&&(E.textContent=Hs),wn=o(n),d=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(d)!=="svelte-1l9l5i3"&&(d.textContent=Us),_n=o(n),O=p(n,"P",{"data-svelte-h":!0}),c(O)!=="svelte-1sbaqmq"&&(O.textContent=Ms),Tn=o(n),q=p(n,"UL",{"data-svelte-h":!0}),c(q)!=="svelte-100rjfc"&&(q.innerHTML=Ps),bn=o(n),m=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-1shtrv6"&&(m.textContent=Ss),In=o(n),B=p(n,"P",{"data-svelte-h":!0}),c(B)!=="svelte-veleha"&&(B.textContent=Fs),Ln=o(n),D=p(n,"UL",{"data-svelte-h":!0}),c(D)!=="svelte-i0y42b"&&(D.innerHTML=Es),Hn=o(n),j=p(n,"P",{"data-svelte-h":!0}),c(j)!=="svelte-8y5i44"&&(j.textContent=Os),Un=o(n),X=p(n,"PRE",{class:!0});var t=ds(X);Mn=ms(t,!1),t.forEach(s),Pn=o(n),R=p(n,"P",{"data-svelte-h":!0}),c(R)!=="svelte-y0vb4y"&&(R.textContent=qs),Sn=o(n),W=p(n,"PRE",{class:!0});var kt=ds(W);Fn=ms(kt,!1),kt.forEach(s),En=o(n),N=p(n,"P",{"data-svelte-h":!0}),c(N)!=="svelte-1omvqt9"&&(N.textContent=Bs),On=o(n),y=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-1v1jkce"&&(y.textContent=Ds),qn=o(n),z=p(n,"P",{"data-svelte-h":!0}),c(z)!=="svelte-135hqdn"&&(z.textContent=js),Bn=o(n),f=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-8tbopm"&&(f.textContent=Xs),Dn=o(n),V=p(n,"P",{"data-svelte-h":!0}),c(V)!=="svelte-p8i069"&&(V.textContent=Rs),jn=o(n),v=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-1pxyokk"&&(v.textContent=Ws),Xn=o(n),A=p(n,"P",{"data-svelte-h":!0}),c(A)!=="svelte-n9vrre"&&(A.innerHTML=Ns),Rn=o(n),x=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(x)!=="svelte-1bon3u5"&&(x.innerHTML=zs),Wn=o(n),G=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(G)!=="svelte-1yehep7"&&(G.innerHTML=Vs),Nn=o(n),K=p(n,"P",{"data-svelte-h":!0}),c(K)!=="svelte-1crbgn8"&&(K.innerHTML=As),zn=o(n),g=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-qzedsj"&&(g.textContent=Gs),Vn=o(n),Q=p(n,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-ubx92y"&&(Q.innerHTML=Ks),An=o(n),h=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(h)!=="svelte-1cza03q"&&(h.textContent=Qs),Gn=o(n),$=p(n,"P",{"data-svelte-h":!0}),c($)!=="svelte-dteysh"&&($.innerHTML=$s),Kn=o(n),J=p(n,"P",{"data-svelte-h":!0}),c(J)!=="svelte-13sl2te"&&(J.textContent=Js),Qn=o(n),Y=p(n,"UL",{"data-svelte-h":!0}),c(Y)!=="svelte-1g5w1fr"&&(Y.innerHTML=Ys),$n=o(n),Z=p(n,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-1t02sv8"&&(Z.textContent=Zs),Jn=o(n),C=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-cg3ny2"&&(C.textContent=nt),Yn=o(n),nn=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(nn)!=="svelte-sajh8"&&(nn.innerHTML=st),Zn=o(n),sn=p(n,"P",{"data-svelte-h":!0}),c(sn)!=="svelte-1o87aoy"&&(sn.innerHTML=tt),ns=o(n),w=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(w)!=="svelte-15hawgs"&&(w.textContent=at),ss=o(n),tn=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(tn)!=="svelte-1kr93jv"&&(tn.innerHTML=et),ts=o(n),an=p(n,"P",{"data-svelte-h":!0}),c(an)!=="svelte-1mtkgsy"&&(an.innerHTML=pt),as=o(n),_=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(_)!=="svelte-dj44vf"&&(_.textContent=lt),es=o(n),en=p(n,"PRE",{class:!0});var rt=ds(en);ps=ms(rt,!1),rt.forEach(s),ls=o(n),pn=p(n,"PRE",{class:!0});var dt=ds(pn);os=ms(dt,!1),dt.forEach(s),cs=o(n),T=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(T)!=="svelte-leqc2o"&&(T.textContent=ot),is=o(n),ln=p(n,"P",{"data-svelte-h":!0}),c(ln)!=="svelte-1yjmtxf"&&(ln.innerHTML=ct),us=o(n),on=p(n,"P",{"data-svelte-h":!0}),c(on)!=="svelte-1mbrtkr"&&(on.innerHTML=it),ks=o(n),cn=p(n,"P",{"data-svelte-h":!0}),c(cn)!=="svelte-1u56kkr"&&(cn.innerHTML=ut),this.h()},h(){i(u,"class","toc"),i(k,"id","union-types"),i(r,"id","type-systems"),i(d,"id","nominal-types"),i(m,"id","shaped-based-types"),Mn.a=null,i(X,"class","language-typescript"),Fn.a=null,i(W,"class","language-dart"),i(y,"id","tagged-union-types"),i(f,"id","untagged-union-types"),i(v,"id","dart-support-for-union-types"),i(x,"id","futureorlttgt"),i(g,"id","nullable-types"),i(h,"id","sealed-class-modifier---tagged-union-types"),i(C,"id","package---either"),i(w,"id","package---extension-type-unions"),i(_,"id","refactoring-example"),ps.a=null,i(en,"class","language-dart"),os.a=null,i(pn,"class","language-dart"),i(T,"id","source")},m(n,t){a(n,u,t),a(n,un,t),a(n,k,t),a(n,kn,t),a(n,b,t),a(n,rn,t),a(n,I,t),a(n,dn,t),a(n,L,t),a(n,mn,t),a(n,H,t),a(n,yn,t),a(n,U,t),a(n,fn,t),a(n,M,t),a(n,vn,t),a(n,P,t),a(n,xn,t),a(n,S,t),a(n,gn,t),a(n,r,t),a(n,hn,t),a(n,F,t),a(n,Cn,t),a(n,E,t),a(n,wn,t),a(n,d,t),a(n,_n,t),a(n,O,t),a(n,Tn,t),a(n,q,t),a(n,bn,t),a(n,m,t),a(n,In,t),a(n,B,t),a(n,Ln,t),a(n,D,t),a(n,Hn,t),a(n,j,t),a(n,Un,t),a(n,X,t),Mn.m(yt,X),a(n,Pn,t),a(n,R,t),a(n,Sn,t),a(n,W,t),Fn.m(ft,W),a(n,En,t),a(n,N,t),a(n,On,t),a(n,y,t),a(n,qn,t),a(n,z,t),a(n,Bn,t),a(n,f,t),a(n,Dn,t),a(n,V,t),a(n,jn,t),a(n,v,t),a(n,Xn,t),a(n,A,t),a(n,Rn,t),a(n,x,t),a(n,Wn,t),a(n,G,t),a(n,Nn,t),a(n,K,t),a(n,zn,t),a(n,g,t),a(n,Vn,t),a(n,Q,t),a(n,An,t),a(n,h,t),a(n,Gn,t),a(n,$,t),a(n,Kn,t),a(n,J,t),a(n,Qn,t),a(n,Y,t),a(n,$n,t),a(n,Z,t),a(n,Jn,t),a(n,C,t),a(n,Yn,t),a(n,nn,t),a(n,Zn,t),a(n,sn,t),a(n,ns,t),a(n,w,t),a(n,ss,t),a(n,tn,t),a(n,ts,t),a(n,an,t),a(n,as,t),a(n,_,t),a(n,es,t),a(n,en,t),ps.m(vt,en),a(n,ls,t),a(n,pn,t),os.m(xt,pn),a(n,cs,t),a(n,T,t),a(n,is,t),a(n,ln,t),a(n,us,t),a(n,on,t),a(n,ks,t),a(n,cn,t)},p:ys,i:ys,o:ys,d(n){n&&(s(u),s(un),s(k),s(kn),s(b),s(rn),s(I),s(dn),s(L),s(mn),s(H),s(yn),s(U),s(fn),s(M),s(vn),s(P),s(xn),s(S),s(gn),s(r),s(hn),s(F),s(Cn),s(E),s(wn),s(d),s(_n),s(O),s(Tn),s(q),s(bn),s(m),s(In),s(B),s(Ln),s(D),s(Hn),s(j),s(Un),s(X),s(Pn),s(R),s(Sn),s(W),s(En),s(N),s(On),s(y),s(qn),s(z),s(Bn),s(f),s(Dn),s(V),s(jn),s(v),s(Xn),s(A),s(Rn),s(x),s(Wn),s(G),s(Nn),s(K),s(zn),s(g),s(Vn),s(Q),s(An),s(h),s(Gn),s($),s(Kn),s(J),s(Qn),s(Y),s($n),s(Z),s(Jn),s(C),s(Yn),s(nn),s(Zn),s(sn),s(ns),s(w),s(ss),s(tn),s(ts),s(an),s(as),s(_),s(es),s(en),s(ls),s(pn),s(cs),s(T),s(is),s(ln),s(us),s(on),s(ks),s(cn))}}}const bt={title:"Union types in dart",description:"Union type에 대해 알아봅시다.",author:"jack",published:!0,date:"2024. 12. 26.",tags:["Dart"]};class It extends ht{constructor(u){super(),Ct(this,u,null,wt,gt,{})}}export{It as default,bt as metadata};
