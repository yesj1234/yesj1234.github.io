import{s as gt,n as An}from"./scheduler.B-IchvsE.js";import{S as yt,i as ht,e,s as l,H as f,c as p,u as c,r as o,v,w as x,d as t,a as u,g as a}from"./index.BjaxA5q6.js";function wt(rt){let i,Bn='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#record란">Record란?</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#syntax">syntax</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#record-값-접근">Record 값 접근</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#record는-언제-쓰면-좋을까">Record는 언제 쓰면 좋을까?</a></li></ol>',Q,r,Dn="Record란?",K,_,Xn="Record는 Dart 3.0 이상의 버전에서 사용할 수 있는 type입니다.",N,C,Yn="Record는 다음과 같은 특징을 갖습니다.",V,g,qn="<li><strong>anonymous</strong>: anonymous function (혹은 lambda function) 처럼 이름이 없는 익명으로 사용됩니다.</li> <li><strong>immutable</strong>: 불변 타입입니다. 따라서 setter가 없고 타입이 고정됩니다(<strong>fixed-type</strong>).</li> <li><strong>aggregate</strong>: 하나의 record 안에 여러 개의 data type을 담을 수 있습니다. 이 성질을 <strong>heterogeneous</strong> 하다고도 표현합니다.</li>",G,I,J,k,Sn="syntax",W,y,$n="<strong>Record expression</strong>(표현식)은 소괄호()를 이용해 선언하며 comma 를 이용해 각 필드를 구분합니다.",Z,h,nn,kt=`<code class="language-dart"><span class="token comment">// anonymous, immutable, aggregate 한 특징을 갖는다는 것을 상기해봅시다.</span>
<span class="token keyword">var</span> record <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'first'</span></span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'jack'</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'last'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,tn,w,zn="<strong>Record type annotation</strong> 은 표현식과 마찬가지로 소괄호와 comma를 사용해 함수의 return type이나 parameter type을 정해줄 수 있습니다.",sn,b,an,mt=`<code class="language-dart"><span class="token punctuation">(</span>int<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>int<span class="token punctuation">,</span> int<span class="token punctuation">)</span> record<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> record<span class="token punctuation">;</span> <span class="token comment">// destructuring using record pattern.</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,en,P,Un="Record type annotation 사용시 함수를 선언할 때 처럼 named \bfield를 사용할 수 있습니다.",pn,R,ln,dt=`<code class="language-dart"><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> recordAB<span class="token punctuation">;</span>

recordAB <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,on,j,Fn="위처럼 선언된 record의 <strong>type</strong>은 named field들의 name에도 영향을 받습니다.",cn,H,un,ft=`<code class="language-dart"><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>int x<span class="token punctuation">,</span> int y<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> recordXY<span class="token punctuation">;</span>
recordXY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// recordAB = recordXY // compile error</span></code>`,rn,E,On="recordAB와 recordXY는 서로 다른 이름의 name field를 갖기 때문에 서로 다른 타입으로 취급되고 recordAB에 recordXY를 할당하려 하면 컴파일 에러가 납니다.",kn,L,Qn="반면 위와 같은 상황에서 named field가 아닌 positional field를 사용하면 정상적으로 작동합니다.",mn,M,dn,vt=`<code class="language-dart"><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> recordAB <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>int x<span class="token punctuation">,</span> int y<span class="token punctuation">)</span> recordXY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

recordAB <span class="token operator">=</span> recordXY<span class="token punctuation">;</span> <span class="token comment">// recordAB and recordXY is considred the same type.</span></code>`,fn,T,Kn="<p><strong>Question</strong> : Record는 immutable 하다고 하지 않았었나요? <code>recordAB = recordXY</code> 부분은 뭔가요?</p> <p><strong>Answer</strong>: immutable 하다라는 것은 recordAB의 개별값을 직접 바꿀 수 없다는 것입니다. 위처럼 같은 타입의 새로운 record를 할당하는 것은 가능합니다.</p> <p><code>recordAB.$1 = 3 // Error</code></p> <p><code>recordAB.a = 3 // Error</code></p>",vn,m,Nn="Record 값 접근",xn,A,Vn="Record는 2가지 방식으로 값에 접근이 가능합니다.",_n,B,Gn="<li><strong>positional field access</strong></li> <li><strong>named field access</strong></li>",Cn,D,gn,xt=`<code class="language-dart"><span class="token keyword">var</span> record <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'first'</span></span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'jack'</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'last'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// positional access through $</span>
<span class="token function">print</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints 'first'</span>
<span class="token function">print</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints 'last'</span>

<span class="token comment">// named access through field names</span>
<span class="token function">print</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints 'jack'</span>
<span class="token function">print</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints 30</span></code>`,yn,d,In="Record는 언제 쓰면 좋을까?",hn,X,Jn="Dart에서 Record를 사용하는 가장 대표적인 경우는 Multiple return입니다.",wn,Y,Wn="보통은 함수가 하나의 반환값을 갖지만 여러 개의 값을 반환하는 함수가 유용한 경우가 있습니다.",bn,q,Zn="예를 들어 json에서 값을 추출하여 가공하는 경우를 생각해 보겠습니다.",Pn,S,Rn,_t=`<code class="language-dart"><span class="token comment">// fetch json that has name and age as its field.</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// fetch the json data</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">return</span> json<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> jsonData <span class="token operator">=</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> jsonData<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'name'</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> jsonData<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'age'</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Do something with the name and age.</span></code>`,jn,$,nt="name 과 age를 json으로 받아 가공하는 함수입니다.",Hn,z,tt="만약 fetchData 함수가 json을 반환하는게 아니라 바로 name과 age를 반환하게 하면 어떨까요?",En,U,Ln,Ct=`<code class="language-dart"><span class="token class-name">Future</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token operator">></span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// fetch the json data</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'name'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">String</span><span class="token punctuation">,</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'age'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> int<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">final</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Mn,F,st="코드가 좀 더 간결해지고 type safety를 보장해주는 효과가 있습니다.",Tn,O,at="Record가 아닌 List나 Set같은 type들로도 multiple return을 구현할 수 있지만 type safety를 보장해주지 않습니다.";return{c(){i=e("nav"),i.innerHTML=Bn,Q=l(),r=e("h1"),r.textContent=Dn,K=l(),_=e("p"),_.textContent=Xn,N=l(),C=e("p"),C.textContent=Yn,V=l(),g=e("ul"),g.innerHTML=qn,G=l(),I=e("hr"),J=l(),k=e("h2"),k.textContent=Sn,W=l(),y=e("p"),y.innerHTML=$n,Z=l(),h=e("pre"),nn=new f(!1),tn=l(),w=e("p"),w.innerHTML=zn,sn=l(),b=e("pre"),an=new f(!1),en=l(),P=e("p"),P.textContent=Un,pn=l(),R=e("pre"),ln=new f(!1),on=l(),j=e("p"),j.innerHTML=Fn,cn=l(),H=e("pre"),un=new f(!1),rn=l(),E=e("p"),E.textContent=On,kn=l(),L=e("p"),L.textContent=Qn,mn=l(),M=e("pre"),dn=new f(!1),fn=l(),T=e("blockquote"),T.innerHTML=Kn,vn=l(),m=e("h2"),m.textContent=Nn,xn=l(),A=e("p"),A.textContent=Vn,_n=l(),B=e("ul"),B.innerHTML=Gn,Cn=l(),D=e("pre"),gn=new f(!1),yn=l(),d=e("h1"),d.textContent=In,hn=l(),X=e("p"),X.textContent=Jn,wn=l(),Y=e("p"),Y.textContent=Wn,bn=l(),q=e("p"),q.textContent=Zn,Pn=l(),S=e("pre"),Rn=new f(!1),jn=l(),$=e("p"),$.textContent=nt,Hn=l(),z=e("p"),z.textContent=tt,En=l(),U=e("pre"),Ln=new f(!1),Mn=l(),F=e("p"),F.textContent=st,Tn=l(),O=e("p"),O.textContent=at,this.h()},l(n){i=p(n,"NAV",{class:!0,"data-svelte-h":!0}),c(i)!=="svelte-r3j3b"&&(i.innerHTML=Bn),Q=o(n),r=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(r)!=="svelte-16k4zgn"&&(r.textContent=Dn),K=o(n),_=p(n,"P",{"data-svelte-h":!0}),c(_)!=="svelte-1qocoek"&&(_.textContent=Xn),N=o(n),C=p(n,"P",{"data-svelte-h":!0}),c(C)!=="svelte-1lpeas1"&&(C.textContent=Yn),V=o(n),g=p(n,"UL",{"data-svelte-h":!0}),c(g)!=="svelte-6yzkv"&&(g.innerHTML=qn),G=o(n),I=p(n,"HR",{}),J=o(n),k=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(k)!=="svelte-1yujlm"&&(k.textContent=Sn),W=o(n),y=p(n,"P",{"data-svelte-h":!0}),c(y)!=="svelte-djdfua"&&(y.innerHTML=$n),Z=o(n),h=p(n,"PRE",{class:!0});var s=v(h);nn=x(s,!1),s.forEach(t),tn=o(n),w=p(n,"P",{"data-svelte-h":!0}),c(w)!=="svelte-1xvm0pd"&&(w.innerHTML=zn),sn=o(n),b=p(n,"PRE",{class:!0});var et=v(b);an=x(et,!1),et.forEach(t),en=o(n),P=p(n,"P",{"data-svelte-h":!0}),c(P)!=="svelte-no5hp0"&&(P.textContent=Un),pn=o(n),R=p(n,"PRE",{class:!0});var pt=v(R);ln=x(pt,!1),pt.forEach(t),on=o(n),j=p(n,"P",{"data-svelte-h":!0}),c(j)!=="svelte-1hb2u0u"&&(j.innerHTML=Fn),cn=o(n),H=p(n,"PRE",{class:!0});var lt=v(H);un=x(lt,!1),lt.forEach(t),rn=o(n),E=p(n,"P",{"data-svelte-h":!0}),c(E)!=="svelte-1qhtdj1"&&(E.textContent=On),kn=o(n),L=p(n,"P",{"data-svelte-h":!0}),c(L)!=="svelte-5q9zpx"&&(L.textContent=Qn),mn=o(n),M=p(n,"PRE",{class:!0});var ot=v(M);dn=x(ot,!1),ot.forEach(t),fn=o(n),T=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(T)!=="svelte-haby2x"&&(T.innerHTML=Kn),vn=o(n),m=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-mkcamy"&&(m.textContent=Nn),xn=o(n),A=p(n,"P",{"data-svelte-h":!0}),c(A)!=="svelte-edr4gm"&&(A.textContent=Vn),_n=o(n),B=p(n,"UL",{"data-svelte-h":!0}),c(B)!=="svelte-j76489"&&(B.innerHTML=Gn),Cn=o(n),D=p(n,"PRE",{class:!0});var ct=v(D);gn=x(ct,!1),ct.forEach(t),yn=o(n),d=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(d)!=="svelte-1ks32g8"&&(d.textContent=In),hn=o(n),X=p(n,"P",{"data-svelte-h":!0}),c(X)!=="svelte-1yv4oof"&&(X.textContent=Jn),wn=o(n),Y=p(n,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-1x9jn2s"&&(Y.textContent=Wn),bn=o(n),q=p(n,"P",{"data-svelte-h":!0}),c(q)!=="svelte-1x6668v"&&(q.textContent=Zn),Pn=o(n),S=p(n,"PRE",{class:!0});var ut=v(S);Rn=x(ut,!1),ut.forEach(t),jn=o(n),$=p(n,"P",{"data-svelte-h":!0}),c($)!=="svelte-g5o06b"&&($.textContent=nt),Hn=o(n),z=p(n,"P",{"data-svelte-h":!0}),c(z)!=="svelte-1jfp2fi"&&(z.textContent=tt),En=o(n),U=p(n,"PRE",{class:!0});var it=v(U);Ln=x(it,!1),it.forEach(t),Mn=o(n),F=p(n,"P",{"data-svelte-h":!0}),c(F)!=="svelte-1ie0yos"&&(F.textContent=st),Tn=o(n),O=p(n,"P",{"data-svelte-h":!0}),c(O)!=="svelte-8a1lis"&&(O.textContent=at),this.h()},h(){u(i,"class","toc"),u(r,"id","record란"),u(k,"id","syntax"),nn.a=null,u(h,"class","language-dart"),an.a=null,u(b,"class","language-dart"),ln.a=null,u(R,"class","language-dart"),un.a=null,u(H,"class","language-dart"),dn.a=null,u(M,"class","language-dart"),u(m,"id","record-값-접근"),gn.a=null,u(D,"class","language-dart"),u(d,"id","record는-언제-쓰면-좋을까"),Rn.a=null,u(S,"class","language-dart"),Ln.a=null,u(U,"class","language-dart")},m(n,s){a(n,i,s),a(n,Q,s),a(n,r,s),a(n,K,s),a(n,_,s),a(n,N,s),a(n,C,s),a(n,V,s),a(n,g,s),a(n,G,s),a(n,I,s),a(n,J,s),a(n,k,s),a(n,W,s),a(n,y,s),a(n,Z,s),a(n,h,s),nn.m(kt,h),a(n,tn,s),a(n,w,s),a(n,sn,s),a(n,b,s),an.m(mt,b),a(n,en,s),a(n,P,s),a(n,pn,s),a(n,R,s),ln.m(dt,R),a(n,on,s),a(n,j,s),a(n,cn,s),a(n,H,s),un.m(ft,H),a(n,rn,s),a(n,E,s),a(n,kn,s),a(n,L,s),a(n,mn,s),a(n,M,s),dn.m(vt,M),a(n,fn,s),a(n,T,s),a(n,vn,s),a(n,m,s),a(n,xn,s),a(n,A,s),a(n,_n,s),a(n,B,s),a(n,Cn,s),a(n,D,s),gn.m(xt,D),a(n,yn,s),a(n,d,s),a(n,hn,s),a(n,X,s),a(n,wn,s),a(n,Y,s),a(n,bn,s),a(n,q,s),a(n,Pn,s),a(n,S,s),Rn.m(_t,S),a(n,jn,s),a(n,$,s),a(n,Hn,s),a(n,z,s),a(n,En,s),a(n,U,s),Ln.m(Ct,U),a(n,Mn,s),a(n,F,s),a(n,Tn,s),a(n,O,s)},p:An,i:An,o:An,d(n){n&&(t(i),t(Q),t(r),t(K),t(_),t(N),t(C),t(V),t(g),t(G),t(I),t(J),t(k),t(W),t(y),t(Z),t(h),t(tn),t(w),t(sn),t(b),t(en),t(P),t(pn),t(R),t(on),t(j),t(cn),t(H),t(rn),t(E),t(kn),t(L),t(mn),t(M),t(fn),t(T),t(vn),t(m),t(xn),t(A),t(_n),t(B),t(Cn),t(D),t(yn),t(d),t(hn),t(X),t(wn),t(Y),t(bn),t(q),t(Pn),t(S),t(jn),t($),t(Hn),t(z),t(En),t(U),t(Mn),t(F),t(Tn),t(O))}}}const Rt={title:"Record type in Dart",description:"Record type에 대해 알아봅니다.",author:"jack",date:"2024.09. 23.",published:!0,tags:["Dart"]};class jt extends yt{constructor(i){super(),ht(this,i,null,wt,gt,{})}}export{jt as default,Rt as metadata};
