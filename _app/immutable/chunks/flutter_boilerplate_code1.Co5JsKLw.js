import{s as ut,n as Os}from"./scheduler.B-IchvsE.js";import{S as it,i as kt,k as e,s as l,H as r,l as p,v as c,b as o,n as i,w as d,g as s,o as u,d as t,r as rt}from"./index.Dd-P1WrH.js";function dt(Za){let k,zs='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#create-new-flutter-project">Create new flutter project</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#void-main">void main()</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#class-myapp-extends-statelesswidget">class MyApp extends StatelessWidget</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#statelesswidget">StatelessWidget</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#widget">Widget</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#key">Key</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#valuekey">ValueKey</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#localkey">LocalKey</a></li></ol></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#sources">Sources</a></li></ol>',hn,m,Is="Create new flutter project",Pn,T,$s="Android studio와 같은 IDE를 이용해 새로운 flutter 프로젝트를 만들 경우 <code>lib</code> 폴더의 <code>main.dart</code> 파일 안에 자동으로 다음과 같은 코드가 작성되어 있는것을 확인 할 수 있습니다.",Mn,h,bn,Ja=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
      title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Flutter Demo'</span></span><span class="token punctuation">,</span>
      theme<span class="token punctuation">:</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span>
        useMaterial3<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      home<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MyHomePage</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Flutter Demo Home Page'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">MyHomePage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token class-name">MyHomePage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyHomePage</span><span class="token punctuation">></span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_MyHomePageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> _MyHomePageState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyHomePage</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
  int _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">_incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	    _counter<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	  <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>
			backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">.</span>inversePrimary<span class="token punctuation">,</span>
            title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
	      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
		      mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">></span></span><span class="token punctuation">[</span>
            <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
              <span class="token string-literal"><span class="token string">'You have pushed the button this many times:'</span></span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Text</span><span class="token punctuation">(</span>
              <span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">_counter</span></span><span class="token string">'</span></span><span class="token punctuation">,</span>
              style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>headlineMedium<span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      floatingActionButton<span class="token punctuation">:</span> <span class="token class-name">FloatingActionButton</span><span class="token punctuation">(</span>
        onPressed<span class="token punctuation">:</span> _incrementCounter<span class="token punctuation">,</span>
        tooltip<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Increment'</span></span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Hn,P,Qs="(코드를 한 눈에 보기 위해 주석은 제거 했습니다.)",Wn,M,Us="처음 Flutter 프로젝트를 만들고 이 코드를 접했을 땐 생각보다 코드가 이해가 되지 않아 당황스러웠습니다.(<del>분명 Dart 문법은 어느 정도 익혔다고 생각했는데..</del>)",Ln,b,Ys="StatelessWidget이 뭐지? super.key는 또 뭐지? BuildContext는 또 무슨 타입이지? StatefulWidget은 StatelessWidget이랑 다르게 바로 build를 안하네? 와 같은 질문들이 꼬리에 꼬리를 물면서 생겨났습니다.",Sn,H,Gs="사실 위 코드가 이해되지 않는 이유는 Dart를 몰라서가 아니라 Flutter를 몰라서입니다.",Kn,W,Ns="코드를 한 줄 한 줄 따라가며 위의 코드가 어떤 의미인지 Flutter 소스코드를 보며 이해해보도록 합시다.",En,y,Xs="void main()",An,L,Zs="모든 dart 프로그램은 main 함수를 갖습니다. 프로그램의 진입점 역할을 하는 함수입니다.",jn,S,Js="<code>runApp()</code> 함수는 Widget을 argument로 받아 화면에 해당 Widget 을 그려주는 역할을 하는 함수입니다.",qn,K,na="보통은 위처럼 어플리케이션의 최상단에서 컨테이너의 역할을 하는 Widget을 넣어줍니다.",Vn,v,sa="class MyApp extends StatelessWidget",Dn,E,aa="<strong>MyApp</strong> 클래스는 <strong>StatelessWidget</strong>을 상속받고 있습니다.",Fn,A,ta="<strong>StatelessWidget</strong>은 무슨 클래스일까요?",Bn,f,ea="StatelessWidget",Rn,j,On,nt=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StatelessWidget</span> <span class="token keyword">extends</span> <span class="token class-name">Widget</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">StatelessElement</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">StatelessElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token metadata function">@protected</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,zn,q,pa="<strong>StatelessWidget</strong>은 <strong>Widget</strong>을 상속 받고 있는 <strong>추상 클래스</strong>군요.",In,V,la="따라서 일반적인 클래스처럼 인스턴스화 하여 사용하는 용도가 아니라 StatelessWidget을 상속받는 하위 클래스에서 body 없이 이름만 덩그러니 선언되어 있는 메서드들의 구체적인 구현을 해주겠구나 짐작이 가능하겠습니다.",$n,D,oa="현재 MyApp이 StatelessWidget을 상속받고 있고 <code>Widget build(BuildContext context)</code>를 overriding 하고 있는 것을 확인 할 수 있습니다.",Qn,F,Un,st=`<code class="language-dart"><span class="token metadata function">@override</span>
<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// MarerialApp이라는 Widget을 return 하는군요.</span>
<span class="token punctuation">&#125;</span></code>`,Yn,B,ca="<p><strong>Question</strong> : <code>createElement()</code> 메서드는 MyApp에서 override 하지 않는데 왜 그런거죠?</p> <p><strong>Answer</strong> : <code>createElement()</code> 메서드는 body가 있는 메서드입니다.</p> <p>특별한 경우가 아니라면 StatelessWidget을 상속받는 하위 클래스에서는 이 메서드를 따로 정의해주지 않는 것이 일반적입니다.</p> <p><code>createElement()</code> 메서드는 Widget(blueprint 역할)을 받아 실제 화면에 그려지는 <strong>Element</strong>를 반환해주는 함수입니다.</p>",Gn,R,ua="StatelessWidget이 어떤건지는 알겠으니 이제 <strong>Widget이</strong> 뭔지를 알아봐야겠군요.",Nn,x,ia="Widget",Xn,O,Zn,at=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token keyword">extends</span> <span class="token class-name">DiagnosticableTree</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">Widget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Initializes key for subclasses.</span>

	<span class="token keyword">final</span> <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">;</span>

	<span class="token metadata function">@protected</span>
	<span class="token metadata function">@factory</span>
	<span class="token class-name">Element</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token metadata function">@override</span>
	<span class="token class-name">String</span> <span class="token function">toStringShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">final</span> <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token function">objectRuntimeType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'Widget'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> type<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">type</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">key</span></span><span class="token string">'</span></span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token metadata function">@override</span>
	<span class="token keyword">void</span> <span class="token function">debugFillProperties</span><span class="token punctuation">(</span><span class="token class-name">DiagnosticPropertiesBuilder</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">debugFillProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
		properties<span class="token punctuation">.</span>defaultDiagnosticsTreeStyle <span class="token operator">=</span> <span class="token class-name">DiagnosticsTreeStyle</span><span class="token punctuation">.</span>dense<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token metadata function">@override</span>
	<span class="token metadata function">@nonVirtual</span>
	bool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">super</span> <span class="token operator">==</span> other<span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	<span class="token metadata function">@nonVirtual</span>
	int <span class="token keyword">get</span> hashCode <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">super</span><span class="token punctuation">.</span>hashCode<span class="token punctuation">;</span>

	<span class="token keyword">static</span> bool <span class="token function">canUpdate</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> oldWidget<span class="token punctuation">,</span> <span class="token class-name">Widget</span> newWidget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> oldWidget<span class="token punctuation">.</span>runtimeType <span class="token operator">==</span> newWidget<span class="token punctuation">.</span>runtimeType
			<span class="token operator">&amp;&amp;</span> oldWidget<span class="token punctuation">.</span>key <span class="token operator">==</span> newWidget<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">static</span> int <span class="token function">_debugConcreteSubtype</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> widget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> widget <span class="token operator">is</span> <span class="token class-name">StatefullWidget</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span>
			widget <span class="token operator">is</span> <span class="token class-name">StatelessWidget</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Jn,z,ka="(코드를 한 눈에 보기 위해 주석은 제거 했습니다.)",ns,I,ra="Widget은 DiagnosticableTree를 상속받고 있는 추상 클래스이군요..",ss,$,da="글이 너무 장황해지는 것 같아 DiagnosticableTree에 대해서는 설명하지 않도록 하겠습니다.(<del>기회가 된다면 다음에..</del>)",as,Q,ma="그 다음 줄부터 보도록 하겠습니다.",ts,U,es,tt=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token keyword">extends</span> <span class="token class-name">DiagnosticableTree</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">Widget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">final</span> <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span></code>`,ps,Y,ya=`<code>MyApp</code>과 <code>StatelessWidget</code>에서 super.key로 부르던 key가 Widget이 갖고 있던 variable이였군요.
constant constructor의 parameter로 들어가기 때문에 final로 선언되며 <strong>Key</strong>라는 타입을 갖는 것을 알 수 있습니다.`,ls,G,os,et=`<code class="language-dart"><span class="token keyword">const</span> <span class="token class-name">Widget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 이 부분은 다음과 같은 의미를 갖는 코드입니다.</span>
<span class="token comment">// Redirecting to the parent class constructor with named parameter "key"</span>
<span class="token keyword">const</span> <span class="token class-name">Widget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span></code>`,cs,N,va="(물론 두번째 줄 처럼 사용할 경우 IDE가 노란줄로 경고를 줍니다만, 문법적으로 간략하게 되어 있는 부분에는 사실 위와 같은 의미가 있다는 점을 알고 가면 좋을 것 같습니다.)",us,X,fa="음.. <strong>Key</strong>는 또 뭐하는 녀석일까요?",is,w,xa="Key",ks,Z,rs,pt=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Key</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token keyword">factory</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">ValueKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>

	<span class="token metadata function">@protected</span>
	<span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ds,J,wa="Key는 constant factory constructor와 constant named constructor를 갖는 abstract class이군요.",ms,nn,Ca="factory Key constructor는 String 타입의 value를 받고 <strong>ValueKey</strong> 타입의 인스턴스를 반환합니다.",ys,sn,ga="factory constructor이기 때문에 아마 ValueKey 은 Key를 상속받는 sub class일 것으로 추측이 됩니다.",vs,an,_a="ValueKey가 뭔지를 봐야겠습니다.",fs,C,Ta="ValueKey",xs,tn,ws,lt=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ValueKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">LocalKey</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">ValueKey</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	bool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>runtimeType <span class="token operator">!=</span> runtimeType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> other <span class="token operator">is</span> <span class="token class-name">ValueKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token metadata function">@override</span>
	int <span class="token keyword">get</span> hashCode <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>runtimeType<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">final</span> <span class="token class-name">String</span> valueString <span class="token operator">=</span> <span class="token class-name">T</span> <span class="token operator">==</span> <span class="token class-name">String</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"&lt;'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">'>"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'&lt;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">>'</span></span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>runtimeType <span class="token operator">==</span> _TypeLiteral<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ValueKey</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token string-literal"><span class="token string">'[</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">valueString</span></span><span class="token string">]'</span></span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> <span class="token string-literal"><span class="token string">'[</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression"><span class="token class-name">T</span></span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">valueString</span></span><span class="token string">]'</span></span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Cs,en,ha="예상과는 다르게 Key를 바로 상속받지 않고 <strong>LocalKey</strong>를 상속받는 클래스입니다.",gs,pn,Pa="Generic type인 T를 받아 value에 저장합니다.",_s,ln,Ma="== 연산자를 오버라이딩하여 동등성 비교 로직을 커스텀하여 사용하고 있습니다. runtimeType이 같은지 우선 확인하고 만약 같은 runtimeType이라면 value가 같은지를 확인하여 두 인스턴스가 같은지를 확인하는 로직이군요.",Ts,on,ba="hashCode getter도 오버라이딩 하고 있습니다. runtimeType과 value가 같다면 hashCode가 같을것이라고 예상할 수 있습니다. == 연산자의 로직과 일맥상통합니다.",hs,cn,Ha="toString함수도 오버라이딩하여 print 함수를 호출했을 때 보여지는 모습도 커스텀해서 사용하고 있습니다.",Ps,un,Wa="ValueKey가 뭔지는 알았으니 <strong>LocalKe</strong>y가 뭔지를 확인해보면 전체적인 그림을 파악할 수 있을 것 같습니다.",Ms,g,La="LocalKey",bs,kn,Hs,ot=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LocalKey</span> <span class="token keyword">extends</span> <span class="token class-name">Key</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">LocalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ws,rn,Sa="LocalKey는 Key를 상속받는 또 다른 추상 클래스입니다.",Ls,dn,Ka="constant constructor 하나만 선언되어있고 Key의 “empty” named constructor로 리다이렉팅하고 있습니다.",Ss,mn,Ea="Key의 전체적인 상속관계는 다음과 같습니다.",Ks,yn,Aa='<img src="/key_hierarchy.jpg" alt="key_hierarchy"/>',Es,vn,ja="<p><strong>Question</strong>:</p> <p>LocalKey는 굳이 왜 필요한가요? 그냥 바로 ValueKey에서 Key를 상속받아서 사용하면 안되나요?</p> <p><strong>Answer</strong>:</p> <p>정답은 안된다 입니다.</p> <p>클래스들간의 상속관계를 지키면서 factory constructor와 constant constructor를 동시에 사용하기 위해서는 LocalKey와 같은 클래스가 반드시 필요합니다.</p> <p>factory constructor는 const로 선언될 수 없기 때문에 Key를 상속받는 하위 클래스들에서 constant constructor를 사용하기 위해서는 중간에 constant constructor를 갖는 LocalKey와 같은 클래스가 매개해주어야 합니다.</p> <p>만약 LocalKey없이 바로 상속받아 사용한다면 다음과 같은 에러를 볼 수 있습니다.</p>",As,_n,Tn,js,ct=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Key</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">factory</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ValueKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Key</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//The generative constructor 'Key Key(String value)' is expected, but a factory was found.</span>
  <span class="token keyword">const</span> <span class="token class-name">ValueKey</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This is not allowed.</span>

  <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span></code>`,qs,fn,qa="Widget이 fianl variable로 갖고 있던 key에 대해 어느정도 파악한 것 같습니다.",Vs,xn,Va="이제 다시 Widget으로 돌아와서.. (다음 글로 이어집니다!)",Ds,_,Da="Sources",Fs,wn,Fa='<a href="https://www.youtube.com/watch?v=wE7khGHVkYY" rel="nofollow">Flutter Widgets 101 EP.1</a>',Bs,Cn,Ba='<a href="https://www.youtube.com/watch?v=AqCMFXEmf3w" rel="nofollow">Flutter Widget 101 EP.2</a>',Rs,gn,Ra='<a href="https://www.youtube.com/watch?v=kn0EOS-ZiIc&amp;t=300s" rel="nofollow">Flutter Widget 101 EP.4</a>';return{c(){k=e("nav"),k.innerHTML=zs,hn=l(),m=e("h1"),m.textContent=Is,Pn=l(),T=e("p"),T.innerHTML=$s,Mn=l(),h=e("pre"),bn=new r(!1),Hn=l(),P=e("p"),P.textContent=Qs,Wn=l(),M=e("p"),M.innerHTML=Us,Ln=l(),b=e("p"),b.textContent=Ys,Sn=l(),H=e("p"),H.textContent=Gs,Kn=l(),W=e("p"),W.textContent=Ns,En=l(),y=e("h1"),y.textContent=Xs,An=l(),L=e("p"),L.textContent=Zs,jn=l(),S=e("p"),S.innerHTML=Js,qn=l(),K=e("p"),K.textContent=na,Vn=l(),v=e("h1"),v.textContent=sa,Dn=l(),E=e("p"),E.innerHTML=aa,Fn=l(),A=e("p"),A.innerHTML=ta,Bn=l(),f=e("h2"),f.textContent=ea,Rn=l(),j=e("pre"),On=new r(!1),zn=l(),q=e("p"),q.innerHTML=pa,In=l(),V=e("p"),V.textContent=la,$n=l(),D=e("p"),D.innerHTML=oa,Qn=l(),F=e("pre"),Un=new r(!1),Yn=l(),B=e("blockquote"),B.innerHTML=ca,Gn=l(),R=e("p"),R.innerHTML=ua,Nn=l(),x=e("h3"),x.textContent=ia,Xn=l(),O=e("pre"),Zn=new r(!1),Jn=l(),z=e("p"),z.textContent=ka,ns=l(),I=e("p"),I.textContent=ra,ss=l(),$=e("p"),$.innerHTML=da,as=l(),Q=e("p"),Q.textContent=ma,ts=l(),U=e("pre"),es=new r(!1),ps=l(),Y=e("p"),Y.innerHTML=ya,ls=l(),G=e("pre"),os=new r(!1),cs=l(),N=e("p"),N.textContent=va,us=l(),X=e("p"),X.innerHTML=fa,is=l(),w=e("h2"),w.textContent=xa,ks=l(),Z=e("pre"),rs=new r(!1),ds=l(),J=e("p"),J.textContent=wa,ms=l(),nn=e("p"),nn.innerHTML=Ca,ys=l(),sn=e("p"),sn.textContent=ga,vs=l(),an=e("p"),an.textContent=_a,fs=l(),C=e("h3"),C.textContent=Ta,xs=l(),tn=e("pre"),ws=new r(!1),Cs=l(),en=e("p"),en.innerHTML=ha,gs=l(),pn=e("p"),pn.textContent=Pa,_s=l(),ln=e("p"),ln.textContent=Ma,Ts=l(),on=e("p"),on.textContent=ba,hs=l(),cn=e("p"),cn.textContent=Ha,Ps=l(),un=e("p"),un.innerHTML=Wa,Ms=l(),g=e("h3"),g.textContent=La,bs=l(),kn=e("pre"),Hs=new r(!1),Ws=l(),rn=e("p"),rn.textContent=Sa,Ls=l(),dn=e("p"),dn.textContent=Ka,Ss=l(),mn=e("p"),mn.textContent=Ea,Ks=l(),yn=e("p"),yn.innerHTML=Aa,Es=l(),vn=e("blockquote"),vn.innerHTML=ja,As=l(),_n=e("blockquote"),Tn=e("pre"),js=new r(!1),qs=l(),fn=e("p"),fn.textContent=qa,Vs=l(),xn=e("p"),xn.textContent=Va,Ds=l(),_=e("h1"),_.textContent=Da,Fs=l(),wn=e("p"),wn.innerHTML=Fa,Bs=l(),Cn=e("p"),Cn.innerHTML=Ba,Rs=l(),gn=e("p"),gn.innerHTML=Ra,this.h()},l(n){k=p(n,"NAV",{class:!0,"data-svelte-h":!0}),c(k)!=="svelte-1l7aarz"&&(k.innerHTML=zs),hn=o(n),m=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-1x4hn8p"&&(m.textContent=Is),Pn=o(n),T=p(n,"P",{"data-svelte-h":!0}),c(T)!=="svelte-1srqwel"&&(T.innerHTML=$s),Mn=o(n),h=p(n,"PRE",{class:!0});var a=i(h);bn=d(a,!1),a.forEach(s),Hn=o(n),P=p(n,"P",{"data-svelte-h":!0}),c(P)!=="svelte-trupl7"&&(P.textContent=Qs),Wn=o(n),M=p(n,"P",{"data-svelte-h":!0}),c(M)!=="svelte-pc2q68"&&(M.innerHTML=Us),Ln=o(n),b=p(n,"P",{"data-svelte-h":!0}),c(b)!=="svelte-fsxuy6"&&(b.textContent=Ys),Sn=o(n),H=p(n,"P",{"data-svelte-h":!0}),c(H)!=="svelte-11eo5d4"&&(H.textContent=Gs),Kn=o(n),W=p(n,"P",{"data-svelte-h":!0}),c(W)!=="svelte-93qsc0"&&(W.textContent=Ns),En=o(n),y=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-15d0zms"&&(y.textContent=Xs),An=o(n),L=p(n,"P",{"data-svelte-h":!0}),c(L)!=="svelte-jv78i"&&(L.textContent=Zs),jn=o(n),S=p(n,"P",{"data-svelte-h":!0}),c(S)!=="svelte-7ck2v3"&&(S.innerHTML=Js),qn=o(n),K=p(n,"P",{"data-svelte-h":!0}),c(K)!=="svelte-4vlabf"&&(K.textContent=na),Vn=o(n),v=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-l5y447"&&(v.textContent=sa),Dn=o(n),E=p(n,"P",{"data-svelte-h":!0}),c(E)!=="svelte-1mxtmj3"&&(E.innerHTML=aa),Fn=o(n),A=p(n,"P",{"data-svelte-h":!0}),c(A)!=="svelte-28xqwy"&&(A.innerHTML=ta),Bn=o(n),f=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-uqwpvy"&&(f.textContent=ea),Rn=o(n),j=p(n,"PRE",{class:!0});var Oa=i(j);On=d(Oa,!1),Oa.forEach(s),zn=o(n),q=p(n,"P",{"data-svelte-h":!0}),c(q)!=="svelte-1pbntzl"&&(q.innerHTML=pa),In=o(n),V=p(n,"P",{"data-svelte-h":!0}),c(V)!=="svelte-t2vi5t"&&(V.textContent=la),$n=o(n),D=p(n,"P",{"data-svelte-h":!0}),c(D)!=="svelte-1l4skye"&&(D.innerHTML=oa),Qn=o(n),F=p(n,"PRE",{class:!0});var za=i(F);Un=d(za,!1),za.forEach(s),Yn=o(n),B=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(B)!=="svelte-e6yoey"&&(B.innerHTML=ca),Gn=o(n),R=p(n,"P",{"data-svelte-h":!0}),c(R)!=="svelte-12ioowd"&&(R.innerHTML=ua),Nn=o(n),x=p(n,"H3",{id:!0,"data-svelte-h":!0}),c(x)!=="svelte-15zwjkc"&&(x.textContent=ia),Xn=o(n),O=p(n,"PRE",{class:!0});var Ia=i(O);Zn=d(Ia,!1),Ia.forEach(s),Jn=o(n),z=p(n,"P",{"data-svelte-h":!0}),c(z)!=="svelte-trupl7"&&(z.textContent=ka),ns=o(n),I=p(n,"P",{"data-svelte-h":!0}),c(I)!=="svelte-1gsgh4v"&&(I.textContent=ra),ss=o(n),$=p(n,"P",{"data-svelte-h":!0}),c($)!=="svelte-1phws24"&&($.innerHTML=da),as=o(n),Q=p(n,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-111ipki"&&(Q.textContent=ma),ts=o(n),U=p(n,"PRE",{class:!0});var $a=i(U);es=d($a,!1),$a.forEach(s),ps=o(n),Y=p(n,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-9hz7h2"&&(Y.innerHTML=ya),ls=o(n),G=p(n,"PRE",{class:!0});var Qa=i(G);os=d(Qa,!1),Qa.forEach(s),cs=o(n),N=p(n,"P",{"data-svelte-h":!0}),c(N)!=="svelte-1r6uglr"&&(N.textContent=va),us=o(n),X=p(n,"P",{"data-svelte-h":!0}),c(X)!=="svelte-fx7ytc"&&(X.innerHTML=fa),is=o(n),w=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(w)!=="svelte-3ll8jc"&&(w.textContent=xa),ks=o(n),Z=p(n,"PRE",{class:!0});var Ua=i(Z);rs=d(Ua,!1),Ua.forEach(s),ds=o(n),J=p(n,"P",{"data-svelte-h":!0}),c(J)!=="svelte-1ska9pq"&&(J.textContent=wa),ms=o(n),nn=p(n,"P",{"data-svelte-h":!0}),c(nn)!=="svelte-10gh58y"&&(nn.innerHTML=Ca),ys=o(n),sn=p(n,"P",{"data-svelte-h":!0}),c(sn)!=="svelte-1kl74ex"&&(sn.textContent=ga),vs=o(n),an=p(n,"P",{"data-svelte-h":!0}),c(an)!=="svelte-ul3i4r"&&(an.textContent=_a),fs=o(n),C=p(n,"H3",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-jee69g"&&(C.textContent=Ta),xs=o(n),tn=p(n,"PRE",{class:!0});var Ya=i(tn);ws=d(Ya,!1),Ya.forEach(s),Cs=o(n),en=p(n,"P",{"data-svelte-h":!0}),c(en)!=="svelte-df33h8"&&(en.innerHTML=ha),gs=o(n),pn=p(n,"P",{"data-svelte-h":!0}),c(pn)!=="svelte-100c8mj"&&(pn.textContent=Pa),_s=o(n),ln=p(n,"P",{"data-svelte-h":!0}),c(ln)!=="svelte-u1c6i9"&&(ln.textContent=Ma),Ts=o(n),on=p(n,"P",{"data-svelte-h":!0}),c(on)!=="svelte-azjr4m"&&(on.textContent=ba),hs=o(n),cn=p(n,"P",{"data-svelte-h":!0}),c(cn)!=="svelte-1dy3usl"&&(cn.textContent=Ha),Ps=o(n),un=p(n,"P",{"data-svelte-h":!0}),c(un)!=="svelte-19zh6k5"&&(un.innerHTML=Wa),Ms=o(n),g=p(n,"H3",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-6s7ibg"&&(g.textContent=La),bs=o(n),kn=p(n,"PRE",{class:!0});var Ga=i(kn);Hs=d(Ga,!1),Ga.forEach(s),Ws=o(n),rn=p(n,"P",{"data-svelte-h":!0}),c(rn)!=="svelte-gm67y0"&&(rn.textContent=Sa),Ls=o(n),dn=p(n,"P",{"data-svelte-h":!0}),c(dn)!=="svelte-fq275x"&&(dn.textContent=Ka),Ss=o(n),mn=p(n,"P",{"data-svelte-h":!0}),c(mn)!=="svelte-ernrc0"&&(mn.textContent=Ea),Ks=o(n),yn=p(n,"P",{"data-svelte-h":!0}),c(yn)!=="svelte-1spiwiu"&&(yn.innerHTML=Aa),Es=o(n),vn=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(vn)!=="svelte-asugjd"&&(vn.innerHTML=ja),As=o(n),_n=p(n,"BLOCKQUOTE",{});var Na=i(_n);Tn=p(Na,"PRE",{class:!0});var Xa=i(Tn);js=d(Xa,!1),Xa.forEach(s),Na.forEach(s),qs=o(n),fn=p(n,"P",{"data-svelte-h":!0}),c(fn)!=="svelte-1c13b2k"&&(fn.textContent=qa),Vs=o(n),xn=p(n,"P",{"data-svelte-h":!0}),c(xn)!=="svelte-ktdwmn"&&(xn.textContent=Va),Ds=o(n),_=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(_)!=="svelte-22jvrw"&&(_.textContent=Da),Fs=o(n),wn=p(n,"P",{"data-svelte-h":!0}),c(wn)!=="svelte-16na6ru"&&(wn.innerHTML=Fa),Bs=o(n),Cn=p(n,"P",{"data-svelte-h":!0}),c(Cn)!=="svelte-56ew44"&&(Cn.innerHTML=Ba),Rs=o(n),gn=p(n,"P",{"data-svelte-h":!0}),c(gn)!=="svelte-1nql4lr"&&(gn.innerHTML=Ra),this.h()},h(){u(k,"class","toc"),u(m,"id","create-new-flutter-project"),bn.a=null,u(h,"class","language-dart"),u(y,"id","void-main"),u(v,"id","class-myapp-extends-statelesswidget"),u(f,"id","statelesswidget"),On.a=null,u(j,"class","language-dart"),Un.a=null,u(F,"class","language-dart"),u(x,"id","widget"),Zn.a=null,u(O,"class","language-dart"),es.a=null,u(U,"class","language-dart"),os.a=null,u(G,"class","language-dart"),u(w,"id","key"),rs.a=null,u(Z,"class","language-dart"),u(C,"id","valuekey"),ws.a=null,u(tn,"class","language-dart"),u(g,"id","localkey"),Hs.a=null,u(kn,"class","language-dart"),js.a=null,u(Tn,"class","language-dart"),u(_,"id","sources")},m(n,a){t(n,k,a),t(n,hn,a),t(n,m,a),t(n,Pn,a),t(n,T,a),t(n,Mn,a),t(n,h,a),bn.m(Ja,h),t(n,Hn,a),t(n,P,a),t(n,Wn,a),t(n,M,a),t(n,Ln,a),t(n,b,a),t(n,Sn,a),t(n,H,a),t(n,Kn,a),t(n,W,a),t(n,En,a),t(n,y,a),t(n,An,a),t(n,L,a),t(n,jn,a),t(n,S,a),t(n,qn,a),t(n,K,a),t(n,Vn,a),t(n,v,a),t(n,Dn,a),t(n,E,a),t(n,Fn,a),t(n,A,a),t(n,Bn,a),t(n,f,a),t(n,Rn,a),t(n,j,a),On.m(nt,j),t(n,zn,a),t(n,q,a),t(n,In,a),t(n,V,a),t(n,$n,a),t(n,D,a),t(n,Qn,a),t(n,F,a),Un.m(st,F),t(n,Yn,a),t(n,B,a),t(n,Gn,a),t(n,R,a),t(n,Nn,a),t(n,x,a),t(n,Xn,a),t(n,O,a),Zn.m(at,O),t(n,Jn,a),t(n,z,a),t(n,ns,a),t(n,I,a),t(n,ss,a),t(n,$,a),t(n,as,a),t(n,Q,a),t(n,ts,a),t(n,U,a),es.m(tt,U),t(n,ps,a),t(n,Y,a),t(n,ls,a),t(n,G,a),os.m(et,G),t(n,cs,a),t(n,N,a),t(n,us,a),t(n,X,a),t(n,is,a),t(n,w,a),t(n,ks,a),t(n,Z,a),rs.m(pt,Z),t(n,ds,a),t(n,J,a),t(n,ms,a),t(n,nn,a),t(n,ys,a),t(n,sn,a),t(n,vs,a),t(n,an,a),t(n,fs,a),t(n,C,a),t(n,xs,a),t(n,tn,a),ws.m(lt,tn),t(n,Cs,a),t(n,en,a),t(n,gs,a),t(n,pn,a),t(n,_s,a),t(n,ln,a),t(n,Ts,a),t(n,on,a),t(n,hs,a),t(n,cn,a),t(n,Ps,a),t(n,un,a),t(n,Ms,a),t(n,g,a),t(n,bs,a),t(n,kn,a),Hs.m(ot,kn),t(n,Ws,a),t(n,rn,a),t(n,Ls,a),t(n,dn,a),t(n,Ss,a),t(n,mn,a),t(n,Ks,a),t(n,yn,a),t(n,Es,a),t(n,vn,a),t(n,As,a),t(n,_n,a),rt(_n,Tn),js.m(ct,Tn),t(n,qs,a),t(n,fn,a),t(n,Vs,a),t(n,xn,a),t(n,Ds,a),t(n,_,a),t(n,Fs,a),t(n,wn,a),t(n,Bs,a),t(n,Cn,a),t(n,Rs,a),t(n,gn,a)},p:Os,i:Os,o:Os,d(n){n&&(s(k),s(hn),s(m),s(Pn),s(T),s(Mn),s(h),s(Hn),s(P),s(Wn),s(M),s(Ln),s(b),s(Sn),s(H),s(Kn),s(W),s(En),s(y),s(An),s(L),s(jn),s(S),s(qn),s(K),s(Vn),s(v),s(Dn),s(E),s(Fn),s(A),s(Bn),s(f),s(Rn),s(j),s(zn),s(q),s(In),s(V),s($n),s(D),s(Qn),s(F),s(Yn),s(B),s(Gn),s(R),s(Nn),s(x),s(Xn),s(O),s(Jn),s(z),s(ns),s(I),s(ss),s($),s(as),s(Q),s(ts),s(U),s(ps),s(Y),s(ls),s(G),s(cs),s(N),s(us),s(X),s(is),s(w),s(ks),s(Z),s(ds),s(J),s(ms),s(nn),s(ys),s(sn),s(vs),s(an),s(fs),s(C),s(xs),s(tn),s(Cs),s(en),s(gs),s(pn),s(_s),s(ln),s(Ts),s(on),s(hs),s(cn),s(Ps),s(un),s(Ms),s(g),s(bs),s(kn),s(Ws),s(rn),s(Ls),s(dn),s(Ss),s(mn),s(Ks),s(yn),s(Es),s(vn),s(As),s(_n),s(qs),s(fn),s(Vs),s(xn),s(Ds),s(_),s(Fs),s(wn),s(Bs),s(Cn),s(Rs),s(gn))}}}const vt={title:"new Flutter project의 main.dart 코드 파헤쳐보기(1)",description:"IDE를 이용해 만든 flutter project의 초기 main.dart 코드들을 보면서 StatelessWidget, StatefulWidget, key에 대해 알아봅니다.",author:"jack",date:"2024.09. 27.",published:!0,tags:["Dart","Flutter"]};class ft extends it{constructor(k){super(),kt(this,k,null,dt,ut,{})}}export{ft as default,vt as metadata};
