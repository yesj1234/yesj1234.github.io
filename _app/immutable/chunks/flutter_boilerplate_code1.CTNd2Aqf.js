import{s as ut,n as On}from"./scheduler.Bch89ZIZ.js";import{S as it,i as kt,e,s as l,H as r,c as p,g as c,f as o,j as i,k as d,d as n,a as u,l as t,b as rt}from"./index.WsbZAp97.js";function dt(Za){let k,zn='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#create-new-flutter-project">Create new flutter project</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#void-main">void main()</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#class-myapp-extends-statelesswidget">class MyApp extends StatelessWidget</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#statelesswidget">StatelessWidget</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#widget">Widget</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#key">Key</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#valuekey">ValueKey</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#localkey">LocalKey</a></li></ol></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#sources">Sources</a></li></ol>',Ts,m,In="Create new flutter project",hs,T,$n="Android studio와 같은 IDE를 이용해 새로운 flutter 프로젝트를 만들 경우 <code>lib</code> 폴더의 <code>main.dart</code> 파일 안에 자동으로 다음과 같은 코드가 작성되어 있는것을 확인 할 수 있습니다.",Ps,h,Ms,Ja=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
      title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Flutter Demo'</span></span><span class="token punctuation">,</span>
      theme<span class="token punctuation">:</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span>
        useMaterial3<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      home<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MyHomePage</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Flutter Demo Home Page'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">MyHomePage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token class-name">MyHomePage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyHomePage</span><span class="token punctuation">></span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_MyHomePageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> _MyHomePageState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyHomePage</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
  int _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">_incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	    _counter<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	  <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>
			backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">.</span>inversePrimary<span class="token punctuation">,</span>
            title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
	      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
		      mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">></span></span><span class="token punctuation">[</span>
            <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
              <span class="token string-literal"><span class="token string">'You have pushed the button this many times:'</span></span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Text</span><span class="token punctuation">(</span>
              <span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">_counter</span></span><span class="token string">'</span></span><span class="token punctuation">,</span>
              style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>headlineMedium<span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      floatingActionButton<span class="token punctuation">:</span> <span class="token class-name">FloatingActionButton</span><span class="token punctuation">(</span>
        onPressed<span class="token punctuation">:</span> _incrementCounter<span class="token punctuation">,</span>
        tooltip<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Increment'</span></span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,bs,P,Qn="(코드를 한 눈에 보기 위해 주석은 제거 했습니다.)",Hs,M,Un="처음 Flutter 프로젝트를 만들고 이 코드를 접했을 땐 생각보다 코드가 이해가 되지 않아 당황스러웠습니다.(<del>분명 Dart 문법은 어느 정도 익혔다고 생각했는데..</del>)",Ws,b,Yn="StatelessWidget이 뭐지? super.key는 또 뭐지? BuildContext는 또 무슨 타입이지? StatefulWidget은 StatelessWidget이랑 다르게 바로 build를 안하네? 와 같은 질문들이 꼬리에 꼬리를 물면서 생겨났습니다.",Ls,H,Gn="사실 위 코드가 이해되지 않는 이유는 Dart를 몰라서가 아니라 Flutter를 몰라서입니다.",Ss,W,Nn="코드를 한 줄 한 줄 따라가며 위의 코드가 어떤 의미인지 Flutter 소스코드를 보며 이해해보도록 합시다.",Ks,y,Xn="void main()",Es,L,Zn="모든 dart 프로그램은 main 함수를 갖습니다. 프로그램의 진입점 역할을 하는 함수입니다.",As,S,Jn="<code>runApp()</code> 함수는 Widget을 argument로 받아 화면에 해당 Widget 을 그려주는 역할을 하는 함수입니다.",js,K,sa="보통은 위처럼 어플리케이션의 최상단에서 컨테이너의 역할을 하는 Widget을 넣어줍니다.",qs,f,na="class MyApp extends StatelessWidget",Vs,E,aa="<strong>MyApp</strong> 클래스는 <strong>StatelessWidget</strong>을 상속받고 있습니다.",Ds,A,ta="<strong>StatelessWidget</strong>은 무슨 클래스일까요?",Fs,v,ea="StatelessWidget",Bs,j,Rs,st=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StatelessWidget</span> <span class="token keyword">extends</span> <span class="token class-name">Widget</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">StatelessElement</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">StatelessElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token metadata function">@protected</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Os,q,pa="<strong>StatelessWidget</strong>은 <strong>Widget</strong>을 상속 받고 있는 <strong>추상 클래스</strong>군요.",zs,V,la="따라서 일반적인 클래스처럼 인스턴스화 하여 사용하는 용도가 아니라 StatelessWidget을 상속받는 하위 클래스에서 body 없이 이름만 덩그러니 선언되어 있는 메서드들의 구체적인 구현을 해주겠구나 짐작이 가능하겠습니다.",Is,D,oa="현재 MyApp이 StatelessWidget을 상속받고 있고 <code>Widget build(BuildContext context)</code>를 overriding 하고 있는 것을 확인 할 수 있습니다.",$s,F,Qs,nt=`<code class="language-dart"><span class="token metadata function">@override</span>
<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// MarerialApp이라는 Widget을 return 하는군요.</span>
<span class="token punctuation">&#125;</span></code>`,Us,B,ca="<p><strong>Question</strong> : <code>createElement()</code> 메서드는 MyApp에서 override 하지 않는데 왜 그런거죠?</p> <p><strong>Answer</strong> : <code>createElement()</code> 메서드는 body가 있는 메서드입니다.</p> <p>특별한 경우가 아니라면 StatelessWidget을 상속받는 하위 클래스에서는 이 메서드를 따로 정의해주지 않는 것이 일반적입니다.</p> <p><code>createElement()</code> 메서드는 Widget(blueprint 역할)을 받아 실제 화면에 그려지는 <strong>Element</strong>를 반환해주는 함수입니다.</p>",Ys,R,ua="StatelessWidget이 어떤건지는 알겠으니 이제 <strong>Widget이</strong> 뭔지를 알아봐야겠군요.",Gs,x,ia="Widget",Ns,O,Xs,at=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token keyword">extends</span> <span class="token class-name">DiagnosticableTree</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">Widget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Initializes key for subclasses.</span>

	<span class="token keyword">final</span> <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">;</span>

	<span class="token metadata function">@protected</span>
	<span class="token metadata function">@factory</span>
	<span class="token class-name">Element</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token metadata function">@override</span>
	<span class="token class-name">String</span> <span class="token function">toStringShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">final</span> <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token function">objectRuntimeType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'Widget'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> type<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">type</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">key</span></span><span class="token string">'</span></span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token metadata function">@override</span>
	<span class="token keyword">void</span> <span class="token function">debugFillProperties</span><span class="token punctuation">(</span><span class="token class-name">DiagnosticPropertiesBuilder</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">debugFillProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
		properties<span class="token punctuation">.</span>defaultDiagnosticsTreeStyle <span class="token operator">=</span> <span class="token class-name">DiagnosticsTreeStyle</span><span class="token punctuation">.</span>dense<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token metadata function">@override</span>
	<span class="token metadata function">@nonVirtual</span>
	bool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">super</span> <span class="token operator">==</span> other<span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	<span class="token metadata function">@nonVirtual</span>
	int <span class="token keyword">get</span> hashCode <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">super</span><span class="token punctuation">.</span>hashCode<span class="token punctuation">;</span>

	<span class="token keyword">static</span> bool <span class="token function">canUpdate</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> oldWidget<span class="token punctuation">,</span> <span class="token class-name">Widget</span> newWidget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> oldWidget<span class="token punctuation">.</span>runtimeType <span class="token operator">==</span> newWidget<span class="token punctuation">.</span>runtimeType
			<span class="token operator">&amp;&amp;</span> oldWidget<span class="token punctuation">.</span>key <span class="token operator">==</span> newWidget<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">static</span> int <span class="token function">_debugConcreteSubtype</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> widget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> widget <span class="token operator">is</span> <span class="token class-name">StatefullWidget</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span>
			widget <span class="token operator">is</span> <span class="token class-name">StatelessWidget</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Zs,z,ka="(코드를 한 눈에 보기 위해 주석은 제거 했습니다.)",Js,I,ra="Widget은 DiagnosticableTree를 상속받고 있는 추상 클래스이군요..",sn,$,da="글이 너무 장황해지는 것 같아 DiagnosticableTree에 대해서는 설명하지 않도록 하겠습니다.(<del>기회가 된다면 다음에..</del>)",nn,Q,ma="그 다음 줄부터 보도록 하겠습니다.",an,U,tn,tt=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token keyword">extends</span> <span class="token class-name">DiagnosticableTree</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">Widget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">final</span> <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span></code>`,en,Y,ya=`<code>MyApp</code>과 <code>StatelessWidget</code>에서 super.key로 부르던 key가 Widget이 갖고 있던 variable이였군요.
constant constructor의 parameter로 들어가기 때문에 final로 선언되며 <strong>Key</strong>라는 타입을 갖는 것을 알 수 있습니다.`,pn,G,ln,et=`<code class="language-dart"><span class="token keyword">const</span> <span class="token class-name">Widget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 이 부분은 다음과 같은 의미를 갖는 코드입니다.</span>
<span class="token comment">// Redirecting to the parent class constructor with named parameter "key"</span>
<span class="token keyword">const</span> <span class="token class-name">Widget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span></code>`,on,N,fa="(물론 두번째 줄 처럼 사용할 경우 IDE가 노란줄로 경고를 줍니다만, 문법적으로 간략하게 되어 있는 부분에는 사실 위와 같은 의미가 있다는 점을 알고 가면 좋을 것 같습니다.)",cn,X,va="음.. <strong>Key</strong>는 또 뭐하는 녀석일까요?",un,w,xa="Key",kn,Z,rn,pt=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Key</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token keyword">factory</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">ValueKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>

	<span class="token metadata function">@protected</span>
	<span class="token keyword">const</span> <span class="token class-name">Key</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,dn,J,wa="Key는 constant factory constructor와 constant named constructor를 갖는 abstract class이군요.",mn,ss,Ca="factory Key constructor는 String 타입의 value를 받고 <strong>ValueKey</strong> 타입의 인스턴스를 반환합니다.",yn,ns,ga="factory constructor이기 때문에 아마 ValueKey 은 Key를 상속받는 sub class일 것으로 추측이 됩니다.",fn,as,_a="ValueKey가 뭔지를 봐야겠습니다.",vn,C,Ta="ValueKey",xn,ts,wn,lt=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ValueKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">LocalKey</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">ValueKey</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	bool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>runtimeType <span class="token operator">!=</span> runtimeType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> other <span class="token operator">is</span> <span class="token class-name">ValueKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token metadata function">@override</span>
	int <span class="token keyword">get</span> hashCode <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>runtimeType<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">final</span> <span class="token class-name">String</span> valueString <span class="token operator">=</span> <span class="token class-name">T</span> <span class="token operator">==</span> <span class="token class-name">String</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"&lt;'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">'>"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'&lt;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">>'</span></span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>runtimeType <span class="token operator">==</span> _TypeLiteral<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ValueKey</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token string-literal"><span class="token string">'[</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">valueString</span></span><span class="token string">]'</span></span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> <span class="token string-literal"><span class="token string">'[</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression"><span class="token class-name">T</span></span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">valueString</span></span><span class="token string">]'</span></span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Cn,es,ha="예상과는 다르게 Key를 바로 상속받지 않고 <strong>LocalKey</strong>를 상속받는 클래스입니다.",gn,ps,Pa="Generic type인 T를 받아 value에 저장합니다.",_n,ls,Ma="== 연산자를 오버라이딩하여 동등성 비교 로직을 커스텀하여 사용하고 있습니다. runtimeType이 같은지 우선 확인하고 만약 같은 runtimeType이라면 value가 같은지를 확인하여 두 인스턴스가 같은지를 확인하는 로직이군요.",Tn,os,ba="hashCode getter도 오버라이딩 하고 있습니다. runtimeType과 value가 같다면 hashCode가 같을것이라고 예상할 수 있습니다. == 연산자의 로직과 일맥상통합니다.",hn,cs,Ha="toString함수도 오버라이딩하여 print 함수를 호출했을 때 보여지는 모습도 커스텀해서 사용하고 있습니다.",Pn,us,Wa="ValueKey가 뭔지는 알았으니 <strong>LocalKe</strong>y가 뭔지를 확인해보면 전체적인 그림을 파악할 수 있을 것 같습니다.",Mn,g,La="LocalKey",bn,is,Hn,ot=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LocalKey</span> <span class="token keyword">extends</span> <span class="token class-name">Key</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">LocalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Wn,ks,Sa="LocalKey는 Key를 상속받는 또 다른 추상 클래스입니다.",Ln,rs,Ka="constant constructor 하나만 선언되어있고 Key의 “empty” named constructor로 리다이렉팅하고 있습니다.",Sn,ds,Ea="Key의 전체적인 상속관계는 다음과 같습니다.",Kn,ms,Aa='<img src="/key_hierarchy.jpg" alt="key_hierarchy"/>',En,ys,ja="<p><strong>Question</strong>:</p> <p>LocalKey는 굳이 왜 필요한가요? 그냥 바로 ValueKey에서 Key를 상속받아서 사용하면 안되나요?</p> <p><strong>Answer</strong>:</p> <p>정답은 안된다 입니다.</p> <p>클래스들간의 상속관계를 지키면서 factory constructor와 constant constructor를 동시에 사용하기 위해서는 LocalKey와 같은 클래스가 반드시 필요합니다.</p> <p>factory constructor는 const로 선언될 수 없기 때문에 Key를 상속받는 하위 클래스들에서 constant constructor를 사용하기 위해서는 중간에 constant constructor를 갖는 LocalKey와 같은 클래스가 매개해주어야 합니다.</p> <p>만약 LocalKey없이 바로 상속받아 사용한다면 다음과 같은 에러를 볼 수 있습니다.</p>",An,gs,_s,jn,ct=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Key</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">factory</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ValueKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Key</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//The generative constructor 'Key Key(String value)' is expected, but a factory was found.</span>
  <span class="token keyword">const</span> <span class="token class-name">ValueKey</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This is not allowed.</span>

  <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span></code>`,qn,fs,qa="Widget이 fianl variable로 갖고 있던 key에 대해 어느정도 파악한 것 같습니다.",Vn,vs,Va="이제 다시 Widget으로 돌아와서.. 다음 글로 이어집니다!",Dn,_,Da="Sources",Fn,xs,Fa='<a href="https://www.youtube.com/watch?v=wE7khGHVkYY" rel="nofollow">Flutter Widgets 101 EP.1</a>',Bn,ws,Ba='<a href="https://www.youtube.com/watch?v=AqCMFXEmf3w" rel="nofollow">Flutter Widget 101 EP.2</a>',Rn,Cs,Ra='<a href="https://www.youtube.com/watch?v=kn0EOS-ZiIc&amp;t=300s" rel="nofollow">Flutter Widget 101 EP.4</a>';return{c(){k=e("nav"),k.innerHTML=zn,Ts=l(),m=e("h1"),m.textContent=In,hs=l(),T=e("p"),T.innerHTML=$n,Ps=l(),h=e("pre"),Ms=new r(!1),bs=l(),P=e("p"),P.textContent=Qn,Hs=l(),M=e("p"),M.innerHTML=Un,Ws=l(),b=e("p"),b.textContent=Yn,Ls=l(),H=e("p"),H.textContent=Gn,Ss=l(),W=e("p"),W.textContent=Nn,Ks=l(),y=e("h1"),y.textContent=Xn,Es=l(),L=e("p"),L.textContent=Zn,As=l(),S=e("p"),S.innerHTML=Jn,js=l(),K=e("p"),K.textContent=sa,qs=l(),f=e("h1"),f.textContent=na,Vs=l(),E=e("p"),E.innerHTML=aa,Ds=l(),A=e("p"),A.innerHTML=ta,Fs=l(),v=e("h2"),v.textContent=ea,Bs=l(),j=e("pre"),Rs=new r(!1),Os=l(),q=e("p"),q.innerHTML=pa,zs=l(),V=e("p"),V.textContent=la,Is=l(),D=e("p"),D.innerHTML=oa,$s=l(),F=e("pre"),Qs=new r(!1),Us=l(),B=e("blockquote"),B.innerHTML=ca,Ys=l(),R=e("p"),R.innerHTML=ua,Gs=l(),x=e("h3"),x.textContent=ia,Ns=l(),O=e("pre"),Xs=new r(!1),Zs=l(),z=e("p"),z.textContent=ka,Js=l(),I=e("p"),I.textContent=ra,sn=l(),$=e("p"),$.innerHTML=da,nn=l(),Q=e("p"),Q.textContent=ma,an=l(),U=e("pre"),tn=new r(!1),en=l(),Y=e("p"),Y.innerHTML=ya,pn=l(),G=e("pre"),ln=new r(!1),on=l(),N=e("p"),N.textContent=fa,cn=l(),X=e("p"),X.innerHTML=va,un=l(),w=e("h2"),w.textContent=xa,kn=l(),Z=e("pre"),rn=new r(!1),dn=l(),J=e("p"),J.textContent=wa,mn=l(),ss=e("p"),ss.innerHTML=Ca,yn=l(),ns=e("p"),ns.textContent=ga,fn=l(),as=e("p"),as.textContent=_a,vn=l(),C=e("h3"),C.textContent=Ta,xn=l(),ts=e("pre"),wn=new r(!1),Cn=l(),es=e("p"),es.innerHTML=ha,gn=l(),ps=e("p"),ps.textContent=Pa,_n=l(),ls=e("p"),ls.textContent=Ma,Tn=l(),os=e("p"),os.textContent=ba,hn=l(),cs=e("p"),cs.textContent=Ha,Pn=l(),us=e("p"),us.innerHTML=Wa,Mn=l(),g=e("h3"),g.textContent=La,bn=l(),is=e("pre"),Hn=new r(!1),Wn=l(),ks=e("p"),ks.textContent=Sa,Ln=l(),rs=e("p"),rs.textContent=Ka,Sn=l(),ds=e("p"),ds.textContent=Ea,Kn=l(),ms=e("p"),ms.innerHTML=Aa,En=l(),ys=e("blockquote"),ys.innerHTML=ja,An=l(),gs=e("blockquote"),_s=e("pre"),jn=new r(!1),qn=l(),fs=e("p"),fs.textContent=qa,Vn=l(),vs=e("p"),vs.textContent=Va,Dn=l(),_=e("h1"),_.textContent=Da,Fn=l(),xs=e("p"),xs.innerHTML=Fa,Bn=l(),ws=e("p"),ws.innerHTML=Ba,Rn=l(),Cs=e("p"),Cs.innerHTML=Ra,this.h()},l(s){k=p(s,"NAV",{class:!0,"data-svelte-h":!0}),c(k)!=="svelte-1l7aarz"&&(k.innerHTML=zn),Ts=o(s),m=p(s,"H1",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-1x4hn8p"&&(m.textContent=In),hs=o(s),T=p(s,"P",{"data-svelte-h":!0}),c(T)!=="svelte-1srqwel"&&(T.innerHTML=$n),Ps=o(s),h=p(s,"PRE",{class:!0});var a=i(h);Ms=d(a,!1),a.forEach(n),bs=o(s),P=p(s,"P",{"data-svelte-h":!0}),c(P)!=="svelte-trupl7"&&(P.textContent=Qn),Hs=o(s),M=p(s,"P",{"data-svelte-h":!0}),c(M)!=="svelte-pc2q68"&&(M.innerHTML=Un),Ws=o(s),b=p(s,"P",{"data-svelte-h":!0}),c(b)!=="svelte-fsxuy6"&&(b.textContent=Yn),Ls=o(s),H=p(s,"P",{"data-svelte-h":!0}),c(H)!=="svelte-11eo5d4"&&(H.textContent=Gn),Ss=o(s),W=p(s,"P",{"data-svelte-h":!0}),c(W)!=="svelte-93qsc0"&&(W.textContent=Nn),Ks=o(s),y=p(s,"H1",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-15d0zms"&&(y.textContent=Xn),Es=o(s),L=p(s,"P",{"data-svelte-h":!0}),c(L)!=="svelte-jv78i"&&(L.textContent=Zn),As=o(s),S=p(s,"P",{"data-svelte-h":!0}),c(S)!=="svelte-7ck2v3"&&(S.innerHTML=Jn),js=o(s),K=p(s,"P",{"data-svelte-h":!0}),c(K)!=="svelte-4vlabf"&&(K.textContent=sa),qs=o(s),f=p(s,"H1",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-l5y447"&&(f.textContent=na),Vs=o(s),E=p(s,"P",{"data-svelte-h":!0}),c(E)!=="svelte-1mxtmj3"&&(E.innerHTML=aa),Ds=o(s),A=p(s,"P",{"data-svelte-h":!0}),c(A)!=="svelte-28xqwy"&&(A.innerHTML=ta),Fs=o(s),v=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-uqwpvy"&&(v.textContent=ea),Bs=o(s),j=p(s,"PRE",{class:!0});var Oa=i(j);Rs=d(Oa,!1),Oa.forEach(n),Os=o(s),q=p(s,"P",{"data-svelte-h":!0}),c(q)!=="svelte-1pbntzl"&&(q.innerHTML=pa),zs=o(s),V=p(s,"P",{"data-svelte-h":!0}),c(V)!=="svelte-t2vi5t"&&(V.textContent=la),Is=o(s),D=p(s,"P",{"data-svelte-h":!0}),c(D)!=="svelte-1l4skye"&&(D.innerHTML=oa),$s=o(s),F=p(s,"PRE",{class:!0});var za=i(F);Qs=d(za,!1),za.forEach(n),Us=o(s),B=p(s,"BLOCKQUOTE",{"data-svelte-h":!0}),c(B)!=="svelte-e6yoey"&&(B.innerHTML=ca),Ys=o(s),R=p(s,"P",{"data-svelte-h":!0}),c(R)!=="svelte-12ioowd"&&(R.innerHTML=ua),Gs=o(s),x=p(s,"H3",{id:!0,"data-svelte-h":!0}),c(x)!=="svelte-15zwjkc"&&(x.textContent=ia),Ns=o(s),O=p(s,"PRE",{class:!0});var Ia=i(O);Xs=d(Ia,!1),Ia.forEach(n),Zs=o(s),z=p(s,"P",{"data-svelte-h":!0}),c(z)!=="svelte-trupl7"&&(z.textContent=ka),Js=o(s),I=p(s,"P",{"data-svelte-h":!0}),c(I)!=="svelte-1gsgh4v"&&(I.textContent=ra),sn=o(s),$=p(s,"P",{"data-svelte-h":!0}),c($)!=="svelte-1phws24"&&($.innerHTML=da),nn=o(s),Q=p(s,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-111ipki"&&(Q.textContent=ma),an=o(s),U=p(s,"PRE",{class:!0});var $a=i(U);tn=d($a,!1),$a.forEach(n),en=o(s),Y=p(s,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-9hz7h2"&&(Y.innerHTML=ya),pn=o(s),G=p(s,"PRE",{class:!0});var Qa=i(G);ln=d(Qa,!1),Qa.forEach(n),on=o(s),N=p(s,"P",{"data-svelte-h":!0}),c(N)!=="svelte-1r6uglr"&&(N.textContent=fa),cn=o(s),X=p(s,"P",{"data-svelte-h":!0}),c(X)!=="svelte-fx7ytc"&&(X.innerHTML=va),un=o(s),w=p(s,"H2",{id:!0,"data-svelte-h":!0}),c(w)!=="svelte-3ll8jc"&&(w.textContent=xa),kn=o(s),Z=p(s,"PRE",{class:!0});var Ua=i(Z);rn=d(Ua,!1),Ua.forEach(n),dn=o(s),J=p(s,"P",{"data-svelte-h":!0}),c(J)!=="svelte-1ska9pq"&&(J.textContent=wa),mn=o(s),ss=p(s,"P",{"data-svelte-h":!0}),c(ss)!=="svelte-10gh58y"&&(ss.innerHTML=Ca),yn=o(s),ns=p(s,"P",{"data-svelte-h":!0}),c(ns)!=="svelte-1kl74ex"&&(ns.textContent=ga),fn=o(s),as=p(s,"P",{"data-svelte-h":!0}),c(as)!=="svelte-ul3i4r"&&(as.textContent=_a),vn=o(s),C=p(s,"H3",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-jee69g"&&(C.textContent=Ta),xn=o(s),ts=p(s,"PRE",{class:!0});var Ya=i(ts);wn=d(Ya,!1),Ya.forEach(n),Cn=o(s),es=p(s,"P",{"data-svelte-h":!0}),c(es)!=="svelte-df33h8"&&(es.innerHTML=ha),gn=o(s),ps=p(s,"P",{"data-svelte-h":!0}),c(ps)!=="svelte-100c8mj"&&(ps.textContent=Pa),_n=o(s),ls=p(s,"P",{"data-svelte-h":!0}),c(ls)!=="svelte-u1c6i9"&&(ls.textContent=Ma),Tn=o(s),os=p(s,"P",{"data-svelte-h":!0}),c(os)!=="svelte-azjr4m"&&(os.textContent=ba),hn=o(s),cs=p(s,"P",{"data-svelte-h":!0}),c(cs)!=="svelte-1dy3usl"&&(cs.textContent=Ha),Pn=o(s),us=p(s,"P",{"data-svelte-h":!0}),c(us)!=="svelte-19zh6k5"&&(us.innerHTML=Wa),Mn=o(s),g=p(s,"H3",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-6s7ibg"&&(g.textContent=La),bn=o(s),is=p(s,"PRE",{class:!0});var Ga=i(is);Hn=d(Ga,!1),Ga.forEach(n),Wn=o(s),ks=p(s,"P",{"data-svelte-h":!0}),c(ks)!=="svelte-gm67y0"&&(ks.textContent=Sa),Ln=o(s),rs=p(s,"P",{"data-svelte-h":!0}),c(rs)!=="svelte-fq275x"&&(rs.textContent=Ka),Sn=o(s),ds=p(s,"P",{"data-svelte-h":!0}),c(ds)!=="svelte-ernrc0"&&(ds.textContent=Ea),Kn=o(s),ms=p(s,"P",{"data-svelte-h":!0}),c(ms)!=="svelte-1spiwiu"&&(ms.innerHTML=Aa),En=o(s),ys=p(s,"BLOCKQUOTE",{"data-svelte-h":!0}),c(ys)!=="svelte-asugjd"&&(ys.innerHTML=ja),An=o(s),gs=p(s,"BLOCKQUOTE",{});var Na=i(gs);_s=p(Na,"PRE",{class:!0});var Xa=i(_s);jn=d(Xa,!1),Xa.forEach(n),Na.forEach(n),qn=o(s),fs=p(s,"P",{"data-svelte-h":!0}),c(fs)!=="svelte-1c13b2k"&&(fs.textContent=qa),Vn=o(s),vs=p(s,"P",{"data-svelte-h":!0}),c(vs)!=="svelte-16spfsm"&&(vs.textContent=Va),Dn=o(s),_=p(s,"H1",{id:!0,"data-svelte-h":!0}),c(_)!=="svelte-22jvrw"&&(_.textContent=Da),Fn=o(s),xs=p(s,"P",{"data-svelte-h":!0}),c(xs)!=="svelte-16na6ru"&&(xs.innerHTML=Fa),Bn=o(s),ws=p(s,"P",{"data-svelte-h":!0}),c(ws)!=="svelte-56ew44"&&(ws.innerHTML=Ba),Rn=o(s),Cs=p(s,"P",{"data-svelte-h":!0}),c(Cs)!=="svelte-1nql4lr"&&(Cs.innerHTML=Ra),this.h()},h(){u(k,"class","toc"),u(m,"id","create-new-flutter-project"),Ms.a=null,u(h,"class","language-dart"),u(y,"id","void-main"),u(f,"id","class-myapp-extends-statelesswidget"),u(v,"id","statelesswidget"),Rs.a=null,u(j,"class","language-dart"),Qs.a=null,u(F,"class","language-dart"),u(x,"id","widget"),Xs.a=null,u(O,"class","language-dart"),tn.a=null,u(U,"class","language-dart"),ln.a=null,u(G,"class","language-dart"),u(w,"id","key"),rn.a=null,u(Z,"class","language-dart"),u(C,"id","valuekey"),wn.a=null,u(ts,"class","language-dart"),u(g,"id","localkey"),Hn.a=null,u(is,"class","language-dart"),jn.a=null,u(_s,"class","language-dart"),u(_,"id","sources")},m(s,a){t(s,k,a),t(s,Ts,a),t(s,m,a),t(s,hs,a),t(s,T,a),t(s,Ps,a),t(s,h,a),Ms.m(Ja,h),t(s,bs,a),t(s,P,a),t(s,Hs,a),t(s,M,a),t(s,Ws,a),t(s,b,a),t(s,Ls,a),t(s,H,a),t(s,Ss,a),t(s,W,a),t(s,Ks,a),t(s,y,a),t(s,Es,a),t(s,L,a),t(s,As,a),t(s,S,a),t(s,js,a),t(s,K,a),t(s,qs,a),t(s,f,a),t(s,Vs,a),t(s,E,a),t(s,Ds,a),t(s,A,a),t(s,Fs,a),t(s,v,a),t(s,Bs,a),t(s,j,a),Rs.m(st,j),t(s,Os,a),t(s,q,a),t(s,zs,a),t(s,V,a),t(s,Is,a),t(s,D,a),t(s,$s,a),t(s,F,a),Qs.m(nt,F),t(s,Us,a),t(s,B,a),t(s,Ys,a),t(s,R,a),t(s,Gs,a),t(s,x,a),t(s,Ns,a),t(s,O,a),Xs.m(at,O),t(s,Zs,a),t(s,z,a),t(s,Js,a),t(s,I,a),t(s,sn,a),t(s,$,a),t(s,nn,a),t(s,Q,a),t(s,an,a),t(s,U,a),tn.m(tt,U),t(s,en,a),t(s,Y,a),t(s,pn,a),t(s,G,a),ln.m(et,G),t(s,on,a),t(s,N,a),t(s,cn,a),t(s,X,a),t(s,un,a),t(s,w,a),t(s,kn,a),t(s,Z,a),rn.m(pt,Z),t(s,dn,a),t(s,J,a),t(s,mn,a),t(s,ss,a),t(s,yn,a),t(s,ns,a),t(s,fn,a),t(s,as,a),t(s,vn,a),t(s,C,a),t(s,xn,a),t(s,ts,a),wn.m(lt,ts),t(s,Cn,a),t(s,es,a),t(s,gn,a),t(s,ps,a),t(s,_n,a),t(s,ls,a),t(s,Tn,a),t(s,os,a),t(s,hn,a),t(s,cs,a),t(s,Pn,a),t(s,us,a),t(s,Mn,a),t(s,g,a),t(s,bn,a),t(s,is,a),Hn.m(ot,is),t(s,Wn,a),t(s,ks,a),t(s,Ln,a),t(s,rs,a),t(s,Sn,a),t(s,ds,a),t(s,Kn,a),t(s,ms,a),t(s,En,a),t(s,ys,a),t(s,An,a),t(s,gs,a),rt(gs,_s),jn.m(ct,_s),t(s,qn,a),t(s,fs,a),t(s,Vn,a),t(s,vs,a),t(s,Dn,a),t(s,_,a),t(s,Fn,a),t(s,xs,a),t(s,Bn,a),t(s,ws,a),t(s,Rn,a),t(s,Cs,a)},p:On,i:On,o:On,d(s){s&&(n(k),n(Ts),n(m),n(hs),n(T),n(Ps),n(h),n(bs),n(P),n(Hs),n(M),n(Ws),n(b),n(Ls),n(H),n(Ss),n(W),n(Ks),n(y),n(Es),n(L),n(As),n(S),n(js),n(K),n(qs),n(f),n(Vs),n(E),n(Ds),n(A),n(Fs),n(v),n(Bs),n(j),n(Os),n(q),n(zs),n(V),n(Is),n(D),n($s),n(F),n(Us),n(B),n(Ys),n(R),n(Gs),n(x),n(Ns),n(O),n(Zs),n(z),n(Js),n(I),n(sn),n($),n(nn),n(Q),n(an),n(U),n(en),n(Y),n(pn),n(G),n(on),n(N),n(cn),n(X),n(un),n(w),n(kn),n(Z),n(dn),n(J),n(mn),n(ss),n(yn),n(ns),n(fn),n(as),n(vn),n(C),n(xn),n(ts),n(Cn),n(es),n(gn),n(ps),n(_n),n(ls),n(Tn),n(os),n(hn),n(cs),n(Pn),n(us),n(Mn),n(g),n(bn),n(is),n(Wn),n(ks),n(Ln),n(rs),n(Sn),n(ds),n(Kn),n(ms),n(En),n(ys),n(An),n(gs),n(qn),n(fs),n(Vn),n(vs),n(Dn),n(_),n(Fn),n(xs),n(Bn),n(ws),n(Rn),n(Cs))}}}const ft={title:"new Flutter project의 main.dart 코드 파헤쳐보기(1)",description:"IDE를 이용해 만든 flutter project의 초기 main.dart 코드들을 보면서 StatelessWidget, StatefulWidget, key에 대해 알아봅니다.",author:"jack",date:"2024.09. 27.",published:!0,tags:["Dart","Flutter"]};class vt extends it{constructor(k){super(),kt(this,k,null,dt,ut,{})}}export{vt as default,ft as metadata};
