import{s as Dt,n as Hs}from"./scheduler.B-IchvsE.js";import{S as Bt,i as jt,e,s as l,H as Ts,c as p,g as c,f as o,j as bs,k as Ls,d as s,a as i,l as a}from"./index.BXAsoQ_g.js";function Rt(St){let u,Is='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#union-types">Union types</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#type-systems">Type systems</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#nominal-types">Nominal types</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#shaped-based-types">Shaped based types</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#tagged-union-types">Tagged Union types</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#untagged-union-types">Untagged union types</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#dart-support-for-union-types">Dart support for Union types</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#futureorlttgt">FutureOr&lt;T&gt;</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#nullable-types">Nullable types</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#sealed-class-modifier---tagged-union-types">Sealed class modifier - Tagged union types</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#package---either">package - Either</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#package---extension-type-unions">package - Extension type unions</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#refactoring-example">Refactoring example</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#source">Source</a></li></ol>',vn,k,Ms="Union types",fn,b,Us="개인 프로젝트를 개발하는 와중에 Union type을 사용하고 싶은 경우가 있었습니다.",xn,L,Ps="상황은 다음과 같았습니다.",gn,H,Ss="<li>포스트는 이미지 파일, 제목, 내용을 포함할 수 있습니다.</li> <li>이미지는 image picker 패키지를 통해 사진첩에서 <strong>XFile</strong> 타입으로 가져올 수 있으며 Image.File 위젯을 사용하여 보여줍니다.</li> <li>이미지를 포스트에 포함하여 저장할 경우에는 firestorage에 이미지 파일을 저장하고 download url을 받아 데이터베이스 해당 <strong>url을 String으로 저장</strong>합니다.</li> <li>이미지를 포함하는 기존의 포스트를 수정할 경우에는 원본 내용을 보여줘야 합니다. 이 경우 이미지는 download url을 string으로 받아서 Image.network 위젯을 통해 보여줍니다.</li> <li>만약 새로운 사진을 추가할 경우 이미지를 보여주는 위젯은 이제 <strong>download url(String)</strong> 과 <strong>XFile</strong> 두가지 타입을 동시에 처리할 수 있어야 합니다.</li>",Cn,I,Fs="따라서 String, XFile 두 가지 타입을 받기 위해 dynamic 타입으로 받아와서 타입이 String일 경우에는 Image.network위젯을, XFile일 경우에는 Image.file을 사용하도록 했습니다.",hn,M,Es="위와 같은 방식은 코드를 짜기 편리하다는 장점이 있지만 단점 또한 적지 않습니다.",wn,U,Os="단점은 다음과 같습니다.",_n,P,qs="<li>개발자가 직접 타입을 일일이 확인해서 해당 타입에 맞게 분기를 처리해주어야 하기 때문에 실수가 발생하기 쉽습니다(만약 타입이 여러개일 경우 미처 확인하지 못하고 지나가는 타입이 있는 경우 등).</li> <li>컴파일러가 타입을 인식하지 못하기 때문에 IDE의 자동완성기능과 같은 compile 언어의 장점을 제대로 활용할 수 없습니다.</li> <li>또한 String이나 XFile 타입이 아니라 다른 타입이 들어올 경우에는 runtime error가 발생할 수 있습니다.</li>",Tn,S,Ds="이런 단점들을 해결해보고자 Dart에서 union type을 다루는 방식에 대해 알아보고자 합니다.",bn,r,Bs="Type systems",Ln,F,js="Union type을 알아보기 전에 type에 대한 몇 가지 개념들에 대해 보고 가도록 합시다.",Hn,E,Rs="개발 언어마다 type을 다루는 방식이 상이합니다.",In,O,Xs="예를 들어 typescript는 <strong>shape based typ</strong>e을 사용하고 java는 <strong>nominal type</strong>을 사용합니다.",Mn,q,zs="shape based type과 nominal type은 <strong>타입간의 호환성</strong>(Type Compatibility), <strong>유연성</strong>(Flexibility), <strong>에러를 처리하는 방식</strong>에 차이가 있습니다.",Un,d,Ws="Nominal types",Pn,D,Ns="<strong>Nominal type</strong> 은…",Sn,B,Vs="<li>선언된 타입의 <strong>이름</strong> 혹은 <strong>identity</strong>에 기반합니다.</li> <li>타입의 <strong>이름 혹은 선언이 같은 경우</strong>에 두 가지 타입이 <strong>호환</strong>됩니다.</li> <li>상속(Inheritance)이나 서브 타이핑(subtyping) <strong>관계는 명시적으로 선언</strong>되어야 합니다.</li> <li>Java, C++, C#과 같은 언어가 nominal type을 사용합니다.</li>",Fn,m,As="Shaped based types",En,j,Gs="<strong>Shaped based type</strong>은…",On,R,Ks="<li>타입의 이름이나 선언이 아닌 <strong>구조 / 모양(properties, method)</strong>으로 타입을 결정합니다.</li> <li>만약 이름이 서로 다른 두 타입이 <strong>같은 구조를 갖고 있다면 같은 타입</strong>으로 간주합니다.</li> <li>typescript, Go, OCaml 언어가 shaped based type을 사용합니다.</li> <li>python과 같은 동적인 언어에서는 duck typing(“If it looks like a duck and quacks like a duck, it’s a duck.“) 이라고도 합니다.</li>",qn,X,Qs="예시 코드",Dn,z,Bn,Ft=`<code class="language-typescript"><span class="token comment">// Shaped based types</span>
<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
	id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>
	id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">printId</span><span class="token punctuation">(</span>entity<span class="token operator">:</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">ID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>entity<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> user<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'u123'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Alice'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> order<span class="token operator">:</span> Order <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'o456'</span><span class="token punctuation">,</span> total<span class="token operator">:</span> <span class="token number">99.99</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">printId</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span>
<span class="token function">printId</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span></code>`,jn,W,$s="위처럼 typescript와 같은 Shape base type 시스템에서는 User 든 Order든 String 타입의 id를 갖고 있기 때문에 printId 함수를 실행시키는데 문제가 없습니다.",Rn,N,Xn,Et=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">UserId</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

  <span class="token class-name">UserId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">OrderId</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

  <span class="token class-name">OrderId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">String</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">UserId</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">'User with ID: </span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">id<span class="token punctuation">.</span>value</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">String</span> <span class="token function">getOrderById</span><span class="token punctuation">(</span><span class="token class-name">OrderId</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">'Order with ID: </span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">id<span class="token punctuation">.</span>value</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> userId <span class="token operator">=</span> <span class="token class-name">UserId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'u123'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> orderId <span class="token operator">=</span> <span class="token class-name">OrderId</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'o456'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span>
  <span class="token comment">// print(getUserById(orderId)); // Compile-time error</span>
<span class="token punctuation">&#125;</span></code>`,zn,V,Js="하지만 Dart와 같은 Nominal type 시스템에서는 UserId와 OrderId가 명확하게 다른 타입이기 때문에 컴파일 에러가 납니다.",Wn,y,Ys="Tagged Union types",Nn,A,Zs=`Tagged union types 은 sum types, discriminated unions, 혹은 variant types 같은 이름으로도 불립니다.
이름에서 알 수 있듯이 tagged union type은 각각의 타입들이 다른 타입과는 구별되는 이름 혹은 식별자를 갖고 있기 때문에 더 안전하고 쉽게 사용할 수 있다는 장점이 있습니다.`,Vn,v,nt="Untagged union types",An,G,st=`Untagged union type은 타입간의 구별을 위한 명시적인 이름이나 식별자가 없는 타입입니다.
따라서 하나의 객체가 여러가지의 타입을 가질 수 있게되지만 타입간의 상속관계를 정의할 수 없기 때문에 runtime에서 타입을 식별할 수 없습니다.
즉 개발자가 runtime에서 타입을 식별하기 위한 코드를 직접 작성해주어야 합니다.`,Gn,f,tt="Dart support for Union types",Kn,K,at="Dart는 typescript의 <code>|</code> 와 같이 Union type을 사용하기 위한 문법은 없긴하지만 Union type을 아예 배제하고 있진 않습니다.",Qn,Q,et="Dart는 특정 상황에서 필요한 몇 가지 union type을 정의해놨습니다.",$n,x,pt="<code>FutureOr&lt;T&gt;</code>",Jn,$,lt="<p>A type representing values that are either Future of type T or T.</p> <p>This class declaration is a public stand-in for an internal future - or - value generic type, which is not a class type. References to this class are resolved to the internal type.</p> <p>It is a compile-time error for any class to extend, mix in or implement FutureOr.</p>",Yn,J,ot="<code>Future&lt;T&gt;</code> 혹은 <code>&lt;T&gt;</code> 타입입니다.",Zn,g,ct="Nullable types",ns,Y,it="<code>T</code> 혹은 <code>null</code> 타입입니다.",ss,C,ut="Sealed class modifier - Tagged union types",ts,Z,kt="<strong>sealed modifier</strong>",as,nn,rt="sealed modifier는 이산적(enumerable)이고 다른 타입과는 구별되는(known) <strong>서브타입들의 집합</strong>을 만들기 위해 사용됩니다.",es,sn,dt="sealed modifier로 정의된 클래스는 switch문과 함께 사용할 때 enum을 사용하는 것처럼 <strong>exhaustive checking</strong>을 보장해줍니다.",ps,tn,mt="sealed class는 다음과 같은 성격을 갖습니다.",ls,an,yt="<li>내부적으로 <strong>abstract</strong>이기 때문에 직접 instance화 하여 사용할 수 없습니다.</li> <li>factory constructor를 가질 수 있습니다.</li> <li>subclass들이 사용할 constructor를 정의할 수 있습니다.</li> <li>library외부에서 sealed class를 상속(extend 혹은 implement) 할 수 없습니다.</li>",os,en,vt="이처럼 sealed class는 library내부에서만 사용할 수 있기 때문에 compiler가 해당 클래스의 서브 클래스들을 모두 정확하게 파악할 수 있습니다.",cs,pn,ft="따라서 compile 타임에서 switch를 통한 exhaustive checking 기능을 사용할 수 있는 것입니다.",is,h,xt="package - Either",us,ln,gt=`<p>The library for error handling and railway oriented programming.
This library supports async “map” and async “then” hiding the boilerplate of working with asynchronous computations Future[Either].</p>`,ks,on,Ct='Source: <a href="https://pub.dev/packages/either_dart" rel="nofollow">https://pub.dev/packages/either_dart</a>',rs,w,ht="package - Extension type unions",ds,cn,wt='<p>Support for union types in Dart has been requested at least <a href="https://github.com/dart-lang/language/issues/1222" rel="nofollow">since 2012</a>. This repository provides a basic level of support for union types in Dart.</p>',ms,un,_t='Source: <a href="https://pub.dev/packages/extension_type_unions" rel="nofollow">https://pub.dev/packages/extension_type_unions</a>',ys,_,Tt="Refactoring example",vs,kn,fs,Ot=`<code class="language-dart"><span class="token comment">/// BEFORE</span>
<span class="token comment">/// images are of type List&lt;dynamic></span>
<span class="token keyword">class</span> <span class="token class-name">PreviousFormState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PreviousForm</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> images<span class="token punctuation">;</span>

	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token class-name">Form</span><span class="token punctuation">(</span>
			child<span class="token punctuation">:</span> <span class="token class-name">ImageWidgetLayout</span><span class="token punctuation">(</span>
				images<span class="token punctuation">:</span> images <span class="token operator">as</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/// AFTER</span>
<span class="token comment">/// To utilize the sealed class to represent union types,</span>
<span class="token comment">/// define ImageType and let UrlImage and XFileImage inherit ImageType</span>
<span class="token comment">/// so that the compiler can check if all the type is checked within switch syntax</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:image_picker/image_picker.dart'</span></span><span class="token punctuation">;</span>

sealed <span class="token keyword">class</span> <span class="token class-name">ImageType</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">UrlImage</span> <span class="token keyword">extends</span> <span class="token class-name">ImageType</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">UrlImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">XFileImage</span> <span class="token keyword">extends</span> <span class="token class-name">ImageType</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">XFileImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">XFile</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code>`,xs,rn,gs,qt=`<code class="language-dart"><span class="token comment">/// BEFORE</span>
<span class="token comment">///</span>
<span class="token keyword">class</span> <span class="token class-name">ImageWidgetLayout</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">ImageWidgetLayout</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>images<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> images<span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
			gridDelegate<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
			itemCount<span class="token punctuation">:</span> images<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
			itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>images<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>runtimetype <span class="token operator">==</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span> <span class="token class-name">URLImageTile</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> images<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span> <span class="token class-name">XFileImageTile</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> images<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>

			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// AFTER</span>
<span class="token keyword">class</span> <span class="token class-name">ImageWidgetLayout</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">ImageWidgetLayout</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>images<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageType</span><span class="token punctuation">></span></span> images<span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
			gridDelegate<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
			itemCount<span class="token punctuation">:</span> images<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
			itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">switch</span> <span class="token punctuation">(</span>images<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">case</span> <span class="token class-name">UrlImage</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token keyword">final</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
						<span class="token keyword">return</span> <span class="token class-name">UrlImageTile</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">case</span> <span class="token class-name">XFileImage</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token keyword">final</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
						<span class="token keyword">return</span> <span class="token class-name">XFileImageTile</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">case</span> <span class="token class-name">Null</span><span class="token punctuation">:</span>
						<span class="token keyword">throw</span> <span class="token class-name">UnimplementedError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>

			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Cs,T,bt="Source",hs,dn,Lt='<a href="https://dcm.dev/blog/2024/12/10/demystifying-union-types-dart-tagged-untagged/" rel="nofollow">https://dcm.dev/blog/2024/12/10/demystifying-union-types-dart-tagged-untagged/</a>',ws,mn,Ht='<a href="https://pub.dev/packages/either_dart" rel="nofollow">https://pub.dev/packages/either_dart</a>',_s,yn,It='<a href="https://pub.dev/packages/extension_type_unions" rel="nofollow">https://pub.dev/packages/extension_type_unions</a>';return{c(){u=e("nav"),u.innerHTML=Is,vn=l(),k=e("h1"),k.textContent=Ms,fn=l(),b=e("p"),b.textContent=Us,xn=l(),L=e("p"),L.textContent=Ps,gn=l(),H=e("ol"),H.innerHTML=Ss,Cn=l(),I=e("p"),I.textContent=Fs,hn=l(),M=e("p"),M.textContent=Es,wn=l(),U=e("p"),U.textContent=Os,_n=l(),P=e("ul"),P.innerHTML=qs,Tn=l(),S=e("p"),S.textContent=Ds,bn=l(),r=e("h1"),r.textContent=Bs,Ln=l(),F=e("p"),F.textContent=js,Hn=l(),E=e("p"),E.textContent=Rs,In=l(),O=e("p"),O.innerHTML=Xs,Mn=l(),q=e("p"),q.innerHTML=zs,Un=l(),d=e("h2"),d.textContent=Ws,Pn=l(),D=e("p"),D.innerHTML=Ns,Sn=l(),B=e("ul"),B.innerHTML=Vs,Fn=l(),m=e("h2"),m.textContent=As,En=l(),j=e("p"),j.innerHTML=Gs,On=l(),R=e("ul"),R.innerHTML=Ks,qn=l(),X=e("p"),X.textContent=Qs,Dn=l(),z=e("pre"),Bn=new Ts(!1),jn=l(),W=e("p"),W.textContent=$s,Rn=l(),N=e("pre"),Xn=new Ts(!1),zn=l(),V=e("p"),V.textContent=Js,Wn=l(),y=e("h2"),y.textContent=Ys,Nn=l(),A=e("p"),A.textContent=Zs,Vn=l(),v=e("h2"),v.textContent=nt,An=l(),G=e("p"),G.textContent=st,Gn=l(),f=e("h1"),f.textContent=tt,Kn=l(),K=e("p"),K.innerHTML=at,Qn=l(),Q=e("p"),Q.textContent=et,$n=l(),x=e("h2"),x.innerHTML=pt,Jn=l(),$=e("blockquote"),$.innerHTML=lt,Yn=l(),J=e("p"),J.innerHTML=ot,Zn=l(),g=e("h2"),g.textContent=ct,ns=l(),Y=e("p"),Y.innerHTML=it,ss=l(),C=e("h2"),C.textContent=ut,ts=l(),Z=e("p"),Z.innerHTML=kt,as=l(),nn=e("p"),nn.innerHTML=rt,es=l(),sn=e("p"),sn.innerHTML=dt,ps=l(),tn=e("p"),tn.textContent=mt,ls=l(),an=e("ul"),an.innerHTML=yt,os=l(),en=e("p"),en.textContent=vt,cs=l(),pn=e("p"),pn.textContent=ft,is=l(),h=e("h2"),h.textContent=xt,us=l(),ln=e("blockquote"),ln.innerHTML=gt,ks=l(),on=e("p"),on.innerHTML=Ct,rs=l(),w=e("h2"),w.textContent=ht,ds=l(),cn=e("blockquote"),cn.innerHTML=wt,ms=l(),un=e("p"),un.innerHTML=_t,ys=l(),_=e("h1"),_.textContent=Tt,vs=l(),kn=e("pre"),fs=new Ts(!1),xs=l(),rn=e("pre"),gs=new Ts(!1),Cs=l(),T=e("h1"),T.textContent=bt,hs=l(),dn=e("p"),dn.innerHTML=Lt,ws=l(),mn=e("p"),mn.innerHTML=Ht,_s=l(),yn=e("p"),yn.innerHTML=It,this.h()},l(n){u=p(n,"NAV",{class:!0,"data-svelte-h":!0}),c(u)!=="svelte-yrleec"&&(u.innerHTML=Is),vn=o(n),k=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(k)!=="svelte-1k2d1in"&&(k.textContent=Ms),fn=o(n),b=p(n,"P",{"data-svelte-h":!0}),c(b)!=="svelte-1a6fha6"&&(b.textContent=Us),xn=o(n),L=p(n,"P",{"data-svelte-h":!0}),c(L)!=="svelte-1lqpanw"&&(L.textContent=Ps),gn=o(n),H=p(n,"OL",{"data-svelte-h":!0}),c(H)!=="svelte-11nzgo2"&&(H.innerHTML=Ss),Cn=o(n),I=p(n,"P",{"data-svelte-h":!0}),c(I)!=="svelte-1eccy64"&&(I.textContent=Fs),hn=o(n),M=p(n,"P",{"data-svelte-h":!0}),c(M)!=="svelte-z9kbby"&&(M.textContent=Es),wn=o(n),U=p(n,"P",{"data-svelte-h":!0}),c(U)!=="svelte-qcfz50"&&(U.textContent=Os),_n=o(n),P=p(n,"UL",{"data-svelte-h":!0}),c(P)!=="svelte-lpjb7q"&&(P.innerHTML=qs),Tn=o(n),S=p(n,"P",{"data-svelte-h":!0}),c(S)!=="svelte-1ou4gwb"&&(S.textContent=Ds),bn=o(n),r=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(r)!=="svelte-1d7r2ud"&&(r.textContent=Bs),Ln=o(n),F=p(n,"P",{"data-svelte-h":!0}),c(F)!=="svelte-1jx27r6"&&(F.textContent=js),Hn=o(n),E=p(n,"P",{"data-svelte-h":!0}),c(E)!=="svelte-7fwm4k"&&(E.textContent=Rs),In=o(n),O=p(n,"P",{"data-svelte-h":!0}),c(O)!=="svelte-10tjssy"&&(O.innerHTML=Xs),Mn=o(n),q=p(n,"P",{"data-svelte-h":!0}),c(q)!=="svelte-1hrr6wk"&&(q.innerHTML=zs),Un=o(n),d=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(d)!=="svelte-1l9l5i3"&&(d.textContent=Ws),Pn=o(n),D=p(n,"P",{"data-svelte-h":!0}),c(D)!=="svelte-1vm5lwb"&&(D.innerHTML=Ns),Sn=o(n),B=p(n,"UL",{"data-svelte-h":!0}),c(B)!=="svelte-1dqha3z"&&(B.innerHTML=Vs),Fn=o(n),m=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-1shtrv6"&&(m.textContent=As),En=o(n),j=p(n,"P",{"data-svelte-h":!0}),c(j)!=="svelte-knek9z"&&(j.innerHTML=Gs),On=o(n),R=p(n,"UL",{"data-svelte-h":!0}),c(R)!=="svelte-cara4p"&&(R.innerHTML=Ks),qn=o(n),X=p(n,"P",{"data-svelte-h":!0}),c(X)!=="svelte-8y5i44"&&(X.textContent=Qs),Dn=o(n),z=p(n,"PRE",{class:!0});var t=bs(z);Bn=Ls(t,!1),t.forEach(s),jn=o(n),W=p(n,"P",{"data-svelte-h":!0}),c(W)!=="svelte-y0vb4y"&&(W.textContent=$s),Rn=o(n),N=p(n,"PRE",{class:!0});var Mt=bs(N);Xn=Ls(Mt,!1),Mt.forEach(s),zn=o(n),V=p(n,"P",{"data-svelte-h":!0}),c(V)!=="svelte-1omvqt9"&&(V.textContent=Js),Wn=o(n),y=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-1v1jkce"&&(y.textContent=Ys),Nn=o(n),A=p(n,"P",{"data-svelte-h":!0}),c(A)!=="svelte-135hqdn"&&(A.textContent=Zs),Vn=o(n),v=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-8tbopm"&&(v.textContent=nt),An=o(n),G=p(n,"P",{"data-svelte-h":!0}),c(G)!=="svelte-p8i069"&&(G.textContent=st),Gn=o(n),f=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-1pxyokk"&&(f.textContent=tt),Kn=o(n),K=p(n,"P",{"data-svelte-h":!0}),c(K)!=="svelte-1thv9s7"&&(K.innerHTML=at),Qn=o(n),Q=p(n,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-s71uqd"&&(Q.textContent=et),$n=o(n),x=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(x)!=="svelte-1bon3u5"&&(x.innerHTML=pt),Jn=o(n),$=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c($)!=="svelte-1tkw2nn"&&($.innerHTML=lt),Yn=o(n),J=p(n,"P",{"data-svelte-h":!0}),c(J)!=="svelte-1crbgn8"&&(J.innerHTML=ot),Zn=o(n),g=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-qzedsj"&&(g.textContent=ct),ns=o(n),Y=p(n,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-ubx92y"&&(Y.innerHTML=it),ss=o(n),C=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-1cza03q"&&(C.textContent=ut),ts=o(n),Z=p(n,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-1rku0jw"&&(Z.innerHTML=kt),as=o(n),nn=p(n,"P",{"data-svelte-h":!0}),c(nn)!=="svelte-zl62oe"&&(nn.innerHTML=rt),es=o(n),sn=p(n,"P",{"data-svelte-h":!0}),c(sn)!=="svelte-gnkpdx"&&(sn.innerHTML=dt),ps=o(n),tn=p(n,"P",{"data-svelte-h":!0}),c(tn)!=="svelte-13sl2te"&&(tn.textContent=mt),ls=o(n),an=p(n,"UL",{"data-svelte-h":!0}),c(an)!=="svelte-lome"&&(an.innerHTML=yt),os=o(n),en=p(n,"P",{"data-svelte-h":!0}),c(en)!=="svelte-1ow0lzm"&&(en.textContent=vt),cs=o(n),pn=p(n,"P",{"data-svelte-h":!0}),c(pn)!=="svelte-n0r7zu"&&(pn.textContent=ft),is=o(n),h=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(h)!=="svelte-cg3ny2"&&(h.textContent=xt),us=o(n),ln=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(ln)!=="svelte-sajh8"&&(ln.innerHTML=gt),ks=o(n),on=p(n,"P",{"data-svelte-h":!0}),c(on)!=="svelte-1o87aoy"&&(on.innerHTML=Ct),rs=o(n),w=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(w)!=="svelte-15hawgs"&&(w.textContent=ht),ds=o(n),cn=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(cn)!=="svelte-1kr93jv"&&(cn.innerHTML=wt),ms=o(n),un=p(n,"P",{"data-svelte-h":!0}),c(un)!=="svelte-1mtkgsy"&&(un.innerHTML=_t),ys=o(n),_=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(_)!=="svelte-dj44vf"&&(_.textContent=Tt),vs=o(n),kn=p(n,"PRE",{class:!0});var Ut=bs(kn);fs=Ls(Ut,!1),Ut.forEach(s),xs=o(n),rn=p(n,"PRE",{class:!0});var Pt=bs(rn);gs=Ls(Pt,!1),Pt.forEach(s),Cs=o(n),T=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(T)!=="svelte-leqc2o"&&(T.textContent=bt),hs=o(n),dn=p(n,"P",{"data-svelte-h":!0}),c(dn)!=="svelte-1yjmtxf"&&(dn.innerHTML=Lt),ws=o(n),mn=p(n,"P",{"data-svelte-h":!0}),c(mn)!=="svelte-1mbrtkr"&&(mn.innerHTML=Ht),_s=o(n),yn=p(n,"P",{"data-svelte-h":!0}),c(yn)!=="svelte-1u56kkr"&&(yn.innerHTML=It),this.h()},h(){i(u,"class","toc"),i(k,"id","union-types"),i(r,"id","type-systems"),i(d,"id","nominal-types"),i(m,"id","shaped-based-types"),Bn.a=null,i(z,"class","language-typescript"),Xn.a=null,i(N,"class","language-dart"),i(y,"id","tagged-union-types"),i(v,"id","untagged-union-types"),i(f,"id","dart-support-for-union-types"),i(x,"id","futureorlttgt"),i(g,"id","nullable-types"),i(C,"id","sealed-class-modifier---tagged-union-types"),i(h,"id","package---either"),i(w,"id","package---extension-type-unions"),i(_,"id","refactoring-example"),fs.a=null,i(kn,"class","language-dart"),gs.a=null,i(rn,"class","language-dart"),i(T,"id","source")},m(n,t){a(n,u,t),a(n,vn,t),a(n,k,t),a(n,fn,t),a(n,b,t),a(n,xn,t),a(n,L,t),a(n,gn,t),a(n,H,t),a(n,Cn,t),a(n,I,t),a(n,hn,t),a(n,M,t),a(n,wn,t),a(n,U,t),a(n,_n,t),a(n,P,t),a(n,Tn,t),a(n,S,t),a(n,bn,t),a(n,r,t),a(n,Ln,t),a(n,F,t),a(n,Hn,t),a(n,E,t),a(n,In,t),a(n,O,t),a(n,Mn,t),a(n,q,t),a(n,Un,t),a(n,d,t),a(n,Pn,t),a(n,D,t),a(n,Sn,t),a(n,B,t),a(n,Fn,t),a(n,m,t),a(n,En,t),a(n,j,t),a(n,On,t),a(n,R,t),a(n,qn,t),a(n,X,t),a(n,Dn,t),a(n,z,t),Bn.m(Ft,z),a(n,jn,t),a(n,W,t),a(n,Rn,t),a(n,N,t),Xn.m(Et,N),a(n,zn,t),a(n,V,t),a(n,Wn,t),a(n,y,t),a(n,Nn,t),a(n,A,t),a(n,Vn,t),a(n,v,t),a(n,An,t),a(n,G,t),a(n,Gn,t),a(n,f,t),a(n,Kn,t),a(n,K,t),a(n,Qn,t),a(n,Q,t),a(n,$n,t),a(n,x,t),a(n,Jn,t),a(n,$,t),a(n,Yn,t),a(n,J,t),a(n,Zn,t),a(n,g,t),a(n,ns,t),a(n,Y,t),a(n,ss,t),a(n,C,t),a(n,ts,t),a(n,Z,t),a(n,as,t),a(n,nn,t),a(n,es,t),a(n,sn,t),a(n,ps,t),a(n,tn,t),a(n,ls,t),a(n,an,t),a(n,os,t),a(n,en,t),a(n,cs,t),a(n,pn,t),a(n,is,t),a(n,h,t),a(n,us,t),a(n,ln,t),a(n,ks,t),a(n,on,t),a(n,rs,t),a(n,w,t),a(n,ds,t),a(n,cn,t),a(n,ms,t),a(n,un,t),a(n,ys,t),a(n,_,t),a(n,vs,t),a(n,kn,t),fs.m(Ot,kn),a(n,xs,t),a(n,rn,t),gs.m(qt,rn),a(n,Cs,t),a(n,T,t),a(n,hs,t),a(n,dn,t),a(n,ws,t),a(n,mn,t),a(n,_s,t),a(n,yn,t)},p:Hs,i:Hs,o:Hs,d(n){n&&(s(u),s(vn),s(k),s(fn),s(b),s(xn),s(L),s(gn),s(H),s(Cn),s(I),s(hn),s(M),s(wn),s(U),s(_n),s(P),s(Tn),s(S),s(bn),s(r),s(Ln),s(F),s(Hn),s(E),s(In),s(O),s(Mn),s(q),s(Un),s(d),s(Pn),s(D),s(Sn),s(B),s(Fn),s(m),s(En),s(j),s(On),s(R),s(qn),s(X),s(Dn),s(z),s(jn),s(W),s(Rn),s(N),s(zn),s(V),s(Wn),s(y),s(Nn),s(A),s(Vn),s(v),s(An),s(G),s(Gn),s(f),s(Kn),s(K),s(Qn),s(Q),s($n),s(x),s(Jn),s($),s(Yn),s(J),s(Zn),s(g),s(ns),s(Y),s(ss),s(C),s(ts),s(Z),s(as),s(nn),s(es),s(sn),s(ps),s(tn),s(ls),s(an),s(os),s(en),s(cs),s(pn),s(is),s(h),s(us),s(ln),s(ks),s(on),s(rs),s(w),s(ds),s(cn),s(ms),s(un),s(ys),s(_),s(vs),s(kn),s(xs),s(rn),s(Cs),s(T),s(hs),s(dn),s(ws),s(mn),s(_s),s(yn))}}}const Wt={title:"Union types in dart",description:"Union type에 대해 알아봅시다.",author:"jack",published:!0,date:"2024. 12. 26.",tags:["Dart"]};class Nt extends Bt{constructor(u){super(),jt(this,u,null,Rt,Dt,{})}}export{Nt as default,Wt as metadata};
