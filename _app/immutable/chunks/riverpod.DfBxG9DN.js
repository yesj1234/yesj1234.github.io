import{s as Zo,n as gp}from"./scheduler.BR55WShb.js";import{S as nl,i as sl,e as p,s as o,H as i,c as e,g as c,f as l,j as k,k as r,d as s,a as u,l as t}from"./index.DZHVcTXD.js";function al(Ro){let d,_p='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#state-management">State management</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#state">State</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#riverpod">Riverpod</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#modeling">Modeling</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#provider">Provider</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#consumer">Consumer</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#notifier">Notifier</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#providerobserver">ProviderObserver</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#using-riverpod">Using riverpod</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#install">Install</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#providerscope">ProviderScope</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#define-model">Define model</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#define-provider">Define Provider</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#하드코딩된-위젯-리팩토링-statelesswidget---consumerwidget">하드코딩된 위젯 리팩토링 StatelessWidget -&gt; ConsumerWidget</a></li></ol></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#sources">Sources</a></li></ol>',Ps,m,hp="State management",Ts,v,Pp="State",bs,H,Tp="Flutter를 이용한 앱개발의 관점에서 상태(State)라는 용어는 일반적으로 다음과 같은 것들을 의미합니다.",Ls,M,bp="<li>버튼의 클릭 상태나 애니메이션의 진행 상태와 같이 앱의 한 곳에서만 사용되는 Local state</li> <li>로그인 상태나 환경 변수와 같이 앱 전반에 걸쳐 사용되는 Global state</li>",Ss,A,Lp="Local state는 app의 다른 곳에서 같은 정보를 사용할 일이 없는 정보이기 때문에 딱히 관리라고 할 것이 필요가 없습니다.",Hs,R,Sp=`Global state는 반대로 state의 정보를 app의 여러 곳에서 사용합니다.
따라서 state를 일관되게 유지해야 하고 state에 변화가 생길 경우의 side-effect를 어떻게 다룰지 고려해야 합니다.`,Ms,j,Hp="Flutter는 이러한 Global State를 관리하기위해 InheritedWidget, InheritedModel 등의 기본적인 방법을 제공하지만, Flutter 초보자 입장에서 이것들만을 활용해 상태를 관리하기란 쉽지 않습니다.",As,E,Mp='그래서 Flutter는 Provider라는 패키지를 사용할 것을 추천하고 있습니다만, Provider를 좀 더 쉽게 사용할 수 있게끔 만든 Riverpod에 대해 알아보고자 합니다. (Provider와 Riverpod 모두 <a href="https://github.com/rrousselGit" rel="nofollow">Remi Rousselet</a>가 만들었습니다.)',Rs,js,Es,f,Ap="Riverpod",Os,O,Rp="Riverpod 은 Provider를 기반으로 만든 Flutter 앱을 위한 반응형 캐싱 프레임워크입니다.",Fs,F,jp="Riverpod은 Flutter와 마찬가지로 선언적인(declarative) 프로그래밍 방법으로 앱에 필요한 상당 부분을 대신 해결해줍니다.",Ws,W,Ep="예를 들면, 네트워크 요청시에",Us,U,Op="<li>Handling error and loading status</li> <li>Caching</li> <li>Automatic re-fetching when necessary</li>",zs,z,Fp="또한 앱의 규모가 커짐에 따라 필요해지는 기능들, 예를 들어",Is,I,Wp="<li>Pull to refresh (당겨서 새로고침)</li> <li>Infinite lists / fetch as we scroll (무한 스크롤)</li> <li>Search as we type (검색)</li> <li>Debouncing asynchronous requests (비동기요청 묶음 처리)</li> <li>Cancelling asynchronous requests when no-longer used (사용되지 않는 비동기 요청 취소)</li> <li>Optimistic UIs (실패할 확률이 낮은 요청에 대한 낙관적인 페이지 처리)</li> <li>Offline mode (비행기 모드)</li>",qs,q,Up="Riverpod은 Provider를 통한 상태관리와 위처럼 그에 관련된 여러 가지 문제 상황들을 해결하고자 나온 패키지라고 볼 수 있겠습니다.",Ds,Bs,Js,D,zp='<img src="/core_concepts.jpg" alt="core_concpets"/>',$s,B,Ip="Riverpod의 가장 근본적인 기능인 상태관리와 관련된 핵심적인 부분들에 대해 먼저 알아보겠습니다.",Ns,J,qp="다음과 같은 상황을 가정해 보겠습니다.",Vs,$,Dp="야외 활동과 관련된 앱을 만드는데 다음과 같은 요구사항이 생겼습니다.",Gs,N,Bp="<li>데이터는 외부 서버로부터 받아와서 사용해야 함</li> <li>받아온 데이터는 캐싱되어야 하며</li> <li>네트워크 요청시 Error / loading 상태를 고려하여야함</li> <li>데이터에 변동이 있을 경우 데이터를 업데이트 해야함</li>",Ks,V,Jp="받아올 데이터(Activity)는 다음과 같은 정보를 포함해야 합니다.",Qs,G,$p="<li>key</li> <li>activity</li> <li>type</li> <li>participants</li> <li>price</li>",Xs,x,Np="Modeling",Ys,K,Vp=`JSON 데이터를 Flutter앱에서 안전하게 사용하기 위해서는 Dart class 객체로 변환하여 사용하는 것이 좋습니다.
JSON decoding을 할 때는 일반적으로 Freezed나 json_serializable 같은 code generator 패키지를 많이 사용합니다.`,Zs,Q,na,jo=`<code class="language-dart">
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:freezed_annotation/freezed_annotation.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'activity.freezed.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'activity.g.dart'</span></span><span class="token punctuation">;</span>

<span class="token comment">/// The response of the &#96;GET /api/activity&#96; endpoint.</span>
<span class="token comment">///</span>
<span class="token comment">/// It is defined using &#96;freezed&#96; and &#96;json_serializable&#96;.</span>
<span class="token metadata function">@freezed</span>
<span class="token keyword">class</span> <span class="token class-name">Activity</span> <span class="token keyword">with</span> _$<span class="token class-name">Activity</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">factory</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    required <span class="token class-name">String</span> key<span class="token punctuation">,</span>
    required <span class="token class-name">String</span> activity<span class="token punctuation">,</span>
    required <span class="token class-name">String</span> type<span class="token punctuation">,</span>
    required int participants<span class="token punctuation">,</span>
    required double price<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> _Activity<span class="token punctuation">;</span>

  <span class="token comment">/// Convert a JSON object into an [Activity] instance.</span>
  <span class="token comment">/// This enables type-safe reading of the API response.</span>
  <span class="token keyword">factory</span> <span class="token class-name">Activity</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _$<span class="token class-name">ActivityFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,sa,X,Gp="freezed에 대한 부분은 따로 정리하도록 하고 여기선 넘어가겠습니다.",aa,Y,Kp="이제 JSON 데이터를 안전하게 받아올 Model이 생겼으니 이 데이터를 제공해줄 Provider를 만들어 보도록 하겠습니다.",ta,pa,ea,y,Qp="Provider",oa,Z,la,Eo=`<code class="language-dart">
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:convert'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_riverpod/flutter_riverpod.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:http/http.dart'</span></span> <span class="token operator">as</span> http<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:riverpod_annotation/riverpod_annotation.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'activity.dart'</span></span><span class="token punctuation">;</span>

<span class="token comment">// Necessary for code-generation to work</span>
<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'provider.g.dart'</span></span><span class="token punctuation">;</span>

<span class="token comment">/// This will create a provider named &#96;activityProvider&#96;</span>
<span class="token comment">/// which will cache the result of this function.</span>
<span class="token metadata function">@riverpod</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Activity</span><span class="token punctuation">></span></span> <span class="token function">activity</span><span class="token punctuation">(</span><span class="token class-name">Ref</span> ref<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Using package:http, we fetch a random activity from the Bored API.</span>
  <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">https</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'boredapi.com'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'/api/activity'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Using dart:convert, we then decode the JSON payload into a Map data structure.</span>
  <span class="token keyword">final</span> json <span class="token operator">=</span> <span class="token function">jsonDecode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token comment">// Finally, we convert the Map into an Activity instance.</span>
  <span class="token keyword">return</span> <span class="token class-name">Activity</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ca,nn,Xp="<strong>@riverpod</strong> <strong>(OR @Riverpod)</strong>",ua,sn,Yp="Provider를 만들 때는 반드시 @riverpod 혹은 @Riverpod() annotation을 포함해야 합니다.",ia,an,Zp="@Riverpod() annotation을 사용하여 provider 관련 옵션(auto-dispose등의)을 설정할 수 있습니다.",ka,tn,ne="<strong>Future activity(Ref ref) async</strong>",ra,pn,se="함수의 이름이 activity이기 때문에 activityProvider 변수가 자동으로 생성됩니다(code-generation이 설정되어 있다면).",da,en,ae="함수는 반드시 첫 번째 파라미터로 “ref”를 사용해야합니다.",ma,on,te="generic을 포함한 다른 parameter들, optional parameter, named parameter등 자유롭게 설정 할 수 있으며 return type 또한 자유롭게 설정할 수 있습니다.",va,ln,pe="이 Provider는 처음 사용되는 시점에 실행되며 이후에는 캐시된 값을 리턴합니다.",fa,cn,ee="<strong>Ref</strong>",xa,un,oe="다른 Provider들을 사용하기 위한 object입니다.",ya,kn,le=`모든 Provider들이 ref object를 갖고 있습니다.
위처럼 함수형으로 선언된 Provider는 파라미터로, class로 선언된 Provider는 property로 갖습니다.`,wa,rn,ce="코드는 굉장히 간단하지만 염두에 두어야 할 숨겨진 사항이 몇 가지 있습니다.",Ca,dn,ue="<li>UI에서 provider를 최소한 한번 사용할 때까진 실제 네트워크 요청이 이뤄지지 않습니다.</li> <li>이후 다른 UI에서 provider를 호출할 경우, provider는 새로운 네트워크 요청의 결과값을 반환하는 것이 아니라 캐시된 데이터를 반환합니다.</li> <li>코드의 어떤 부분에서도 Error handling에 관련된 부분이 없지만 Riverpod이 자동으로 처리해줍니다.</li>",ga,_a,ha,w,ie="Consumer",Pa,mn,ke="이제 일관된 정보를 전달해줄 Provider를 정의했으니 가져다 쓸 수 있습니다.",Ta,vn,re=`Provider를 사용하기 위해서는 Ref object가 필요하다고 했습니다.
Provider를 정의할 때는 ref를 parameter 혹은 class property로 가지고 있었지만 실제 Provider를 쓰는 Widget의 입장에서는 어떻게 ref를 받아와야 할까요?`,ba,fn,de=`<code>Consumer</code> 를 사용하면 됩니다.
<code>Consumer</code> 는 Builder에 ref를 추가한 위젯이라고 생각할 수 있습니다.`,La,xn,Sa,Oo=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter_riverpod/flutter_riverpod.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'activity.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'provider.dart'</span></span><span class="token punctuation">;</span>

<span class="token comment">/// The homepage of our application</span>
<span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token class-name">Home</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>
      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">final</span> <span class="token class-name">AsyncValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Activity</span><span class="token punctuation">></span></span> activity <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>activityProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>activity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">AsyncData</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token keyword">final</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Activity: </span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">value<span class="token punctuation">.</span>activity</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">AsyncError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Oops, something unexpected happened'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            _ <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">const</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ha,yn,me="<strong>final AsyncValue activity = ref.watch(activityProvider);</strong>",Ma,wn,ve=`Consumer가 제공해주는 ref의 watch 메서드를 통해 activityProvider가 제공하는 State의 정보를 읽어옵니다.
ref.watch 메서드는 정보를 읽어오는데 그치지 않고 추가적으로 다음과 같은 경우에 widget을 업데이트합니다.`,Aa,Cn,fe="<li>loading -&gt; data or error</li> <li>request 새로고침</li> <li>activityProvider가 제공하는 state의 값이 바뀌었을 때 (by side-effect)</li>",Ra,gn,xe="<strong>switch (activity)</strong>",ja,_n,ye="네트워크 요청의 로딩상태 / 성공 / 실패 의 경우에 맞게 알맞은 UI를 그릴 수 있도록 경우를 나눈 것입니다.",Ea,Oa,Fa,C,we="Notifier",Wa,hn,Ce="외부 서버의 API를 이용해 데이터를 읽어오는 것은 어떻게 하는지 알았습니다.",Ua,Pn,ge=`하지만 데이터를 읽어오기만 해서는 의미가 없습니다.
데이터를 추가하거나 변경하거나 삭제할 수도 있어야하죠.
이를 수행하기 위해서는 Notifier가 필요합니다.`,za,Tn,_e="Notifier를 좀 더 쉽게 이해하기 위해 todo list를 만든다고 가정해봅시다.",Ia,bn,he="마찬가지로 Provider를 먼저 정의하도록 하겠습니다.",qa,Ln,Pe="다음과 같이 Provider를 정의할 경우 Consumer에서 Provider의 state를 변경할 수 있는 방법이 없습니다.",Da,Sn,Ba,Fo=`<code class="language-dart"><span class="token comment">// Provider for reading only. No explicit method to modify the data</span>
<span class="token metadata function">@riverpod</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Todo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">todoList</span><span class="token punctuation">(</span><span class="token class-name">Ref</span> ref<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Simulate a network request. This would normally come from a real API</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token class-name">Todo</span><span class="token punctuation">(</span>description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Learn Flutter'</span></span><span class="token punctuation">,</span> completed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Todo</span><span class="token punctuation">(</span>description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Learn Riverpod'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

</code>`,Ja,Hn,Te="Consumer가 Provider의 state를 변경할 수 있도록 만들기 위해서는 다음과 같이 class 형태로 Provider를 정의해주고 명시적으로 변경할 수 있는 수단을 method의 형태로 제공해주어야 합니다.",$a,Mn,Na,Wo=`<code class="language-dart"><span class="token comment">// Notifier that could have explicit method to modify the data</span>
<span class="token metadata function">@riverpod</span>
<span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> _$<span class="token class-name">TodoList</span> <span class="token punctuation">&#123;</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Todo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// The logic we previously had in our FutureProvider is now in the build method.</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token class-name">Todo</span><span class="token punctuation">(</span>description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Learn Flutter'</span></span><span class="token punctuation">,</span> completed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Todo</span><span class="token punctuation">(</span>description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'Learn Riverpod'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token class-name">Todo</span> todo<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
      <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">https</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'your_api.com'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'/todos'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      headers<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'Content-Type'</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'application/json'</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      body<span class="token punctuation">:</span> <span class="token function">jsonEncode</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Va,An,be="이 method는 Consumer의 onPressed와 같은 이벤트 콜백에서 사용할 수 있습니다.",Ga,Rn,Ka,Uo=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">ConsumerWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">WidgetRef</span> ref<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>
      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Using "ref.read" combined with "myProvider.notifier", we can</span>
        <span class="token comment">// obtain the class instance of our notifier. This enables us</span>
        <span class="token comment">// to call the "addTodo" method.</span>
        ref
            <span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>todoListProvider<span class="token punctuation">.</span>notifier<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token class-name">Todo</span><span class="token punctuation">(</span>description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'This is a new todo'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Add todo'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Qa,jn,Le="Provider의 state를 변경하긴 했지만 cache된 데이터까지 바꾸지는 못했습니다.",Xa,En,Se=`cache된 데이터를 변경해야 해당 state를 사용하고 있는 UI들이 알맞게 바뀔 수 있습니다.
이를 해결하기 위한 방법이 몇 가지 있습니다.`,Ya,On,He="<strong>1. POST요청의 결과값을 이용해 state 업데이트하기</strong>",Za,Fn,Me="<strong>2. <code>ref.invalidateSelf()</code>로 provider 새로고침하기</strong>",nt,Wn,Ae="<strong>3. local cache 직접 업데이트하기</strong>",st,Un,Re="위의 방법들은 각각 장단점이 있습니다.",at,zn,je="차례대로 보도록 하겠습니다.",tt,In,Ee="<strong>첫 번째, POST 요청의 결과값을 이용해 state 업데이트하기</strong>",pt,qn,et,zo=`<code class="language-dart">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token class-name">Todo</span> todo<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// The POST request will return a List&lt;Todo> matching the new application state</span>
    <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
      <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">https</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'your_api.com'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'/todos'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      headers<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'Content-Type'</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'application/json'</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      body<span class="token punctuation">:</span> <span class="token function">jsonEncode</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// We decode the API response and convert it to a List&lt;Todo></span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Todo</span><span class="token punctuation">></span></span> newTodos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">List</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span>cast<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Todo</span><span class="token punctuation">.</span>fromJson<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// We update the local cache to match the new state.</span>
    <span class="token comment">// This will notify all listeners.</span>
    state <span class="token operator">=</span> <span class="token class-name">AsyncData</span><span class="token punctuation">(</span>newTodos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,ot,Dn,Oe="<strong>장점:</strong>",lt,Bn,Fe="<li>항상 최신 정보로 state를 유지할 수 있습니다.</li> <li>server가 모든 정보를 제공해주므로 client에서 새로운 todo를 어떻게 추가해야 할지 등을 알 필요가 없습니다.</li> <li>한 번의 네트워크 요청만을 사용합니다.</li>",ct,Jn,We="<strong>단점:</strong>",ut,$n,Ue="<li>POST요청이 특정 값을 리턴하도록 요구합니다. 즉 서버가 동작하는 방식이 달라진다면 사용 할 수 없는 방법입니다.</li> <li>만약 filtering / sorting 등의 복잡한 로직이 포함된다면 비용이 증가 할 수 있습니다.</li>",it,Nn,ze="<strong>두 번째, <code>ref.invalidateSelf()</code>로 provider 새로고침하기</strong>",kt,Vn,rt,Io=`<code class="language-dart">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token class-name">Todo</span> todo<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// We don't care about the API response</span>
    <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
      <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">https</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'your_api.com'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'/todos'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      headers<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'Content-Type'</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'application/json'</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      body<span class="token punctuation">:</span> <span class="token function">jsonEncode</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Once the post request is done, we can mark the local cache as dirty.</span>
    <span class="token comment">// This will cause "build" on our notifier to asynchronously be called again,</span>
    <span class="token comment">// and will notify listeners when doing so.</span>
    ref<span class="token punctuation">.</span><span class="token function">invalidateSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// (Optional) We can then wait for the new state to be computed.</span>
    <span class="token comment">// This ensures "addTodo" does not complete until the new state is available.</span>
    <span class="token keyword">await</span> future<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,dt,Gn,Ie="<strong>장점:</strong>",mt,Kn,qe="<li>첫 번째 방법과 마찬가지로 항상 최신상태로 state를 유지하며, clien는 새로운 todo를 어떻게 추가해야 할지 등을 알 필요가 없습니다.</li> <li>첫 번째 방법과는 다르게 서버로부터 POST요청의 반환값을 사용하여 cache를 업데이트하지 않기 때문에 서버가 요청을 처리하는 방식이 달라져도 괜찮습니다.</li>",vt,Qn,De="<strong>단점:</strong>",ft,Xn,Be="<li>위의 주석에서 설명했듯이 ref.invalidateSelf()는 새롭게 state 를 build합니다. 즉 POST요청 이후 GET 요청을 한번 더 실행합니다. 네트워크 요청이 많아져서 좋을게 없죠.</li>",xt,Yn,Je="<strong>세 번째, local cache 직접 업데이트하기</strong>",yt,Zn,wt,qo=`<code class="language-dart">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token class-name">Todo</span> todo<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// We don't care about the API response</span>
    <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
      <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">https</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'your_api.com'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'/todos'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      headers<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'Content-Type'</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'application/json'</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      body<span class="token punctuation">:</span> <span class="token function">jsonEncode</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// We can then manually update the local cache. For this, we'll need to</span>
    <span class="token comment">// obtain the previous state.</span>
    <span class="token comment">// Caution: The previous state may still be loading or in error state.</span>
    <span class="token comment">// A graceful way of handling this would be to read &#96;this.future&#96; instead</span>
    <span class="token comment">// of &#96;this.state&#96;, which would enable awaiting the loading state, and</span>
    <span class="token comment">// throw an error if the state is in error state.</span>
    <span class="token keyword">final</span> previousState <span class="token operator">=</span> <span class="token keyword">await</span> future<span class="token punctuation">;</span>

    <span class="token comment">// We can then update the state, by creating a new state object.</span>
    <span class="token comment">// This will notify all listeners.</span>
    state <span class="token operator">=</span> <span class="token class-name">AsyncData</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>previousState<span class="token punctuation">,</span> todo<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,Ct,ns,$e="<strong>장점:</strong>",gt,ss,Ne="<li>두 번째 방법과 마찬가지로 서버가 요청을 처리하는 방식이 달라져도 괜찮습니다.</li> <li>두 번째 방법과 다르게 네트워크 요청은 한번만 일어납니다.</li>",_t,as,Ve="<strong>단점:</strong>",ht,ts,Ge="<li>state가 서버의 정보와 항상 같지 않을 수 있습니다.</li> <li>서버가 todo를 저장하는 방식을 알고 있어야 하기 때문에 복잡도가 증가 할 수 있습니다.</li>",Pt,Tt,bt,g,Ke="ProviderObserver",Lt,ps,Qe="Provider에서 발생하는 이벤트들, 에러들을 보기 위해서는 ProviderObserver를 사용하면 됩니다.",St,es,Xe="Provider에서 발생하는 이벤트들에는 다음과 같은 것들이 있습니다.",Ht,os,Ye="<li>didAddProvider : provider가 tree에 추가 되었을 때</li> <li>didUpdateProvider : provider가 update되었을 때</li> <li>didDisposeProvider : provider가 해제(dispose) 되었을 때</li> <li>providerDidFail : async provider가 에러를 반환했을 때</li>",Mt,ls,Ze="ProviderObserver 만들기",At,cs,Rt,Do=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyObserver</span> <span class="token keyword">extends</span> <span class="token class-name">ProviderObserver</span> <span class="token punctuation">&#123;</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">didAddProvider</span><span class="token punctuation">(</span>
    <span class="token class-name">ProviderBase</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">></span></span> provider<span class="token punctuation">,</span>
    <span class="token class-name">Object</span><span class="token operator">?</span> value<span class="token punctuation">,</span>
    <span class="token class-name">ProviderContainer</span> container<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Provider </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">provider</span></span><span class="token string"> was initialized with </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">didDisposeProvider</span><span class="token punctuation">(</span>
    <span class="token class-name">ProviderBase</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">></span></span> provider<span class="token punctuation">,</span>
    <span class="token class-name">ProviderContainer</span> container<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Provider </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">provider</span></span><span class="token string"> was disposed'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">didUpdateProvider</span><span class="token punctuation">(</span>
    <span class="token class-name">ProviderBase</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">></span></span> provider<span class="token punctuation">,</span>
    <span class="token class-name">Object</span><span class="token operator">?</span> previousValue<span class="token punctuation">,</span>
    <span class="token class-name">Object</span><span class="token operator">?</span> newValue<span class="token punctuation">,</span>
    <span class="token class-name">ProviderContainer</span> container<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Provider </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">provider</span></span><span class="token string"> updated from </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">previousValue</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">newValue</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">providerDidFail</span><span class="token punctuation">(</span>
    <span class="token class-name">ProviderBase</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">></span></span> provider<span class="token punctuation">,</span>
    <span class="token class-name">Object</span> error<span class="token punctuation">,</span>
    <span class="token class-name">StackTrace</span> stackTrace<span class="token punctuation">,</span>
    <span class="token class-name">ProviderContainer</span> container<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Provider </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">provider</span></span><span class="token string"> threw </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">error</span></span><span class="token string"> at </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">stackTrace</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,jt,us,no=`만든 ProviderObserver를 사용하기 위해서는 다음과 같이 앱의 최상단에서 등록해주면 됩니다.
ProviderScope에 등록`,Et,is,Ot,Bo=`<code class="language-dart"><span class="token function">runApp</span><span class="token punctuation">(</span>
  <span class="token class-name">ProviderScope</span><span class="token punctuation">(</span>
    observers<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token class-name">MyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ft,ks,so="혹은 ProviderContainer에 등록",Wt,rs,Ut,Jo=`<code class="language-dart"><span class="token keyword">final</span> container <span class="token operator">=</span> <span class="token class-name">ProviderContainer</span><span class="token punctuation">(</span>
  observers<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token class-name">MyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,zt,It,qt,_,ao="Using riverpod",Dt,h,to="Install",Bt,ds,Jt,$o=`<code class="language-dart">flutter pub add flutter_riverpod
flutter pub add riverpod_annotation
flutter pub add dev<span class="token punctuation">:</span>riverpod_generator
flutter pub add dev<span class="token punctuation">:</span>build_runner
flutter pub add dev<span class="token punctuation">:</span>custom_lint
flutter pub add dev<span class="token punctuation">:</span>riverpod_lint</code>`,$t,Nt,Vt,P,po="ProviderScope",Gt,ms,Kt,No=`<code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">await</span> <span class="token class-name">Firebase</span><span class="token punctuation">.</span><span class="token function">initializeApp</span><span class="token punctuation">(</span>
    options<span class="token punctuation">:</span> <span class="token class-name">DefaultFirebaseOptions</span><span class="token punctuation">.</span>currentPlatform<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">ProviderScope</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Qt,Xt,Yt,T,eo="Define model",Zt,vs,np,Vo=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Journal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> image<span class="token punctuation">;</span>

  <span class="token class-name">Journal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Journal</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span> json<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> title <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'title'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        content <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'content'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        image <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'image'</span></span><span class="token punctuation">]</span> <span class="token operator">as</span> <span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,sp,ap,tp,b,oo="Define Provider",pp,fs,ep,Go=`<code class="language-dart"><span class="token metadata function">@riverpod</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Journal</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">journal</span><span class="token punctuation">(</span><span class="token class-name">Ref</span> ref<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> db <span class="token operator">=</span> <span class="token class-name">FirebaseFirestore</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token keyword">final</span> journal <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"journals"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'KFq6AjljeCt60J2Evabr'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> journal<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DocumentSnapshot</span> doc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> json <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> journalModel <span class="token operator">=</span> <span class="token class-name">Journal</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> journalModel<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,op,lp,cp,L,lo="하드코딩된 위젯 리팩토링 StatelessWidget -> ConsumerWidget",up,xs,co="<strong>BEFORE</strong>",ip,ys,kp,Ko=`<code class="language-dart"><span class="token keyword">class</span> _Content <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token function">_Content</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> <span class="token class-name">TextStyle</span> textStyle <span class="token operator">=</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>
      color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">.</span>shade600<span class="token punctuation">,</span>
      fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"assets/icons/LogoTemp.png"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
            height<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"일지를 작성해보세요"</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> textStyle<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,rp,ws,dp,Qo=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">CardSingle</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token class-name">CardSingle</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CardSingle</span><span class="token punctuation">></span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_CardSingleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> _CardSingleState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CardSingle</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">String</span><span class="token operator">?</span> imageURL<span class="token punctuation">;</span>
  <span class="token keyword">final</span> double innerPadding <span class="token operator">=</span> <span class="token number">12.0</span><span class="token punctuation">;</span>

  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">_fetchImageURLs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> storageRef <span class="token operator">=</span> <span class="token class-name">FirebaseStorage</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> url <span class="token operator">=</span>
        <span class="token keyword">await</span> storageRef<span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'/grapeFarm.jpg'</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDownloadURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      imageURL <span class="token operator">=</span> url<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_fetchImageURLs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> <span class="token class-name">ColorScheme</span> colorScheme <span class="token operator">=</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
      mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
      crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>
      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token function">_UpperDatePortion</span><span class="token punctuation">(</span>
          padding<span class="token punctuation">:</span> innerPadding<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">"오늘"</span></span><span class="token punctuation">,</span>
            style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">ConstrainedBox</span><span class="token punctuation">(</span>
          constraints<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">(</span>maxHeight<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">,</span> maxWidth<span class="token punctuation">:</span> <span class="token number">325</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Card</span><span class="token punctuation">(</span>
            color<span class="token punctuation">:</span> colorScheme<span class="token punctuation">.</span>surface<span class="token punctuation">.</span><span class="token function">withOpacity</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            elevation<span class="token punctuation">:</span> <span class="token number">3.0</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
              crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>
              children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
                <span class="token function">_ImagePortion</span><span class="token punctuation">(</span>padding<span class="token punctuation">:</span> innerPadding<span class="token punctuation">,</span> url<span class="token punctuation">:</span> imageURL<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token function">_TextPortion</span><span class="token punctuation">(</span>
                  padding<span class="token punctuation">:</span> innerPadding<span class="token punctuation">,</span>
                  child<span class="token punctuation">:</span> <span class="token class-name">RichText</span><span class="token punctuation">(</span>
                      maxLines<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                      overflow<span class="token punctuation">:</span> <span class="token class-name">TextOverflow</span><span class="token punctuation">.</span>ellipsis<span class="token punctuation">,</span>
                      text<span class="token punctuation">:</span> <span class="token class-name">TextSpan</span><span class="token punctuation">(</span>
                          style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> colorScheme<span class="token punctuation">.</span>onSurfaceVariant<span class="token punctuation">)</span><span class="token punctuation">,</span>
                          text<span class="token punctuation">:</span>
                              <span class="token string-literal"><span class="token string">"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In neque quam, pellentesque eu nisl a, posuere posuere lacus. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. "</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">const</span> <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">const</span> <span class="token class-name">Divider</span><span class="token punctuation">(</span>
                  indent<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
                  endIndent<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token function">_DatePortion</span><span class="token punctuation">(</span>
                  padding<span class="token punctuation">:</span> innerPadding<span class="token punctuation">,</span>
                  date<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  onEdit<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Hello"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span>
              <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,mp,Cs,uo="<strong>AFTER</strong>",vp,gs,fp,Xo=`<code class="language-dart"><span class="token keyword">class</span> _UserContent <span class="token keyword">extends</span> <span class="token class-name">ConsumerWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">WidgetRef</span> ref<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> journals <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>journalProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">ListView</span><span class="token punctuation">(</span>
        shrinkWrap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>journals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token class-name">AsyncData</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token keyword">final</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> journal <span class="token keyword">in</span> value<span class="token punctuation">)</span>
                <span class="token class-name">Padding</span><span class="token punctuation">(</span>
                  padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
                    child<span class="token punctuation">:</span> <span class="token class-name">CardSingle</span><span class="token punctuation">(</span>
                        title<span class="token punctuation">:</span> journal<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
                        content<span class="token punctuation">:</span> journal<span class="token punctuation">.</span>content<span class="token punctuation">,</span>
                        createdAt<span class="token punctuation">:</span> journal<span class="token punctuation">.</span>createdAt<span class="token punctuation">,</span>
                        image<span class="token punctuation">:</span> journal<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token class-name">AsyncError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Oops! Something went wrong"</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          _ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token keyword">const</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,xp,_s,yp,Yo=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">CardSingle</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token class-name">CardSingle</span><span class="token punctuation">(</span>
      <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>createdAt<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>image<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> double innerPadding <span class="token operator">=</span> <span class="token number">12.0</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">Timestamp</span><span class="token operator">?</span> createdAt<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token operator">?</span> title<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token operator">?</span> content<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token operator">?</span> image<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> <span class="token class-name">ColorScheme</span> colorScheme <span class="token operator">=</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
      mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
      crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>
      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token function">_UpperDatePortion</span><span class="token punctuation">(</span>
          padding<span class="token punctuation">:</span> innerPadding<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression"><span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>createdAt<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day</span><span class="token punctuation">&#125;</span></span><span class="token string">일"</span></span><span class="token punctuation">,</span>
            style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">ConstrainedBox</span><span class="token punctuation">(</span>
          constraints<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">(</span>maxHeight<span class="token punctuation">:</span> <span class="token number">270</span><span class="token punctuation">,</span> maxWidth<span class="token punctuation">:</span> <span class="token number">325</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Card</span><span class="token punctuation">(</span>
            color<span class="token punctuation">:</span> colorScheme<span class="token punctuation">.</span>surface<span class="token punctuation">.</span><span class="token function">withOpacity</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            elevation<span class="token punctuation">:</span> <span class="token number">3.0</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
              crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>
              children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
                <span class="token function">_ImagePortion</span><span class="token punctuation">(</span>padding<span class="token punctuation">:</span> innerPadding<span class="token punctuation">,</span> url<span class="token punctuation">:</span> image<span class="token punctuation">)</span><span class="token punctuation">,</span>
                title <span class="token operator">!=</span> <span class="token keyword">null</span>
                    <span class="token operator">?</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>
                        padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> innerPadding<span class="token punctuation">)</span><span class="token punctuation">,</span>
                        child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
                          title<span class="token operator">!</span><span class="token punctuation">,</span>
                          style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>
                            fontSize<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
                            fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">,</span>
                          <span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token punctuation">)</span>
                    <span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token function">_TextPortion</span><span class="token punctuation">(</span>
                  padding<span class="token punctuation">:</span> innerPadding<span class="token punctuation">,</span>
                  child<span class="token punctuation">:</span> <span class="token class-name">RichText</span><span class="token punctuation">(</span>
                      maxLines<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                      overflow<span class="token punctuation">:</span> <span class="token class-name">TextOverflow</span><span class="token punctuation">.</span>ellipsis<span class="token punctuation">,</span>
                      text<span class="token punctuation">:</span> <span class="token class-name">TextSpan</span><span class="token punctuation">(</span>
                          style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> colorScheme<span class="token punctuation">.</span>onSurfaceVariant<span class="token punctuation">)</span><span class="token punctuation">,</span>
                          text<span class="token punctuation">:</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">const</span> <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">const</span> <span class="token class-name">Divider</span><span class="token punctuation">(</span>
                  indent<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
                  endIndent<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token function">_DatePortion</span><span class="token punctuation">(</span>
                  padding<span class="token punctuation">:</span> innerPadding<span class="token punctuation">,</span>
                  date<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  onEdit<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Hello"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span>
              <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,wp,S,io="Sources",Cp,hs,ko='<a href="https://riverpod.dev" rel="nofollow">Riverpod 공식문서</a>';return{c(){d=p("nav"),d.innerHTML=_p,Ps=o(),m=p("h1"),m.textContent=hp,Ts=o(),v=p("h2"),v.textContent=Pp,bs=o(),H=p("p"),H.textContent=Tp,Ls=o(),M=p("ul"),M.innerHTML=bp,Ss=o(),A=p("p"),A.textContent=Lp,Hs=o(),R=p("p"),R.textContent=Sp,Ms=o(),j=p("p"),j.textContent=Hp,As=o(),E=p("p"),E.innerHTML=Mp,Rs=o(),js=p("hr"),Es=o(),f=p("h2"),f.textContent=Ap,Os=o(),O=p("p"),O.textContent=Rp,Fs=o(),F=p("p"),F.textContent=jp,Ws=o(),W=p("p"),W.textContent=Ep,Us=o(),U=p("ul"),U.innerHTML=Op,zs=o(),z=p("p"),z.textContent=Fp,Is=o(),I=p("ul"),I.innerHTML=Wp,qs=o(),q=p("p"),q.textContent=Up,Ds=o(),Bs=p("hr"),Js=o(),D=p("p"),D.innerHTML=zp,$s=o(),B=p("p"),B.textContent=Ip,Ns=o(),J=p("p"),J.textContent=qp,Vs=o(),$=p("p"),$.textContent=Dp,Gs=o(),N=p("ol"),N.innerHTML=Bp,Ks=o(),V=p("p"),V.textContent=Jp,Qs=o(),G=p("ol"),G.innerHTML=$p,Xs=o(),x=p("h3"),x.textContent=Np,Ys=o(),K=p("p"),K.textContent=Vp,Zs=o(),Q=p("pre"),na=new i(!1),sa=o(),X=p("p"),X.textContent=Gp,aa=o(),Y=p("p"),Y.textContent=Kp,ta=o(),pa=p("hr"),ea=o(),y=p("h3"),y.textContent=Qp,oa=o(),Z=p("pre"),la=new i(!1),ca=o(),nn=p("p"),nn.innerHTML=Xp,ua=o(),sn=p("p"),sn.textContent=Yp,ia=o(),an=p("p"),an.textContent=Zp,ka=o(),tn=p("p"),tn.innerHTML=ne,ra=o(),pn=p("p"),pn.textContent=se,da=o(),en=p("p"),en.textContent=ae,ma=o(),on=p("p"),on.textContent=te,va=o(),ln=p("p"),ln.textContent=pe,fa=o(),cn=p("p"),cn.innerHTML=ee,xa=o(),un=p("p"),un.textContent=oe,ya=o(),kn=p("p"),kn.textContent=le,wa=o(),rn=p("p"),rn.textContent=ce,Ca=o(),dn=p("ul"),dn.innerHTML=ue,ga=o(),_a=p("hr"),ha=o(),w=p("h3"),w.textContent=ie,Pa=o(),mn=p("p"),mn.textContent=ke,Ta=o(),vn=p("p"),vn.textContent=re,ba=o(),fn=p("p"),fn.innerHTML=de,La=o(),xn=p("pre"),Sa=new i(!1),Ha=o(),yn=p("p"),yn.innerHTML=me,Ma=o(),wn=p("p"),wn.textContent=ve,Aa=o(),Cn=p("ul"),Cn.innerHTML=fe,Ra=o(),gn=p("p"),gn.innerHTML=xe,ja=o(),_n=p("p"),_n.textContent=ye,Ea=o(),Oa=p("hr"),Fa=o(),C=p("h3"),C.textContent=we,Wa=o(),hn=p("p"),hn.textContent=Ce,Ua=o(),Pn=p("p"),Pn.textContent=ge,za=o(),Tn=p("p"),Tn.textContent=_e,Ia=o(),bn=p("p"),bn.textContent=he,qa=o(),Ln=p("p"),Ln.textContent=Pe,Da=o(),Sn=p("pre"),Ba=new i(!1),Ja=o(),Hn=p("p"),Hn.textContent=Te,$a=o(),Mn=p("pre"),Na=new i(!1),Va=o(),An=p("p"),An.textContent=be,Ga=o(),Rn=p("pre"),Ka=new i(!1),Qa=o(),jn=p("p"),jn.textContent=Le,Xa=o(),En=p("p"),En.textContent=Se,Ya=o(),On=p("p"),On.innerHTML=He,Za=o(),Fn=p("p"),Fn.innerHTML=Me,nt=o(),Wn=p("p"),Wn.innerHTML=Ae,st=o(),Un=p("p"),Un.textContent=Re,at=o(),zn=p("p"),zn.textContent=je,tt=o(),In=p("p"),In.innerHTML=Ee,pt=o(),qn=p("pre"),et=new i(!1),ot=o(),Dn=p("p"),Dn.innerHTML=Oe,lt=o(),Bn=p("ul"),Bn.innerHTML=Fe,ct=o(),Jn=p("p"),Jn.innerHTML=We,ut=o(),$n=p("ul"),$n.innerHTML=Ue,it=o(),Nn=p("p"),Nn.innerHTML=ze,kt=o(),Vn=p("pre"),rt=new i(!1),dt=o(),Gn=p("p"),Gn.innerHTML=Ie,mt=o(),Kn=p("ul"),Kn.innerHTML=qe,vt=o(),Qn=p("p"),Qn.innerHTML=De,ft=o(),Xn=p("ul"),Xn.innerHTML=Be,xt=o(),Yn=p("p"),Yn.innerHTML=Je,yt=o(),Zn=p("pre"),wt=new i(!1),Ct=o(),ns=p("p"),ns.innerHTML=$e,gt=o(),ss=p("ul"),ss.innerHTML=Ne,_t=o(),as=p("p"),as.innerHTML=Ve,ht=o(),ts=p("ul"),ts.innerHTML=Ge,Pt=o(),Tt=p("hr"),bt=o(),g=p("h3"),g.textContent=Ke,Lt=o(),ps=p("p"),ps.textContent=Qe,St=o(),es=p("p"),es.textContent=Xe,Ht=o(),os=p("ul"),os.innerHTML=Ye,Mt=o(),ls=p("p"),ls.textContent=Ze,At=o(),cs=p("pre"),Rt=new i(!1),jt=o(),us=p("p"),us.textContent=no,Et=o(),is=p("pre"),Ot=new i(!1),Ft=o(),ks=p("p"),ks.textContent=so,Wt=o(),rs=p("pre"),Ut=new i(!1),zt=o(),It=p("hr"),qt=o(),_=p("h2"),_.textContent=ao,Dt=o(),h=p("h3"),h.textContent=to,Bt=o(),ds=p("pre"),Jt=new i(!1),$t=o(),Nt=p("hr"),Vt=o(),P=p("h3"),P.textContent=po,Gt=o(),ms=p("pre"),Kt=new i(!1),Qt=o(),Xt=p("hr"),Yt=o(),T=p("h3"),T.textContent=eo,Zt=o(),vs=p("pre"),np=new i(!1),sp=o(),ap=p("hr"),tp=o(),b=p("h3"),b.textContent=oo,pp=o(),fs=p("pre"),ep=new i(!1),op=o(),lp=p("hr"),cp=o(),L=p("h3"),L.textContent=lo,up=o(),xs=p("p"),xs.innerHTML=co,ip=o(),ys=p("pre"),kp=new i(!1),rp=o(),ws=p("pre"),dp=new i(!1),mp=o(),Cs=p("p"),Cs.innerHTML=uo,vp=o(),gs=p("pre"),fp=new i(!1),xp=o(),_s=p("pre"),yp=new i(!1),wp=o(),S=p("h1"),S.textContent=io,Cp=o(),hs=p("p"),hs.innerHTML=ko,this.h()},l(n){d=e(n,"NAV",{class:!0,"data-svelte-h":!0}),c(d)!=="svelte-l2t9v8"&&(d.innerHTML=_p),Ps=l(n),m=e(n,"H1",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-i2vcbv"&&(m.textContent=hp),Ts=l(n),v=e(n,"H2",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-lby9aw"&&(v.textContent=Pp),bs=l(n),H=e(n,"P",{"data-svelte-h":!0}),c(H)!=="svelte-70zqg8"&&(H.textContent=Tp),Ls=l(n),M=e(n,"UL",{"data-svelte-h":!0}),c(M)!=="svelte-fa5mif"&&(M.innerHTML=bp),Ss=l(n),A=e(n,"P",{"data-svelte-h":!0}),c(A)!=="svelte-q12vd1"&&(A.textContent=Lp),Hs=l(n),R=e(n,"P",{"data-svelte-h":!0}),c(R)!=="svelte-lhvh57"&&(R.textContent=Sp),Ms=l(n),j=e(n,"P",{"data-svelte-h":!0}),c(j)!=="svelte-lfnoup"&&(j.textContent=Hp),As=l(n),E=e(n,"P",{"data-svelte-h":!0}),c(E)!=="svelte-1szcokm"&&(E.innerHTML=Mp),Rs=l(n),js=e(n,"HR",{}),Es=l(n),f=e(n,"H2",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-ni8ciy"&&(f.textContent=Ap),Os=l(n),O=e(n,"P",{"data-svelte-h":!0}),c(O)!=="svelte-16qybcj"&&(O.textContent=Rp),Fs=l(n),F=e(n,"P",{"data-svelte-h":!0}),c(F)!=="svelte-5j1eyi"&&(F.textContent=jp),Ws=l(n),W=e(n,"P",{"data-svelte-h":!0}),c(W)!=="svelte-crz7it"&&(W.textContent=Ep),Us=l(n),U=e(n,"UL",{"data-svelte-h":!0}),c(U)!=="svelte-10t8yss"&&(U.innerHTML=Op),zs=l(n),z=e(n,"P",{"data-svelte-h":!0}),c(z)!=="svelte-nnbntm"&&(z.textContent=Fp),Is=l(n),I=e(n,"UL",{"data-svelte-h":!0}),c(I)!=="svelte-hea9w4"&&(I.innerHTML=Wp),qs=l(n),q=e(n,"P",{"data-svelte-h":!0}),c(q)!=="svelte-ildcbr"&&(q.textContent=Up),Ds=l(n),Bs=e(n,"HR",{}),Js=l(n),D=e(n,"P",{"data-svelte-h":!0}),c(D)!=="svelte-132ikd8"&&(D.innerHTML=zp),$s=l(n),B=e(n,"P",{"data-svelte-h":!0}),c(B)!=="svelte-1bkku1c"&&(B.textContent=Ip),Ns=l(n),J=e(n,"P",{"data-svelte-h":!0}),c(J)!=="svelte-1ne495"&&(J.textContent=qp),Vs=l(n),$=e(n,"P",{"data-svelte-h":!0}),c($)!=="svelte-1qvldm8"&&($.textContent=Dp),Gs=l(n),N=e(n,"OL",{"data-svelte-h":!0}),c(N)!=="svelte-1ur2q5k"&&(N.innerHTML=Bp),Ks=l(n),V=e(n,"P",{"data-svelte-h":!0}),c(V)!=="svelte-mlqrg8"&&(V.textContent=Jp),Qs=l(n),G=e(n,"OL",{"data-svelte-h":!0}),c(G)!=="svelte-1qyxvn0"&&(G.innerHTML=$p),Xs=l(n),x=e(n,"H3",{id:!0,"data-svelte-h":!0}),c(x)!=="svelte-wfoia0"&&(x.textContent=Np),Ys=l(n),K=e(n,"P",{"data-svelte-h":!0}),c(K)!=="svelte-6p0k86"&&(K.textContent=Vp),Zs=l(n),Q=e(n,"PRE",{class:!0});var a=k(Q);na=r(a,!1),a.forEach(s),sa=l(n),X=e(n,"P",{"data-svelte-h":!0}),c(X)!=="svelte-103gzo4"&&(X.textContent=Gp),aa=l(n),Y=e(n,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-1ols49t"&&(Y.textContent=Kp),ta=l(n),pa=e(n,"HR",{}),ea=l(n),y=e(n,"H3",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-s1lvzw"&&(y.textContent=Qp),oa=l(n),Z=e(n,"PRE",{class:!0});var ro=k(Z);la=r(ro,!1),ro.forEach(s),ca=l(n),nn=e(n,"P",{"data-svelte-h":!0}),c(nn)!=="svelte-14gtamk"&&(nn.innerHTML=Xp),ua=l(n),sn=e(n,"P",{"data-svelte-h":!0}),c(sn)!=="svelte-1ldfyej"&&(sn.textContent=Yp),ia=l(n),an=e(n,"P",{"data-svelte-h":!0}),c(an)!=="svelte-5wnm4b"&&(an.textContent=Zp),ka=l(n),tn=e(n,"P",{"data-svelte-h":!0}),c(tn)!=="svelte-g6367s"&&(tn.innerHTML=ne),ra=l(n),pn=e(n,"P",{"data-svelte-h":!0}),c(pn)!=="svelte-1130bif"&&(pn.textContent=se),da=l(n),en=e(n,"P",{"data-svelte-h":!0}),c(en)!=="svelte-jwa8ph"&&(en.textContent=ae),ma=l(n),on=e(n,"P",{"data-svelte-h":!0}),c(on)!=="svelte-gdxt7b"&&(on.textContent=te),va=l(n),ln=e(n,"P",{"data-svelte-h":!0}),c(ln)!=="svelte-1uys69w"&&(ln.textContent=pe),fa=l(n),cn=e(n,"P",{"data-svelte-h":!0}),c(cn)!=="svelte-1pwzs58"&&(cn.innerHTML=ee),xa=l(n),un=e(n,"P",{"data-svelte-h":!0}),c(un)!=="svelte-1tty2z0"&&(un.textContent=oe),ya=l(n),kn=e(n,"P",{"data-svelte-h":!0}),c(kn)!=="svelte-cc3gez"&&(kn.textContent=le),wa=l(n),rn=e(n,"P",{"data-svelte-h":!0}),c(rn)!=="svelte-22huhj"&&(rn.textContent=ce),Ca=l(n),dn=e(n,"UL",{"data-svelte-h":!0}),c(dn)!=="svelte-s0cpd"&&(dn.innerHTML=ue),ga=l(n),_a=e(n,"HR",{}),ha=l(n),w=e(n,"H3",{id:!0,"data-svelte-h":!0}),c(w)!=="svelte-18t47p8"&&(w.textContent=ie),Pa=l(n),mn=e(n,"P",{"data-svelte-h":!0}),c(mn)!=="svelte-1n7xt5a"&&(mn.textContent=ke),Ta=l(n),vn=e(n,"P",{"data-svelte-h":!0}),c(vn)!=="svelte-ugte80"&&(vn.textContent=re),ba=l(n),fn=e(n,"P",{"data-svelte-h":!0}),c(fn)!=="svelte-h553ky"&&(fn.innerHTML=de),La=l(n),xn=e(n,"PRE",{class:!0});var mo=k(xn);Sa=r(mo,!1),mo.forEach(s),Ha=l(n),yn=e(n,"P",{"data-svelte-h":!0}),c(yn)!=="svelte-11o9i1s"&&(yn.innerHTML=me),Ma=l(n),wn=e(n,"P",{"data-svelte-h":!0}),c(wn)!=="svelte-1whs5hc"&&(wn.textContent=ve),Aa=l(n),Cn=e(n,"UL",{"data-svelte-h":!0}),c(Cn)!=="svelte-7q1pjl"&&(Cn.innerHTML=fe),Ra=l(n),gn=e(n,"P",{"data-svelte-h":!0}),c(gn)!=="svelte-o02fk1"&&(gn.innerHTML=xe),ja=l(n),_n=e(n,"P",{"data-svelte-h":!0}),c(_n)!=="svelte-cka0na"&&(_n.textContent=ye),Ea=l(n),Oa=e(n,"HR",{}),Fa=l(n),C=e(n,"H3",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-btc5xc"&&(C.textContent=we),Wa=l(n),hn=e(n,"P",{"data-svelte-h":!0}),c(hn)!=="svelte-1mg9e3z"&&(hn.textContent=Ce),Ua=l(n),Pn=e(n,"P",{"data-svelte-h":!0}),c(Pn)!=="svelte-c0idiw"&&(Pn.textContent=ge),za=l(n),Tn=e(n,"P",{"data-svelte-h":!0}),c(Tn)!=="svelte-ho4sf"&&(Tn.textContent=_e),Ia=l(n),bn=e(n,"P",{"data-svelte-h":!0}),c(bn)!=="svelte-1jbcdr4"&&(bn.textContent=he),qa=l(n),Ln=e(n,"P",{"data-svelte-h":!0}),c(Ln)!=="svelte-1vsts58"&&(Ln.textContent=Pe),Da=l(n),Sn=e(n,"PRE",{class:!0});var vo=k(Sn);Ba=r(vo,!1),vo.forEach(s),Ja=l(n),Hn=e(n,"P",{"data-svelte-h":!0}),c(Hn)!=="svelte-s2pzkv"&&(Hn.textContent=Te),$a=l(n),Mn=e(n,"PRE",{class:!0});var fo=k(Mn);Na=r(fo,!1),fo.forEach(s),Va=l(n),An=e(n,"P",{"data-svelte-h":!0}),c(An)!=="svelte-1bjijkg"&&(An.textContent=be),Ga=l(n),Rn=e(n,"PRE",{class:!0});var xo=k(Rn);Ka=r(xo,!1),xo.forEach(s),Qa=l(n),jn=e(n,"P",{"data-svelte-h":!0}),c(jn)!=="svelte-mer3vz"&&(jn.textContent=Le),Xa=l(n),En=e(n,"P",{"data-svelte-h":!0}),c(En)!=="svelte-8ybblv"&&(En.textContent=Se),Ya=l(n),On=e(n,"P",{"data-svelte-h":!0}),c(On)!=="svelte-9ez4sg"&&(On.innerHTML=He),Za=l(n),Fn=e(n,"P",{"data-svelte-h":!0}),c(Fn)!=="svelte-4irb7w"&&(Fn.innerHTML=Me),nt=l(n),Wn=e(n,"P",{"data-svelte-h":!0}),c(Wn)!=="svelte-sirwb8"&&(Wn.innerHTML=Ae),st=l(n),Un=e(n,"P",{"data-svelte-h":!0}),c(Un)!=="svelte-y5ehda"&&(Un.textContent=Re),at=l(n),zn=e(n,"P",{"data-svelte-h":!0}),c(zn)!=="svelte-a8n4q2"&&(zn.textContent=je),tt=l(n),In=e(n,"P",{"data-svelte-h":!0}),c(In)!=="svelte-19d6n8g"&&(In.innerHTML=Ee),pt=l(n),qn=e(n,"PRE",{class:!0});var yo=k(qn);et=r(yo,!1),yo.forEach(s),ot=l(n),Dn=e(n,"P",{"data-svelte-h":!0}),c(Dn)!=="svelte-jly3c4"&&(Dn.innerHTML=Oe),lt=l(n),Bn=e(n,"UL",{"data-svelte-h":!0}),c(Bn)!=="svelte-7f3taw"&&(Bn.innerHTML=Fe),ct=l(n),Jn=e(n,"P",{"data-svelte-h":!0}),c(Jn)!=="svelte-1fk8bbr"&&(Jn.innerHTML=We),ut=l(n),$n=e(n,"UL",{"data-svelte-h":!0}),c($n)!=="svelte-1ytdphl"&&($n.innerHTML=Ue),it=l(n),Nn=e(n,"P",{"data-svelte-h":!0}),c(Nn)!=="svelte-7aye2q"&&(Nn.innerHTML=ze),kt=l(n),Vn=e(n,"PRE",{class:!0});var wo=k(Vn);rt=r(wo,!1),wo.forEach(s),dt=l(n),Gn=e(n,"P",{"data-svelte-h":!0}),c(Gn)!=="svelte-jly3c4"&&(Gn.innerHTML=Ie),mt=l(n),Kn=e(n,"UL",{"data-svelte-h":!0}),c(Kn)!=="svelte-zxrexh"&&(Kn.innerHTML=qe),vt=l(n),Qn=e(n,"P",{"data-svelte-h":!0}),c(Qn)!=="svelte-1fk8bbr"&&(Qn.innerHTML=De),ft=l(n),Xn=e(n,"UL",{"data-svelte-h":!0}),c(Xn)!=="svelte-iwuwl9"&&(Xn.innerHTML=Be),xt=l(n),Yn=e(n,"P",{"data-svelte-h":!0}),c(Yn)!=="svelte-fx2h9r"&&(Yn.innerHTML=Je),yt=l(n),Zn=e(n,"PRE",{class:!0});var Co=k(Zn);wt=r(Co,!1),Co.forEach(s),Ct=l(n),ns=e(n,"P",{"data-svelte-h":!0}),c(ns)!=="svelte-jly3c4"&&(ns.innerHTML=$e),gt=l(n),ss=e(n,"UL",{"data-svelte-h":!0}),c(ss)!=="svelte-1wdfneo"&&(ss.innerHTML=Ne),_t=l(n),as=e(n,"P",{"data-svelte-h":!0}),c(as)!=="svelte-1fk8bbr"&&(as.innerHTML=Ve),ht=l(n),ts=e(n,"UL",{"data-svelte-h":!0}),c(ts)!=="svelte-1ljugtt"&&(ts.innerHTML=Ge),Pt=l(n),Tt=e(n,"HR",{}),bt=l(n),g=e(n,"H3",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-121m0so"&&(g.textContent=Ke),Lt=l(n),ps=e(n,"P",{"data-svelte-h":!0}),c(ps)!=="svelte-1pycefl"&&(ps.textContent=Qe),St=l(n),es=e(n,"P",{"data-svelte-h":!0}),c(es)!=="svelte-csw4u3"&&(es.textContent=Xe),Ht=l(n),os=e(n,"UL",{"data-svelte-h":!0}),c(os)!=="svelte-1g2gzra"&&(os.innerHTML=Ye),Mt=l(n),ls=e(n,"P",{"data-svelte-h":!0}),c(ls)!=="svelte-dad8eh"&&(ls.textContent=Ze),At=l(n),cs=e(n,"PRE",{class:!0});var go=k(cs);Rt=r(go,!1),go.forEach(s),jt=l(n),us=e(n,"P",{"data-svelte-h":!0}),c(us)!=="svelte-17un3sr"&&(us.textContent=no),Et=l(n),is=e(n,"PRE",{class:!0});var _o=k(is);Ot=r(_o,!1),_o.forEach(s),Ft=l(n),ks=e(n,"P",{"data-svelte-h":!0}),c(ks)!=="svelte-lw14j1"&&(ks.textContent=so),Wt=l(n),rs=e(n,"PRE",{class:!0});var ho=k(rs);Ut=r(ho,!1),ho.forEach(s),zt=l(n),It=e(n,"HR",{}),qt=l(n),_=e(n,"H2",{id:!0,"data-svelte-h":!0}),c(_)!=="svelte-i2fvst"&&(_.textContent=ao),Dt=l(n),h=e(n,"H3",{id:!0,"data-svelte-h":!0}),c(h)!=="svelte-w4qfa6"&&(h.textContent=to),Bt=l(n),ds=e(n,"PRE",{class:!0});var Po=k(ds);Jt=r(Po,!1),Po.forEach(s),$t=l(n),Nt=e(n,"HR",{}),Vt=l(n),P=e(n,"H3",{id:!0,"data-svelte-h":!0}),c(P)!=="svelte-1nzekvy"&&(P.textContent=po),Gt=l(n),ms=e(n,"PRE",{class:!0});var To=k(ms);Kt=r(To,!1),To.forEach(s),Qt=l(n),Xt=e(n,"HR",{}),Yt=l(n),T=e(n,"H3",{id:!0,"data-svelte-h":!0}),c(T)!=="svelte-1wcmxpl"&&(T.textContent=eo),Zt=l(n),vs=e(n,"PRE",{class:!0});var bo=k(vs);np=r(bo,!1),bo.forEach(s),sp=l(n),ap=e(n,"HR",{}),tp=l(n),b=e(n,"H3",{id:!0,"data-svelte-h":!0}),c(b)!=="svelte-5qretd"&&(b.textContent=oo),pp=l(n),fs=e(n,"PRE",{class:!0});var Lo=k(fs);ep=r(Lo,!1),Lo.forEach(s),op=l(n),lp=e(n,"HR",{}),cp=l(n),L=e(n,"H3",{id:!0,"data-svelte-h":!0}),c(L)!=="svelte-fo9du1"&&(L.textContent=lo),up=l(n),xs=e(n,"P",{"data-svelte-h":!0}),c(xs)!=="svelte-16yhk14"&&(xs.innerHTML=co),ip=l(n),ys=e(n,"PRE",{class:!0});var So=k(ys);kp=r(So,!1),So.forEach(s),rp=l(n),ws=e(n,"PRE",{class:!0});var Ho=k(ws);dp=r(Ho,!1),Ho.forEach(s),mp=l(n),Cs=e(n,"P",{"data-svelte-h":!0}),c(Cs)!=="svelte-6gffmn"&&(Cs.innerHTML=uo),vp=l(n),gs=e(n,"PRE",{class:!0});var Mo=k(gs);fp=r(Mo,!1),Mo.forEach(s),xp=l(n),_s=e(n,"PRE",{class:!0});var Ao=k(_s);yp=r(Ao,!1),Ao.forEach(s),wp=l(n),S=e(n,"H1",{id:!0,"data-svelte-h":!0}),c(S)!=="svelte-22jvrw"&&(S.textContent=io),Cp=l(n),hs=e(n,"P",{"data-svelte-h":!0}),c(hs)!=="svelte-1ceryc7"&&(hs.innerHTML=ko),this.h()},h(){u(d,"class","toc"),u(m,"id","state-management"),u(v,"id","state"),u(f,"id","riverpod"),u(x,"id","modeling"),na.a=null,u(Q,"class","language-dart"),u(y,"id","provider"),la.a=null,u(Z,"class","language-dart"),u(w,"id","consumer"),Sa.a=null,u(xn,"class","language-dart"),u(C,"id","notifier"),Ba.a=null,u(Sn,"class","language-dart"),Na.a=null,u(Mn,"class","language-dart"),Ka.a=null,u(Rn,"class","language-dart"),et.a=null,u(qn,"class","language-dart"),rt.a=null,u(Vn,"class","language-dart"),wt.a=null,u(Zn,"class","language-dart"),u(g,"id","providerobserver"),Rt.a=null,u(cs,"class","language-dart"),Ot.a=null,u(is,"class","language-dart"),Ut.a=null,u(rs,"class","language-dart"),u(_,"id","using-riverpod"),u(h,"id","install"),Jt.a=null,u(ds,"class","language-dart"),u(P,"id","providerscope"),Kt.a=null,u(ms,"class","language-dart"),u(T,"id","define-model"),np.a=null,u(vs,"class","language-dart"),u(b,"id","define-provider"),ep.a=null,u(fs,"class","language-dart"),u(L,"id","하드코딩된-위젯-리팩토링-statelesswidget---consumerwidget"),kp.a=null,u(ys,"class","language-dart"),dp.a=null,u(ws,"class","language-dart"),fp.a=null,u(gs,"class","language-dart"),yp.a=null,u(_s,"class","language-dart"),u(S,"id","sources")},m(n,a){t(n,d,a),t(n,Ps,a),t(n,m,a),t(n,Ts,a),t(n,v,a),t(n,bs,a),t(n,H,a),t(n,Ls,a),t(n,M,a),t(n,Ss,a),t(n,A,a),t(n,Hs,a),t(n,R,a),t(n,Ms,a),t(n,j,a),t(n,As,a),t(n,E,a),t(n,Rs,a),t(n,js,a),t(n,Es,a),t(n,f,a),t(n,Os,a),t(n,O,a),t(n,Fs,a),t(n,F,a),t(n,Ws,a),t(n,W,a),t(n,Us,a),t(n,U,a),t(n,zs,a),t(n,z,a),t(n,Is,a),t(n,I,a),t(n,qs,a),t(n,q,a),t(n,Ds,a),t(n,Bs,a),t(n,Js,a),t(n,D,a),t(n,$s,a),t(n,B,a),t(n,Ns,a),t(n,J,a),t(n,Vs,a),t(n,$,a),t(n,Gs,a),t(n,N,a),t(n,Ks,a),t(n,V,a),t(n,Qs,a),t(n,G,a),t(n,Xs,a),t(n,x,a),t(n,Ys,a),t(n,K,a),t(n,Zs,a),t(n,Q,a),na.m(jo,Q),t(n,sa,a),t(n,X,a),t(n,aa,a),t(n,Y,a),t(n,ta,a),t(n,pa,a),t(n,ea,a),t(n,y,a),t(n,oa,a),t(n,Z,a),la.m(Eo,Z),t(n,ca,a),t(n,nn,a),t(n,ua,a),t(n,sn,a),t(n,ia,a),t(n,an,a),t(n,ka,a),t(n,tn,a),t(n,ra,a),t(n,pn,a),t(n,da,a),t(n,en,a),t(n,ma,a),t(n,on,a),t(n,va,a),t(n,ln,a),t(n,fa,a),t(n,cn,a),t(n,xa,a),t(n,un,a),t(n,ya,a),t(n,kn,a),t(n,wa,a),t(n,rn,a),t(n,Ca,a),t(n,dn,a),t(n,ga,a),t(n,_a,a),t(n,ha,a),t(n,w,a),t(n,Pa,a),t(n,mn,a),t(n,Ta,a),t(n,vn,a),t(n,ba,a),t(n,fn,a),t(n,La,a),t(n,xn,a),Sa.m(Oo,xn),t(n,Ha,a),t(n,yn,a),t(n,Ma,a),t(n,wn,a),t(n,Aa,a),t(n,Cn,a),t(n,Ra,a),t(n,gn,a),t(n,ja,a),t(n,_n,a),t(n,Ea,a),t(n,Oa,a),t(n,Fa,a),t(n,C,a),t(n,Wa,a),t(n,hn,a),t(n,Ua,a),t(n,Pn,a),t(n,za,a),t(n,Tn,a),t(n,Ia,a),t(n,bn,a),t(n,qa,a),t(n,Ln,a),t(n,Da,a),t(n,Sn,a),Ba.m(Fo,Sn),t(n,Ja,a),t(n,Hn,a),t(n,$a,a),t(n,Mn,a),Na.m(Wo,Mn),t(n,Va,a),t(n,An,a),t(n,Ga,a),t(n,Rn,a),Ka.m(Uo,Rn),t(n,Qa,a),t(n,jn,a),t(n,Xa,a),t(n,En,a),t(n,Ya,a),t(n,On,a),t(n,Za,a),t(n,Fn,a),t(n,nt,a),t(n,Wn,a),t(n,st,a),t(n,Un,a),t(n,at,a),t(n,zn,a),t(n,tt,a),t(n,In,a),t(n,pt,a),t(n,qn,a),et.m(zo,qn),t(n,ot,a),t(n,Dn,a),t(n,lt,a),t(n,Bn,a),t(n,ct,a),t(n,Jn,a),t(n,ut,a),t(n,$n,a),t(n,it,a),t(n,Nn,a),t(n,kt,a),t(n,Vn,a),rt.m(Io,Vn),t(n,dt,a),t(n,Gn,a),t(n,mt,a),t(n,Kn,a),t(n,vt,a),t(n,Qn,a),t(n,ft,a),t(n,Xn,a),t(n,xt,a),t(n,Yn,a),t(n,yt,a),t(n,Zn,a),wt.m(qo,Zn),t(n,Ct,a),t(n,ns,a),t(n,gt,a),t(n,ss,a),t(n,_t,a),t(n,as,a),t(n,ht,a),t(n,ts,a),t(n,Pt,a),t(n,Tt,a),t(n,bt,a),t(n,g,a),t(n,Lt,a),t(n,ps,a),t(n,St,a),t(n,es,a),t(n,Ht,a),t(n,os,a),t(n,Mt,a),t(n,ls,a),t(n,At,a),t(n,cs,a),Rt.m(Do,cs),t(n,jt,a),t(n,us,a),t(n,Et,a),t(n,is,a),Ot.m(Bo,is),t(n,Ft,a),t(n,ks,a),t(n,Wt,a),t(n,rs,a),Ut.m(Jo,rs),t(n,zt,a),t(n,It,a),t(n,qt,a),t(n,_,a),t(n,Dt,a),t(n,h,a),t(n,Bt,a),t(n,ds,a),Jt.m($o,ds),t(n,$t,a),t(n,Nt,a),t(n,Vt,a),t(n,P,a),t(n,Gt,a),t(n,ms,a),Kt.m(No,ms),t(n,Qt,a),t(n,Xt,a),t(n,Yt,a),t(n,T,a),t(n,Zt,a),t(n,vs,a),np.m(Vo,vs),t(n,sp,a),t(n,ap,a),t(n,tp,a),t(n,b,a),t(n,pp,a),t(n,fs,a),ep.m(Go,fs),t(n,op,a),t(n,lp,a),t(n,cp,a),t(n,L,a),t(n,up,a),t(n,xs,a),t(n,ip,a),t(n,ys,a),kp.m(Ko,ys),t(n,rp,a),t(n,ws,a),dp.m(Qo,ws),t(n,mp,a),t(n,Cs,a),t(n,vp,a),t(n,gs,a),fp.m(Xo,gs),t(n,xp,a),t(n,_s,a),yp.m(Yo,_s),t(n,wp,a),t(n,S,a),t(n,Cp,a),t(n,hs,a)},p:gp,i:gp,o:gp,d(n){n&&(s(d),s(Ps),s(m),s(Ts),s(v),s(bs),s(H),s(Ls),s(M),s(Ss),s(A),s(Hs),s(R),s(Ms),s(j),s(As),s(E),s(Rs),s(js),s(Es),s(f),s(Os),s(O),s(Fs),s(F),s(Ws),s(W),s(Us),s(U),s(zs),s(z),s(Is),s(I),s(qs),s(q),s(Ds),s(Bs),s(Js),s(D),s($s),s(B),s(Ns),s(J),s(Vs),s($),s(Gs),s(N),s(Ks),s(V),s(Qs),s(G),s(Xs),s(x),s(Ys),s(K),s(Zs),s(Q),s(sa),s(X),s(aa),s(Y),s(ta),s(pa),s(ea),s(y),s(oa),s(Z),s(ca),s(nn),s(ua),s(sn),s(ia),s(an),s(ka),s(tn),s(ra),s(pn),s(da),s(en),s(ma),s(on),s(va),s(ln),s(fa),s(cn),s(xa),s(un),s(ya),s(kn),s(wa),s(rn),s(Ca),s(dn),s(ga),s(_a),s(ha),s(w),s(Pa),s(mn),s(Ta),s(vn),s(ba),s(fn),s(La),s(xn),s(Ha),s(yn),s(Ma),s(wn),s(Aa),s(Cn),s(Ra),s(gn),s(ja),s(_n),s(Ea),s(Oa),s(Fa),s(C),s(Wa),s(hn),s(Ua),s(Pn),s(za),s(Tn),s(Ia),s(bn),s(qa),s(Ln),s(Da),s(Sn),s(Ja),s(Hn),s($a),s(Mn),s(Va),s(An),s(Ga),s(Rn),s(Qa),s(jn),s(Xa),s(En),s(Ya),s(On),s(Za),s(Fn),s(nt),s(Wn),s(st),s(Un),s(at),s(zn),s(tt),s(In),s(pt),s(qn),s(ot),s(Dn),s(lt),s(Bn),s(ct),s(Jn),s(ut),s($n),s(it),s(Nn),s(kt),s(Vn),s(dt),s(Gn),s(mt),s(Kn),s(vt),s(Qn),s(ft),s(Xn),s(xt),s(Yn),s(yt),s(Zn),s(Ct),s(ns),s(gt),s(ss),s(_t),s(as),s(ht),s(ts),s(Pt),s(Tt),s(bt),s(g),s(Lt),s(ps),s(St),s(es),s(Ht),s(os),s(Mt),s(ls),s(At),s(cs),s(jt),s(us),s(Et),s(is),s(Ft),s(ks),s(Wt),s(rs),s(zt),s(It),s(qt),s(_),s(Dt),s(h),s(Bt),s(ds),s($t),s(Nt),s(Vt),s(P),s(Gt),s(ms),s(Qt),s(Xt),s(Yt),s(T),s(Zt),s(vs),s(sp),s(ap),s(tp),s(b),s(pp),s(fs),s(op),s(lp),s(cp),s(L),s(up),s(xs),s(ip),s(ys),s(rp),s(ws),s(mp),s(Cs),s(vp),s(gs),s(xp),s(_s),s(wp),s(S),s(Cp),s(hs))}}}const el={title:"Flutter Package - Riverpod, State management tool",description:"Learn the core concept of provider and basic features of Riverpod.",author:"jack",published:!0,date:"2024. 11. 08.",tags:["Flutter"]};class ol extends nl{constructor(d){super(),sl(this,d,null,al,Zo,{})}}export{ol as default,el as metadata};
