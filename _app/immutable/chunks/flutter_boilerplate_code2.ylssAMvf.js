import{s as te,n as ht}from"./scheduler.BR55WShb.js";import{S as ae,i as ee,e,s as l,H as k,c as p,g as c,f as o,j as r,k as d,d as s,a as u,l as a}from"./index.DZHVcTXD.js";function pe(Ia){let i,Wt='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#element-createelement">Element createElement()</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#element">Element</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#element는-widget이랑-무슨-관계지">Element는 Widget이랑 무슨 관계지?</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#statefulwidget">StatefulWidget</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#코드-맛보기">코드 맛보기</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#runapp">runApp</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#_runwidget">_runWidget</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#scheduleattachrootwidget">scheduleAttachRootWidget</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#schedulewarmupframe">scheduleWarmUpFrame</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#scheduleframe">scheduleFrame</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#element-1">Element</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#sources">Sources</a></li></ol>',Rn,P,bt="지난 글에서 Widget이 field로 가지고 있던 Key까지 알아보았습니다.",An,E,Pt="createElement() 메서드에 대해 이어서 보도록 하겠습니다.",On,S,qn,Ka=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token keyword">extends</span> <span class="token class-name">DiagnosticableTree</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">Widget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Initializes key for subclasses.</span>

	<span class="token keyword">final</span> <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">;</span>

	<span class="token metadata function">@protected</span>
	<span class="token metadata function">@factory</span>
	<span class="token class-name">Element</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token metadata function">@override</span>
	<span class="token class-name">String</span> <span class="token function">toStringShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">final</span> <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token function">objectRuntimeType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'Widget'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> type<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">type</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">key</span></span><span class="token string">'</span></span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token metadata function">@override</span>
	<span class="token keyword">void</span> <span class="token function">debugFillProperties</span><span class="token punctuation">(</span><span class="token class-name">DiagnosticPropertiesBuilder</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">debugFillProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
		properties<span class="token punctuation">.</span>defaultDiagnosticsTreeStyle <span class="token operator">=</span> <span class="token class-name">DiagnosticsTreeStyle</span><span class="token punctuation">.</span>dense<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token metadata function">@override</span>
	<span class="token metadata function">@nonVirtual</span>
	bool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">super</span> <span class="token operator">==</span> other<span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	<span class="token metadata function">@nonVirtual</span>
	int <span class="token keyword">get</span> hashCode <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">super</span><span class="token punctuation">.</span>hashCode<span class="token punctuation">;</span>

	<span class="token keyword">static</span> bool <span class="token function">canUpdate</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> oldWidget<span class="token punctuation">,</span> <span class="token class-name">Widget</span> newWidget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> oldWidget<span class="token punctuation">.</span>runtimeType <span class="token operator">==</span> newWidget<span class="token punctuation">.</span>runtimeType
			<span class="token operator">&amp;&amp;</span> oldWidget<span class="token punctuation">.</span>key <span class="token operator">==</span> newWidget<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">static</span> int <span class="token function">_debugConcreteSubtype</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> widget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> widget <span class="token operator">is</span> <span class="token class-name">StatefullWidget</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span>
			widget <span class="token operator">is</span> <span class="token class-name">StatelessWidget</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Dn,m,Et="Element createElement()",Un,T,St="createElement 메서드는 2가지 annotation이 포함되어 있습니다.",Vn,H,Tt="<li><strong>protected</strong>: <code>@protected</code>로 표시된 instance member(method, field 포함)는 같은 클래스나 mixin 혹은 하위 클래스에서만 사용해야합니다.</li> <li><strong>factory</strong>: <code>@factory</code>로 표시된 메서드는 반드시 null 혹은 새로운 instance를 반환해야합니다.</li>",zn,M,Ht="참고로 annotation은 편의를 위해 코드에 주석을 다는것입니다. 위의 protected, factory annotation의 의도와 다르게 코드를 쓴다고해도 compile 에러는 나지 않습니다.",Nn,B,Mt="이전 글에서 본 바와 같이 StatelessWidget은 Widget을 상속받아 createElement 메서드를 구체화하여 사용하고 있는 것을 확인한 바 있습니다.",In,F,Kn,$a=`<code class="language-dart">absract <span class="token keyword">class</span> <span class="token class-name">StatelessWidget</span> <span class="token keyword">extends</span> <span class="token class-name">Widget</span><span class="token punctuation">:</span>
	<span class="token keyword">const</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">StatelessElement</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">StatelessElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>`,$n,L,Bt="그럼 이쯤에서 궁금한 점이 생깁니다.",Gn,j,Ft="음..Element는 뭐고 Widget이랑 무슨 관계지?",Qn,f,Lt="Element",Zn,R,jt='<a href="https://api.flutter.dev/flutter/widgets/Element-class.html" rel="nofollow">공식 문서</a>에서는 Element를 다음과 같이 설명합니다.',Jn,A,Rt="<p>An instantiation of a Widget at a particular location in the tree.</p>",Xn,O,At="Element는 tree의 특정 위치에 있는 Widget의 instance다. 라고 이해할 수 있을 것 같습니다.",Yn,v,Ot="Element는 Widget이랑 무슨 관계지?",ns,q,qt="Flutter는 Tree구조로 앱을 그립니다.",ss,D,Dt="Widget도 tree를 만들고, element도 tree를 만듭니다.",ts,U,Ut="정확히는 <strong>Widget Tree</strong>를 기반으로 <strong>Element Tree</strong>를 구성하게 됩니다.",as,V,Vt="<code>StatelessElement createElement() =&gt; StatelessElement(this);</code> 부분이 바로 widget의 구성(configuration)을 바탕으로 element를 만들어 element tree에 넣어주는 방식이죠.",es,z,zt="Widget Tree와 Element Tree가 그려지는 순서는 다음과 같습니다.",ps,ls,os,N,Nt="<li><p>main함수안에 있는 <strong><code>runApp(const MyApp)</code></strong> 함수가 실행됩니다.</p></li> <li><p><strong>Flutter</strong>는 MyApp widget을 <strong>Widget Tree의 최상단에 위치</strong>시킵니다(mounts).</p></li> <li><p>Widget Tree에 mount된 MyApp widget은 <strong>createElement</strong> 메서드를 이용해 <strong>element</strong>를 만듭니다(instantiates).</p></li> <li><p>만들어진 element를 <strong>Element Tree에 mount</strong>시킵니다. 이 때 해당 <strong>element는 widget을 참조</strong>(reference)하고 있는 상태입니다.</p></li> <li><p>Flutter는 MyApp widget의 <strong>build 메서드를 실행</strong>시킵니다.</p></li> <li><p>build 메서드는 <strong>MaterialApp widget을 반환</strong>하고 Flutter는 이 widget을 <strong>MyApp widget 밑에 위치</strong>시킵니다.</p></li> <li><p>Widget Tree에 mount된 MaterialApp widget <strong>createElement</strong> 메서드를 이용해 <strong>element</strong>를 만듭니다.</p></li> <li><p>만들어진 element를 <strong>Element Tree에 mount</strong>시킵니다. 이 때 해당 <strong>element는 widget을 참조</strong>(reference)하고 있는 상태입니다.</p></li> <li><p>Flutter는 MaterialApp widget의 <strong>build 메서드를 실행</strong>시킵니다.</p></li> <li><p>위와 같은 과정을 마지막 Widget까지 반복합니다.</p></li>",cs,us,is,I,It="main.dart의 Widget Tree와 Element Tree는 결과적으로 다음과 같습니다.",ks,K,rs,Ga=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
			title<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
			theme<span class="token punctuation">:</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			home<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">MyHomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">MyHomePage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token metadata function">@override</span>
	<span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyHomePage</span><span class="token punctuation">></span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_MyHomePageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> _MyHomePageState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyHomePage</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
			appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
				child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
					children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">></span></span><span class="token punctuation">[</span>
						<span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
						<span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">]</span>
				<span class="token punctuation">)</span>
			<span class="token punctuation">)</span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ds,ms,fs,$,Kt='<img src="/tree.png" alt="main_dart_tree.png"/>',vs,g,$t="StatefulWidget",gs,G,Gt="맨 처음 Widget Tree와 Element Tree가 만들어지는 과정에 대해서는 이제 어느정도 이해했습니다.",ws,Q,Qt="하지만 StatefulWidget 처럼 상태가 변하는 Widget이 어떻게 동작하는지는 설명하고있지 않습니다.",xs,Z,Zt="StatefulWidget은 StatelessWidget과는 다르게 build 메서드가 아닌 createState 메서드를 overriding 합니다.",Cs,J,ys,Qa=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">MyHomePage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token class-name">MyHomePage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">final</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyHomePage</span><span class="token punctuation">></span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_MyHomePageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> _MyHomePageState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyHomePage</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
	int _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// final이 아닙니다!</span>

	<span class="token keyword">void</span> <span class="token function">_increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			_counter<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,_s,X,Jt="StatefulWidget은 Element뿐만 아니라 StateObject도 함께 만들어 Element로 하여금 상태의 변화를 감지하고 효율적으로 UI를 업데이트할 수 있도록 합니다.",hs,Y,Xt="state가 변할 때는 다음과 같은 과정으로 Tree가 업데이트됩니다.",Ws,nn,Yt="예를 들어 _counter 의 값이 0 에서 1로 바뀌는 상황이라고 가정해봅시다.",bs,Ps,Es,sn,na="<li><p>유저의 클릭으로 <strong>_increment</strong>메서드가 호출됩니다.</p></li> <li><p>state object의 <strong>_counter값이 0 에서 1로 업데이트</strong> 됩니다.</p></li> <li><p><strong>state object</strong>는 해당 <strong>element를 오염된(dirty) 상태로 마킹</strong>합니다. 다음 프레임에서 업데이트가 필요하다고 Flutter에게 알리기 위함입니다.</p></li> <li><p>stateful element는 <strong>state object에게 업데이트된 _counter값을 가지고 새로운 Widget을 만들라고 요청</strong>합니다.</p></li> <li><p><strong>새롭게 만들어진 Widget</strong>은 <strong>기존 widget이 있던 위치에 mount</strong>됩니다.</p></li> <li><p>기존 widget을 참조하고 있던 <strong>element는 새롭게 mount된 widget을 참조</strong>합니다(기존 widget과 새로운 widget이 같은 타입이므로 <strong>element는 그대로 유지</strong>됩니다.)</p></li>",Ss,Ts,Hs,w,sa="코드 맛보기",Ms,tn,ta="Flutter가 어떤 식으로 동작하는지 어느정도 파악하긴 했지만 아직은 뜬구름 잡는 느낌이 있습니다.",Bs,an,aa="Flutter가 알아서 해준다 라고 알고 있는 것 보다는 실제 로직이 포함된 코드를 보면 이해하는데 훨씬 도움이 될 것 같습니다.",Fs,en,ea="앱의 진입점 역할을 해주는 runApp함수를 따라가보도록 하겠습니다.",Ls,x,pa="runApp",js,pn,Rs,Za=`<code class="language-dart"><span class="token keyword">void</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> app<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> <span class="token class-name">WidgetBinding</span> binding <span class="token operator">=</span> <span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_runWidget</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span><span class="token function">wrapWithDefaultView</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">,</span> binding<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'runApp'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,As,ln,la="WidgetBinding은 Flutter engine과 widget layer를 이어주는 역할을 하는 클래스입니다.",Os,on,oa="runApp은 _runWidget을 호출하고있습니다. _runWidget을 확인해봅시다.",qs,C,ca="_runWidget",Ds,cn,Us,Ja=`<code class="language-dart"><span class="token keyword">void</span> <span class="token function">_runWidget</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> app<span class="token punctuation">,</span> <span class="token class-name">WidgetsBinding</span> binding<span class="token punctuation">,</span> <span class="token class-name">String</span> debugEntryPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span><span class="token function">debugCheckZone</span><span class="token punctuation">(</span>debugEntryPoint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  binding
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">scheduleAttachRootWidget</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">scheduleWarmUpFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Vs,un,ua="runApp에서 받아온 binding의 scheduleAttachRootWidget 메서드와 scheduleWarmUpFrame을 순차적으로 부르고 있군요.",zs,kn,ia="메서드 이름에서 유추해보면 Widget Tree에 root widget을 넣도록 스케줄 하고 Element Tree를 만드는 것 같습니다.",Ns,rn,ka="binding의 해당 메서드들을 확인해보도록 하겠습니다.",Is,y,ra="scheduleAttachRootWidget",Ks,dn,$s,Xa=`<code class="language-dart"><span class="token keyword">mixin</span> <span class="token class-name">WidgetsBinding</span> <span class="token keyword">on</span> <span class="token class-name">BindingBase</span><span class="token punctuation">,</span> <span class="token class-name">ServicesBinding</span><span class="token punctuation">,</span> <span class="token class-name">SchedulerBinding</span><span class="token punctuation">,</span> <span class="token class-name">GestureBinding</span><span class="token punctuation">,</span> <span class="token class-name">RendererBinding</span><span class="token punctuation">,</span> <span class="token class-name">SemanticsBinding</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token metadata function">@protected</span>
	<span class="token keyword">void</span> <span class="token function">scheduleAttachRootWidget</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> rootWidget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">attachRootWidget</span><span class="token punctuation">(</span>rootWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">attachRootWidget</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> rootWidget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">attachToBuildOwner</span><span class="token punctuation">(</span><span class="token class-name">RootWidget</span><span class="token punctuation">(</span>
			debugShortDescription<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'[root]'</span></span><span class="token punctuation">,</span>
			child<span class="token punctuation">:</span> rootWidget<span class="token punctuation">,</span>
		<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">attachToBuildOwner</span><span class="token punctuation">(</span><span class="token class-name">RootWidget</span> widget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">final</span> bool isBootstrapFrame <span class="token operator">=</span> rootElement <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		_readyToProduceFrames <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		_rootElement <span class="token operator">=</span> widget<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>buildOwner<span class="token operator">!</span><span class="token punctuation">,</span> rootElement <span class="token operator">as</span> <span class="token class-name">RootElement</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>isBootstrapFrame<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token class-name">SchedulerBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">ensureVisualUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Gs,mn,da="<strong>WidgetsBinding</strong>은 여러 Binding들의 mixin이었군요.",Qs,fn,ma="<strong>scheduleAttachRootWidget</strong> 메서드는 Timer의 콜백으로 <strong>attachRootWidget</strong>메서드를 호출합니다.",Zs,vn,fa="일정 시간이 지난 후 콜백이 실행되는데 기본값은 0초로 설정되어있습니다. 즉 가능한 빨리 실행이 될 것으로 예상할 수 있습니다.",Js,gn,va="attachRootWidget은 다시 <strong>attachToBuildOwner</strong>메서드를 호출합니다.",Xs,wn,ga="attachToBuildOwner는 root widget을 buildOwner에 root element로 넣어주고,",Ys,xn,wa="SchedulerBinding.instance 의 <strong>ensureVisualUpdate</strong>메서드를 호출합니다.",nt,Cn,xa="참고로 BuildOwner는 Widget framework를 관리해주는 클래스입니다. 보통 위처럼 binding이 property로 가지고 있고 처음 operator system에 의해 사용되는 클래스입니다.",st,yn,Ca="<strong>ensureVisualUpdate</strong> 를 확인해보도록 하겠습니다.",tt,_,ya="scheduleWarmUpFrame",at,_n,et,Ya=`<code class="language-dart"><span class="token keyword">mixin</span> <span class="token class-name">SchedulerBinding</span> <span class="token keyword">on</span> <span class="token class-name">BindingBase</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">void</span> <span class="token function">ensureVisualUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">switch</span><span class="token punctuation">(</span>schedulerPhase<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">case</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>idle<span class="token punctuation">:</span>
			<span class="token keyword">case</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>postFrameCallbacks<span class="token punctuation">:</span>
				<span class="token function">scheduleFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token keyword">case</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>transientCallbacks<span class="token punctuation">:</span>
			<span class="token keyword">case</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>midFrameMicrotasks<span class="token punctuation">:</span>
			<span class="token keyword">case</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>persistentCallbacks<span class="token punctuation">:</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">scheduleFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>_hasSchedulerFrame <span class="token operator">||</span> <span class="token operator">!</span>framesEnabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
		<span class="token function">ensureFrameCallbacksRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		platformDispatcher<span class="token punctuation">.</span><span class="token function">schedulFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_hasScheduledFrame <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,pt,hn,_a="ensureVisualUpdate메서드는 SchedulerBinding mixin의 메서드입니다.",lt,Wn,ha="scheduler의 단계(phase)에 따라 visual udpate를 해주는 듯 합니다.",ot,bn,Wa="idle 혹은 postFrameCallbacks 단계일 경우 scheduleFrame을 호출합니다.",ct,Pn,ba="scheduleFrame메서드는 platformDispatcher의 scheduleFrame()을 호출하고 있습니다.",ut,h,Pa="scheduleFrame",it,En,kt,ne=`<code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">PlatformDispatcher</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">void</span> <span class="token function">scheduleFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_scheduleFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token metadata function">@Native</span><span class="token operator">&lt;</span><span class="token class-name">Void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>symbol<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">'PlatformConfigurationNativeApi::ScheduleFrame'</span></span><span class="token punctuation">)</span>
	<span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_scheduleFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,rt,Sn,Ea="scheduleFrame메서드는 결국 PlatformDispatcher 클래스의 external 메서드였군요.",dt,Tn,Sa="OS에 따라 다른 함수를 받아와서 실행시킬 것으로 예상됩니다.",mt,W,Ta="Element",ft,Hn,vt,se=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Element</span> <span class="token keyword">extends</span> <span class="token class-name">DiagnosticableTree</span> <span class="token keyword">implements</span> <span class="token class-name">BuildContext</span> <span class="token punctuation">&#123;</span>
	<span class="token metadata function">@override</span>
	<span class="token class-name">Widget</span> <span class="token keyword">get</span> widget <span class="token operator">=</span><span class="token operator">></span> _widget<span class="token operator">!</span><span class="token punctuation">;</span>
	<span class="token class-name">Widget</span><span class="token operator">?</span> _widget<span class="token punctuation">;</span>

	<span class="token metadata function">@override</span>
	bool <span class="token keyword">get</span> mounted <span class="token operator">=</span><span class="token operator">></span> _widget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>


	<span class="token metadata function">@override</span>
	<span class="token class-name">BuildOwner</span><span class="token operator">?</span> <span class="token keyword">get</span> owner <span class="token operator">=</span><span class="token operator">></span> _owner<span class="token punctuation">;</span>
	<span class="token class-name">BuildOwner</span><span class="token operator">?</span> _owner<span class="token punctuation">;</span>

	<span class="token class-name">BuildScope</span> <span class="token keyword">get</span> buildScope <span class="token operator">=</span><span class="token operator">></span> _parentBuildScope<span class="token operator">!</span><span class="token punctuation">;</span>
	<span class="token class-name">BuildScope</span><span class="token operator">?</span> _parentBuildScope<span class="token punctuation">;</span>

	<span class="token keyword">void</span> <span class="token function">visitChildren</span><span class="token punctuation">(</span><span class="token class-name">ElementVisitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token class-name">Element</span><span class="token operator">?</span> <span class="token function">updateChild</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token operator">?</span> child<span class="token punctuation">,</span> <span class="token class-name">Widget</span><span class="token operator">?</span> newWidget<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> oldChildren<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">></span></span> newWidget<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span><span class="token operator">?</span> forgottenChildren<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token operator">?</span> slots<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token operator">?</span> parent<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">covariant</span> <span class="token class-name">Widget</span> newWidget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">updateSlotForChild</span><span class="token punctuation">(</span><span class="token class-name">Element</span> child<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">updateSlot</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">_updateDepth</span><span class="token punctuation">(</span>int parentDepth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token class-name">Element</span> <span class="token function">inflateWidget</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> newWidget<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">forgetChild</span><span class="token punctuation">(</span><span class="token class-name">Element</span> child<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	bool <span class="token keyword">get</span> dirty <span class="token operator">=</span><span class="token operator">></span> _dirty<span class="token punctuation">;</span>
	bool _dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">markNeedsBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">rebuild</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>bool force <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">performRebuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,gt,Mn,Ha="(한 눈에 보기 위해 생략된 부분이 많습니다.)",wt,Bn,Ma="위처럼 Element 클래스에는 mount, update, markNeedsBuild 등의 메서드들이 실제로 포함되어 있습니다.",xt,Fn,Ba="그림에서 봤던 것들의 실제 로직을 코드로 볼 수 있습니다.",Ct,Ln,Fa="맛보기니까 자세하게 다루진 않겠습니다(<del>귀찮아서가 아닙니다</del>).",yt,b,La="Sources",_t,jn,ja='<li><p><a href="https://docs.flutter.dev/resources/architectural-overview#widgets" rel="nofollow">Flutter architecture overview - widgets</a></p></li> <li><p><a href="https://docs.flutter.dev/resources/inside-flutter" rel="nofollow">inside flutter</a></p></li> <li><p><a href="https://github.com/flutter/flutter/blob/main/packages/flutter/lib/src/widgets/framework.dart#L2838" rel="nofollow">BuildOwner</a></p></li> <li><p><a href="https://github.com/flutter/flutter/blob/main/packages/flutter/lib/src/widgets/binding.dart#L409" rel="nofollow">WidgetBinding</a></p></li> <li><p><a href="https://github.com/flutter/flutter/blob/main/packages/flutter/lib/src/widgets/framework.dart#L3473" rel="nofollow">Element</a></p></li>';return{c(){i=e("nav"),i.innerHTML=Wt,Rn=l(),P=e("p"),P.textContent=bt,An=l(),E=e("p"),E.textContent=Pt,On=l(),S=e("pre"),qn=new k(!1),Dn=l(),m=e("h1"),m.textContent=Et,Un=l(),T=e("p"),T.textContent=St,Vn=l(),H=e("ol"),H.innerHTML=Tt,zn=l(),M=e("p"),M.textContent=Ht,Nn=l(),B=e("p"),B.textContent=Mt,In=l(),F=e("pre"),Kn=new k(!1),$n=l(),L=e("p"),L.textContent=Bt,Gn=l(),j=e("p"),j.textContent=Ft,Qn=l(),f=e("h2"),f.textContent=Lt,Zn=l(),R=e("p"),R.innerHTML=jt,Jn=l(),A=e("blockquote"),A.innerHTML=Rt,Xn=l(),O=e("p"),O.textContent=At,Yn=l(),v=e("h2"),v.textContent=Ot,ns=l(),q=e("p"),q.textContent=qt,ss=l(),D=e("p"),D.textContent=Dt,ts=l(),U=e("p"),U.innerHTML=Ut,as=l(),V=e("p"),V.innerHTML=Vt,es=l(),z=e("p"),z.textContent=zt,ps=l(),ls=e("hr"),os=l(),N=e("ol"),N.innerHTML=Nt,cs=l(),us=e("hr"),is=l(),I=e("p"),I.textContent=It,ks=l(),K=e("pre"),rs=new k(!1),ds=l(),ms=e("hr"),fs=l(),$=e("p"),$.innerHTML=Kt,vs=l(),g=e("h1"),g.textContent=$t,gs=l(),G=e("p"),G.textContent=Gt,ws=l(),Q=e("p"),Q.textContent=Qt,xs=l(),Z=e("p"),Z.textContent=Zt,Cs=l(),J=e("pre"),ys=new k(!1),_s=l(),X=e("p"),X.textContent=Jt,hs=l(),Y=e("p"),Y.textContent=Xt,Ws=l(),nn=e("p"),nn.textContent=Yt,bs=l(),Ps=e("hr"),Es=l(),sn=e("ol"),sn.innerHTML=na,Ss=l(),Ts=e("hr"),Hs=l(),w=e("h1"),w.textContent=sa,Ms=l(),tn=e("p"),tn.textContent=ta,Bs=l(),an=e("p"),an.textContent=aa,Fs=l(),en=e("p"),en.textContent=ea,Ls=l(),x=e("h2"),x.textContent=pa,js=l(),pn=e("pre"),Rs=new k(!1),As=l(),ln=e("p"),ln.textContent=la,Os=l(),on=e("p"),on.textContent=oa,qs=l(),C=e("h2"),C.textContent=ca,Ds=l(),cn=e("pre"),Us=new k(!1),Vs=l(),un=e("p"),un.textContent=ua,zs=l(),kn=e("p"),kn.textContent=ia,Ns=l(),rn=e("p"),rn.textContent=ka,Is=l(),y=e("h2"),y.textContent=ra,Ks=l(),dn=e("pre"),$s=new k(!1),Gs=l(),mn=e("p"),mn.innerHTML=da,Qs=l(),fn=e("p"),fn.innerHTML=ma,Zs=l(),vn=e("p"),vn.textContent=fa,Js=l(),gn=e("p"),gn.innerHTML=va,Xs=l(),wn=e("p"),wn.textContent=ga,Ys=l(),xn=e("p"),xn.innerHTML=wa,nt=l(),Cn=e("p"),Cn.textContent=xa,st=l(),yn=e("p"),yn.innerHTML=Ca,tt=l(),_=e("h2"),_.textContent=ya,at=l(),_n=e("pre"),et=new k(!1),pt=l(),hn=e("p"),hn.textContent=_a,lt=l(),Wn=e("p"),Wn.textContent=ha,ot=l(),bn=e("p"),bn.textContent=Wa,ct=l(),Pn=e("p"),Pn.textContent=ba,ut=l(),h=e("h2"),h.textContent=Pa,it=l(),En=e("pre"),kt=new k(!1),rt=l(),Sn=e("p"),Sn.textContent=Ea,dt=l(),Tn=e("p"),Tn.textContent=Sa,mt=l(),W=e("h2"),W.textContent=Ta,ft=l(),Hn=e("pre"),vt=new k(!1),gt=l(),Mn=e("p"),Mn.textContent=Ha,wt=l(),Bn=e("p"),Bn.textContent=Ma,xt=l(),Fn=e("p"),Fn.textContent=Ba,Ct=l(),Ln=e("p"),Ln.innerHTML=Fa,yt=l(),b=e("h1"),b.textContent=La,_t=l(),jn=e("ol"),jn.innerHTML=ja,this.h()},l(n){i=p(n,"NAV",{class:!0,"data-svelte-h":!0}),c(i)!=="svelte-11ifp4g"&&(i.innerHTML=Wt),Rn=o(n),P=p(n,"P",{"data-svelte-h":!0}),c(P)!=="svelte-exckli"&&(P.textContent=bt),An=o(n),E=p(n,"P",{"data-svelte-h":!0}),c(E)!=="svelte-1heoych"&&(E.textContent=Pt),On=o(n),S=p(n,"PRE",{class:!0});var t=r(S);qn=d(t,!1),t.forEach(s),Dn=o(n),m=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-imwk68"&&(m.textContent=Et),Un=o(n),T=p(n,"P",{"data-svelte-h":!0}),c(T)!=="svelte-15jn3xs"&&(T.textContent=St),Vn=o(n),H=p(n,"OL",{"data-svelte-h":!0}),c(H)!=="svelte-1sl3w9a"&&(H.innerHTML=Tt),zn=o(n),M=p(n,"P",{"data-svelte-h":!0}),c(M)!=="svelte-1unkqs1"&&(M.textContent=Ht),Nn=o(n),B=p(n,"P",{"data-svelte-h":!0}),c(B)!=="svelte-1copesk"&&(B.textContent=Mt),In=o(n),F=p(n,"PRE",{class:!0});var Ra=r(F);Kn=d(Ra,!1),Ra.forEach(s),$n=o(n),L=p(n,"P",{"data-svelte-h":!0}),c(L)!=="svelte-ivjlan"&&(L.textContent=Bt),Gn=o(n),j=p(n,"P",{"data-svelte-h":!0}),c(j)!=="svelte-1wu4ney"&&(j.textContent=Ft),Qn=o(n),f=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-785ufy"&&(f.textContent=Lt),Zn=o(n),R=p(n,"P",{"data-svelte-h":!0}),c(R)!=="svelte-rviv98"&&(R.innerHTML=jt),Jn=o(n),A=p(n,"BLOCKQUOTE",{"data-svelte-h":!0}),c(A)!=="svelte-5jqp31"&&(A.innerHTML=Rt),Xn=o(n),O=p(n,"P",{"data-svelte-h":!0}),c(O)!=="svelte-1u27ylq"&&(O.textContent=At),Yn=o(n),v=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-1gpnq9m"&&(v.textContent=Ot),ns=o(n),q=p(n,"P",{"data-svelte-h":!0}),c(q)!=="svelte-1fyoqg0"&&(q.textContent=qt),ss=o(n),D=p(n,"P",{"data-svelte-h":!0}),c(D)!=="svelte-1jxgucf"&&(D.textContent=Dt),ts=o(n),U=p(n,"P",{"data-svelte-h":!0}),c(U)!=="svelte-17j669u"&&(U.innerHTML=Ut),as=o(n),V=p(n,"P",{"data-svelte-h":!0}),c(V)!=="svelte-8g9vor"&&(V.innerHTML=Vt),es=o(n),z=p(n,"P",{"data-svelte-h":!0}),c(z)!=="svelte-dfux4k"&&(z.textContent=zt),ps=o(n),ls=p(n,"HR",{}),os=o(n),N=p(n,"OL",{"data-svelte-h":!0}),c(N)!=="svelte-f0fa9a"&&(N.innerHTML=Nt),cs=o(n),us=p(n,"HR",{}),is=o(n),I=p(n,"P",{"data-svelte-h":!0}),c(I)!=="svelte-1l4vj3b"&&(I.textContent=It),ks=o(n),K=p(n,"PRE",{class:!0});var Aa=r(K);rs=d(Aa,!1),Aa.forEach(s),ds=o(n),ms=p(n,"HR",{}),fs=o(n),$=p(n,"P",{"data-svelte-h":!0}),c($)!=="svelte-18o9iqn"&&($.innerHTML=Kt),vs=o(n),g=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-139a9jg"&&(g.textContent=$t),gs=o(n),G=p(n,"P",{"data-svelte-h":!0}),c(G)!=="svelte-nfagrj"&&(G.textContent=Gt),ws=o(n),Q=p(n,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-1m9hmj0"&&(Q.textContent=Qt),xs=o(n),Z=p(n,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-h97eon"&&(Z.textContent=Zt),Cs=o(n),J=p(n,"PRE",{class:!0});var Oa=r(J);ys=d(Oa,!1),Oa.forEach(s),_s=o(n),X=p(n,"P",{"data-svelte-h":!0}),c(X)!=="svelte-l1vtur"&&(X.textContent=Jt),hs=o(n),Y=p(n,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-1mamlbj"&&(Y.textContent=Xt),Ws=o(n),nn=p(n,"P",{"data-svelte-h":!0}),c(nn)!=="svelte-1lj1fkm"&&(nn.textContent=Yt),bs=o(n),Ps=p(n,"HR",{}),Es=o(n),sn=p(n,"OL",{"data-svelte-h":!0}),c(sn)!=="svelte-ldf7yq"&&(sn.innerHTML=na),Ss=o(n),Ts=p(n,"HR",{}),Hs=o(n),w=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(w)!=="svelte-4rnzs1"&&(w.textContent=sa),Ms=o(n),tn=p(n,"P",{"data-svelte-h":!0}),c(tn)!=="svelte-2juo64"&&(tn.textContent=ta),Bs=o(n),an=p(n,"P",{"data-svelte-h":!0}),c(an)!=="svelte-n48z6b"&&(an.textContent=aa),Fs=o(n),en=p(n,"P",{"data-svelte-h":!0}),c(en)!=="svelte-8xd4t3"&&(en.textContent=ea),Ls=o(n),x=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(x)!=="svelte-7lzn5a"&&(x.textContent=pa),js=o(n),pn=p(n,"PRE",{class:!0});var qa=r(pn);Rs=d(qa,!1),qa.forEach(s),As=o(n),ln=p(n,"P",{"data-svelte-h":!0}),c(ln)!=="svelte-xdybs6"&&(ln.textContent=la),Os=o(n),on=p(n,"P",{"data-svelte-h":!0}),c(on)!=="svelte-kx492v"&&(on.textContent=oa),qs=o(n),C=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-rc0lxa"&&(C.textContent=ca),Ds=o(n),cn=p(n,"PRE",{class:!0});var Da=r(cn);Us=d(Da,!1),Da.forEach(s),Vs=o(n),un=p(n,"P",{"data-svelte-h":!0}),c(un)!=="svelte-7ql5ix"&&(un.textContent=ua),zs=o(n),kn=p(n,"P",{"data-svelte-h":!0}),c(kn)!=="svelte-mkzcnj"&&(kn.textContent=ia),Ns=o(n),rn=p(n,"P",{"data-svelte-h":!0}),c(rn)!=="svelte-1mv5jn"&&(rn.textContent=ka),Is=o(n),y=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(y)!=="svelte-qtievi"&&(y.textContent=ra),Ks=o(n),dn=p(n,"PRE",{class:!0});var Ua=r(dn);$s=d(Ua,!1),Ua.forEach(s),Gs=o(n),mn=p(n,"P",{"data-svelte-h":!0}),c(mn)!=="svelte-1wl9qt9"&&(mn.innerHTML=da),Qs=o(n),fn=p(n,"P",{"data-svelte-h":!0}),c(fn)!=="svelte-107pke6"&&(fn.innerHTML=ma),Zs=o(n),vn=p(n,"P",{"data-svelte-h":!0}),c(vn)!=="svelte-gwggkh"&&(vn.textContent=fa),Js=o(n),gn=p(n,"P",{"data-svelte-h":!0}),c(gn)!=="svelte-hqihyc"&&(gn.innerHTML=va),Xs=o(n),wn=p(n,"P",{"data-svelte-h":!0}),c(wn)!=="svelte-651anl"&&(wn.textContent=ga),Ys=o(n),xn=p(n,"P",{"data-svelte-h":!0}),c(xn)!=="svelte-1ieehmm"&&(xn.innerHTML=wa),nt=o(n),Cn=p(n,"P",{"data-svelte-h":!0}),c(Cn)!=="svelte-1iq88jq"&&(Cn.textContent=xa),st=o(n),yn=p(n,"P",{"data-svelte-h":!0}),c(yn)!=="svelte-1cgl32l"&&(yn.innerHTML=Ca),tt=o(n),_=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(_)!=="svelte-ga2ati"&&(_.textContent=ya),at=o(n),_n=p(n,"PRE",{class:!0});var Va=r(_n);et=d(Va,!1),Va.forEach(s),pt=o(n),hn=p(n,"P",{"data-svelte-h":!0}),c(hn)!=="svelte-1br4vp7"&&(hn.textContent=_a),lt=o(n),Wn=p(n,"P",{"data-svelte-h":!0}),c(Wn)!=="svelte-roa2g0"&&(Wn.textContent=ha),ot=o(n),bn=p(n,"P",{"data-svelte-h":!0}),c(bn)!=="svelte-m6sm2c"&&(bn.textContent=Wa),ct=o(n),Pn=p(n,"P",{"data-svelte-h":!0}),c(Pn)!=="svelte-1z17im"&&(Pn.textContent=ba),ut=o(n),h=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(h)!=="svelte-1hjcz0m"&&(h.textContent=Pa),it=o(n),En=p(n,"PRE",{class:!0});var za=r(En);kt=d(za,!1),za.forEach(s),rt=o(n),Sn=p(n,"P",{"data-svelte-h":!0}),c(Sn)!=="svelte-1ytmpos"&&(Sn.textContent=Ea),dt=o(n),Tn=p(n,"P",{"data-svelte-h":!0}),c(Tn)!=="svelte-gmkku5"&&(Tn.textContent=Sa),mt=o(n),W=p(n,"H2",{id:!0,"data-svelte-h":!0}),c(W)!=="svelte-1ybzd74"&&(W.textContent=Ta),ft=o(n),Hn=p(n,"PRE",{class:!0});var Na=r(Hn);vt=d(Na,!1),Na.forEach(s),gt=o(n),Mn=p(n,"P",{"data-svelte-h":!0}),c(Mn)!=="svelte-1lvz6ay"&&(Mn.textContent=Ha),wt=o(n),Bn=p(n,"P",{"data-svelte-h":!0}),c(Bn)!=="svelte-1501x3u"&&(Bn.textContent=Ma),xt=o(n),Fn=p(n,"P",{"data-svelte-h":!0}),c(Fn)!=="svelte-qb1l1j"&&(Fn.textContent=Ba),Ct=o(n),Ln=p(n,"P",{"data-svelte-h":!0}),c(Ln)!=="svelte-rm7g0v"&&(Ln.innerHTML=Fa),yt=o(n),b=p(n,"H1",{id:!0,"data-svelte-h":!0}),c(b)!=="svelte-22jvrw"&&(b.textContent=La),_t=o(n),jn=p(n,"OL",{"data-svelte-h":!0}),c(jn)!=="svelte-cabf97"&&(jn.innerHTML=ja),this.h()},h(){u(i,"class","toc"),qn.a=null,u(S,"class","language-dart"),u(m,"id","element-createelement"),Kn.a=null,u(F,"class","language-dart"),u(f,"id","element"),u(v,"id","element는-widget이랑-무슨-관계지"),rs.a=null,u(K,"class","language-dart"),u(g,"id","statefulwidget"),ys.a=null,u(J,"class","language-dart"),u(w,"id","코드-맛보기"),u(x,"id","runapp"),Rs.a=null,u(pn,"class","language-dart"),u(C,"id","_runwidget"),Us.a=null,u(cn,"class","language-dart"),u(y,"id","scheduleattachrootwidget"),$s.a=null,u(dn,"class","language-dart"),u(_,"id","schedulewarmupframe"),et.a=null,u(_n,"class","language-dart"),u(h,"id","scheduleframe"),kt.a=null,u(En,"class","language-dart"),u(W,"id","element-1"),vt.a=null,u(Hn,"class","language-dart"),u(b,"id","sources")},m(n,t){a(n,i,t),a(n,Rn,t),a(n,P,t),a(n,An,t),a(n,E,t),a(n,On,t),a(n,S,t),qn.m(Ka,S),a(n,Dn,t),a(n,m,t),a(n,Un,t),a(n,T,t),a(n,Vn,t),a(n,H,t),a(n,zn,t),a(n,M,t),a(n,Nn,t),a(n,B,t),a(n,In,t),a(n,F,t),Kn.m($a,F),a(n,$n,t),a(n,L,t),a(n,Gn,t),a(n,j,t),a(n,Qn,t),a(n,f,t),a(n,Zn,t),a(n,R,t),a(n,Jn,t),a(n,A,t),a(n,Xn,t),a(n,O,t),a(n,Yn,t),a(n,v,t),a(n,ns,t),a(n,q,t),a(n,ss,t),a(n,D,t),a(n,ts,t),a(n,U,t),a(n,as,t),a(n,V,t),a(n,es,t),a(n,z,t),a(n,ps,t),a(n,ls,t),a(n,os,t),a(n,N,t),a(n,cs,t),a(n,us,t),a(n,is,t),a(n,I,t),a(n,ks,t),a(n,K,t),rs.m(Ga,K),a(n,ds,t),a(n,ms,t),a(n,fs,t),a(n,$,t),a(n,vs,t),a(n,g,t),a(n,gs,t),a(n,G,t),a(n,ws,t),a(n,Q,t),a(n,xs,t),a(n,Z,t),a(n,Cs,t),a(n,J,t),ys.m(Qa,J),a(n,_s,t),a(n,X,t),a(n,hs,t),a(n,Y,t),a(n,Ws,t),a(n,nn,t),a(n,bs,t),a(n,Ps,t),a(n,Es,t),a(n,sn,t),a(n,Ss,t),a(n,Ts,t),a(n,Hs,t),a(n,w,t),a(n,Ms,t),a(n,tn,t),a(n,Bs,t),a(n,an,t),a(n,Fs,t),a(n,en,t),a(n,Ls,t),a(n,x,t),a(n,js,t),a(n,pn,t),Rs.m(Za,pn),a(n,As,t),a(n,ln,t),a(n,Os,t),a(n,on,t),a(n,qs,t),a(n,C,t),a(n,Ds,t),a(n,cn,t),Us.m(Ja,cn),a(n,Vs,t),a(n,un,t),a(n,zs,t),a(n,kn,t),a(n,Ns,t),a(n,rn,t),a(n,Is,t),a(n,y,t),a(n,Ks,t),a(n,dn,t),$s.m(Xa,dn),a(n,Gs,t),a(n,mn,t),a(n,Qs,t),a(n,fn,t),a(n,Zs,t),a(n,vn,t),a(n,Js,t),a(n,gn,t),a(n,Xs,t),a(n,wn,t),a(n,Ys,t),a(n,xn,t),a(n,nt,t),a(n,Cn,t),a(n,st,t),a(n,yn,t),a(n,tt,t),a(n,_,t),a(n,at,t),a(n,_n,t),et.m(Ya,_n),a(n,pt,t),a(n,hn,t),a(n,lt,t),a(n,Wn,t),a(n,ot,t),a(n,bn,t),a(n,ct,t),a(n,Pn,t),a(n,ut,t),a(n,h,t),a(n,it,t),a(n,En,t),kt.m(ne,En),a(n,rt,t),a(n,Sn,t),a(n,dt,t),a(n,Tn,t),a(n,mt,t),a(n,W,t),a(n,ft,t),a(n,Hn,t),vt.m(se,Hn),a(n,gt,t),a(n,Mn,t),a(n,wt,t),a(n,Bn,t),a(n,xt,t),a(n,Fn,t),a(n,Ct,t),a(n,Ln,t),a(n,yt,t),a(n,b,t),a(n,_t,t),a(n,jn,t)},p:ht,i:ht,o:ht,d(n){n&&(s(i),s(Rn),s(P),s(An),s(E),s(On),s(S),s(Dn),s(m),s(Un),s(T),s(Vn),s(H),s(zn),s(M),s(Nn),s(B),s(In),s(F),s($n),s(L),s(Gn),s(j),s(Qn),s(f),s(Zn),s(R),s(Jn),s(A),s(Xn),s(O),s(Yn),s(v),s(ns),s(q),s(ss),s(D),s(ts),s(U),s(as),s(V),s(es),s(z),s(ps),s(ls),s(os),s(N),s(cs),s(us),s(is),s(I),s(ks),s(K),s(ds),s(ms),s(fs),s($),s(vs),s(g),s(gs),s(G),s(ws),s(Q),s(xs),s(Z),s(Cs),s(J),s(_s),s(X),s(hs),s(Y),s(Ws),s(nn),s(bs),s(Ps),s(Es),s(sn),s(Ss),s(Ts),s(Hs),s(w),s(Ms),s(tn),s(Bs),s(an),s(Fs),s(en),s(Ls),s(x),s(js),s(pn),s(As),s(ln),s(Os),s(on),s(qs),s(C),s(Ds),s(cn),s(Vs),s(un),s(zs),s(kn),s(Ns),s(rn),s(Is),s(y),s(Ks),s(dn),s(Gs),s(mn),s(Qs),s(fn),s(Zs),s(vn),s(Js),s(gn),s(Xs),s(wn),s(Ys),s(xn),s(nt),s(Cn),s(st),s(yn),s(tt),s(_),s(at),s(_n),s(pt),s(hn),s(lt),s(Wn),s(ot),s(bn),s(ct),s(Pn),s(ut),s(h),s(it),s(En),s(rt),s(Sn),s(dt),s(Tn),s(mt),s(W),s(ft),s(Hn),s(gt),s(Mn),s(wt),s(Bn),s(xt),s(Fn),s(Ct),s(Ln),s(yt),s(b),s(_t),s(jn))}}}const ce={title:"new Flutter project의 main.dart 코드 파헤쳐보기(2)",description:"IDE를 이용해 만든 flutter project의 초기 main.dart 코드들을 보면서 StatelessWidget, StatefulWidget, key에 대해 알아봅니다.",author:"jack",date:"2024.09. 29.",published:!0,tags:["Flutter"]};class ue extends ae{constructor(i){super(),ee(this,i,null,pe,te,{})}}export{ue as default,ce as metadata};
