import{s as ue,n as Pt}from"./scheduler.CStkIgXY.js";import{S as re,i as ke,k as a,s as o,H as gt,l as p,v as c,b as l,n as bt,w as Lt,g as s,o as x,d as n}from"./index.DnVZObQy.js";function me(oe){let i,Tt='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#expression-and-statement">Expression and Statement</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#example-in-dart">Example in Dart</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#switch-statements">Switch statements</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#switch-expression">Switch expression</a></li></ol></li></ol>',K,u,Ht="Expression and Statement",Q,d,Dt="<p><strong>Expressions</strong> are <strong><em>evaluated</em></strong> and thus can be reduced to a single value</p> <p><strong>Statements</strong> are <strong><em>executed</em></strong>. Statements are basic building blocks of a program.</p>",V,f,Ot="위의 두 문장은 간결하게 expression과 statement의 차이를 표현합니다.",G,v,Mt="다음과 같이 도식화하여 기억하면 좋을 것 같습니다.",F,h,St="<strong>Expression</strong> - <strong>evaluated</strong>",W,C,qt="<strong>Statement</strong> - <strong>executed</strong>",Y,w,Nt="Dart의 공식문서에서 위의 용어를 사용하는 예시를 살펴보겠습니다.",J,r,At="Example in Dart",X,k,It="Switch statements",Z,_,Rt="<p>A switch statement <strong>evaluates</strong> a <strong>value expression</strong> against a series of cases. Each case clause is a pattern for the value to match against.</p> <p>You can use any kind of pattern for a case.</p> <p>When the value matches a case’s pattern, the <strong>case body</strong> <strong>executes</strong>. Non-empty case clauses jump to the end of the switch after completion.</p> <p>They do not require a break statement. Other valid ways to end a non-empty case clause are a continue, throw, or return statement.</p> <p>Use a ‘default’ of wildcard _ to execute code when no case clause matches.</p>",$,y,Ut="Switch 구문에 대해서 설명하는 글입니다.",tt,E,jt="statement와 expression을 명확하게 구분하여 사용하고 있는것을 볼 수 있습니다.",et,P,zt="statement(위의 경우 case body)는 execute(실행)되며 expression(위의 경우 a value)은 evaluate 되는것으로 명확하게 구분짓습니다.",st,g,Bt="예제를 보며 어떤 부분이 statement이고 어떤 부분이 expression이 되는지를 확인해 보겠습니다.",nt,b,at,le=`<code class="language-dart"><span class="token comment">// 이 문장을 하나의 statement라고 볼 수 있습니다. command 라는 식별자에 'OPEN' 을 할당하라는 명령을 수행합니다.</span>
<span class="token comment">//한편 'OPEN'은 'OPEN'이라는 값 자체로 evaluated 되었다고 생각하면 expression이라고 볼 수 있습니다.</span>
<span class="token keyword">var</span> command <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'OPEN'</span></span><span class="token punctuation">;</span> <span class="token comment">//</span>
<span class="token comment">// switch statement입니다. switch statement 안에서는 command가 각 case 와의 비교를 통해 어떤 함수가 실행될지를 정하게 됩니다.</span>
<span class="token comment">// 각각의 case들('CLOSED', 'PENDING', 'APPROVED', 'DENIED', 'OPEN')은</span>
<span class="token comment">// command와 마찬가지로 expression으로 볼 수 있습니다.</span>
<span class="token comment">// command가 case 일 경우 실행되는 각각의 함수들(executeClosed, executePending, executeApproved,</span>
<span class="token comment">// executeDenied, executeOpen, executeUnknown)은</span>
<span class="token comment">// statement로 볼 수 있습니다.</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'CLOSED'</span></span><span class="token punctuation">:</span> <span class="token comment">// 'CLOSED' is a expression</span>
		<span class="token function">executeClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// statement</span>
	<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'PENDING'</span></span><span class="token punctuation">:</span> <span class="token comment">// 'PENDING' is a expression</span>
		<span class="token function">executePending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// statement</span>
	<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'APPROVED'</span></span><span class="token punctuation">:</span> <span class="token comment">// 'APPROVED' is a expression</span>
		<span class="token function">executeApproved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// statement</span>
	<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'DENIED'</span></span><span class="token punctuation">:</span> <span class="token comment">// 'DENIED' is a expression</span>
		<span class="token function">executeDenied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// statement</span>
	<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">'OPEN'</span></span><span class="token punctuation">:</span> <span class="token comment">// 'OPEN' is a expression</span>
		<span class="token function">executeOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// statement</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token function">executeUnknown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// statement</span>
<span class="token punctuation">&#125;</span></code>`,pt,m,Kt="Switch expression",ot,L,Qt="Dart에서는 Switch를 statement뿐만 아니라 expression으로도 사용이 가능합니다.",lt,T,Vt="switch control flow 를 사용하여 가독성 있게 코드를 짤 수 있습니다.",ct,H,Gt="공식 문서의 설명부터 살펴보겠습니다.",it,D,Ft='<p>A switch <strong>expression</strong> <strong>produces a value</strong> based on the expression body of whichever case matches.</p> <p>You can use a switch expression wherever Dart allows expressions, except at the start of an expression statement<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>.</p>',ut,O,Wt="<p>The syntax of a switch expression differs from switch statement syntax.</p> <ol><li>Cases do not start with the case keyword.</li> <li>A case body is a single expression instead of a series of statements</li> <li>Each case must have a body; there is no implicit fallthrough for empty cases.</li> <li>Case patterns are separated from their bodies using =&gt; instead of :</li> <li>Cases are separated by , (and an optional trailing , is allowed)</li> <li>Default cases can only use <em>, instead of allowing both default and</em> .</li></ol>",rt,M,Yt="switch statement와 문법적인 차이와 기능적인 차이가 몇 가지 있습니다.",kt,S,Jt="<strong>문법적인 차이</strong>",mt,q,Xt="<li>각각의 case 구분 시 case 키워드를 사용하지 않습니다.</li> <li>각 case의 실행문 부분에 하나의 statement만 들어갈 수 있습니다.</li> <li>: 대신 =&gt; 을 사용합니다.</li> <li>각각의 케이스들을 comma(,) 을 이용해 구분합니다.</li> <li>switch statement의 경우 default, wildcard 를 둘 다 사용할 수 있지만 expression으로 사용 할 경우 wildcard만 사용할 수 있습니다.</li>",xt,N,Zt="<strong>기능적인 차이</strong>",dt,A,$t="<li>switch statement의 경우 case에 body가 없는 것이 허용됩니다. fallthrough 즉 다음케이스로 flow가 자연스럽게 넘어갑니다. 하지만 switch expression으로 사용할 경우 이 기능이 제한됩니다.</li>",ft,I,te="Dart에서 switch expression은 expression이 들어갈 수 있는 자리라면 어디든 들어갈 수 있지만 예외적으로 expression statement의 시작부분에는 사용하지 않습니다.",vt,R,ee="expression statement의 시작부분에 switch문을 사용하고자 한다면 expression이 아니라 statement를 사용하는 것이 훨씬 자연스럽습니다.",ht,U,se="switch expression의 사용 예제를 보겠습니다.",Ct,j,wt,ce=`<code class="language-dart"><span class="token comment">// token 변수에 switch statement를 사용해 값을 할당하는 코드입니다.</span>
<span class="token comment">// 각 case의 body들이 하나의 statement만으로 이루어져있으며 fallthorough 기능을 활용하고 있지 않습니다.</span>
<span class="token comment">// 각 case의 body들의 statement 부분에 코드가 중복되어 작성되어 있습니다. (token = ...)</span>
<span class="token comment">// state expression 을 이용해 좀 더 가독성 있는 코드로 바꿀 수 있을 것 같습니다.</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>charCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> slash <span class="token operator">||</span> star <span class="token operator">||</span> plus <span class="token operator">||</span> minus<span class="token punctuation">:</span> <span class="token comment">// Logical-or pattern</span>
		token <span class="token operator">=</span> <span class="token keyword">operator</span><span class="token punctuation">(</span>charCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> comma <span class="token operator">||</span> semicolon<span class="token punctuation">:</span> <span class="token comment">// Logical-or pattern</span>
		token <span class="token operator">=</span> <span class="token function">punctuation</span><span class="token punctuation">(</span>charCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token operator">>=</span> digit0 <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;=</span> digit9<span class="token punctuation">:</span> <span class="token comment">// Relational and logical-and patterns</span>
		token <span class="token operator">=</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">throw</span> <span class="token class-name">FormatException</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Invalid format'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,_t,z,yt,ie=`<code class="language-dart"><span class="token comment">// 각 case들이 comma(,)로 구분되며 각 case의 body에서 실행되는 statement들을 한눈에 볼 수 있습니다.</span>
<span class="token comment">// 하나의 값으로 evaluate되어 token에 값을 할당해줍니다.</span>
token <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>charCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	slash <span class="token operator">||</span> star <span class="token operator">||</span> plus <span class="token operator">||</span> minus <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">operator</span><span class="token punctuation">(</span>charCode<span class="token punctuation">)</span><span class="token punctuation">,</span>
	comma <span class="token operator">||</span> semicolon <span class="token operator">=</span><span class="token operator">></span> <span class="token function">punctuation</span><span class="token punctuation">(</span>charCode<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token operator">>=</span> digit0 <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;=</span> digit9 <span class="token operator">=</span><span class="token operator">></span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	_ <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">throw</span> <span class="token class-name">FormatException</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'Invalid format'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Et,B,ne='[1]: An expression statement is an expression used in a place where a statement is expected. The expression is evaluated and its result is discarded. Therefore it only makes sense only for expressions that make side effects, such as executing a function or updating a variable.<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement" rel="nofollow">: information_source:</a>';return{c(){i=a("nav"),i.innerHTML=Tt,K=o(),u=a("h1"),u.textContent=Ht,Q=o(),d=a("blockquote"),d.innerHTML=Dt,V=o(),f=a("p"),f.textContent=Ot,G=o(),v=a("p"),v.textContent=Mt,F=o(),h=a("p"),h.innerHTML=St,W=o(),C=a("p"),C.innerHTML=qt,Y=o(),w=a("p"),w.textContent=Nt,J=o(),r=a("h1"),r.textContent=At,X=o(),k=a("h2"),k.textContent=It,Z=o(),_=a("blockquote"),_.innerHTML=Rt,$=o(),y=a("p"),y.textContent=Ut,tt=o(),E=a("p"),E.textContent=jt,et=o(),P=a("p"),P.textContent=zt,st=o(),g=a("p"),g.textContent=Bt,nt=o(),b=a("pre"),at=new gt(!1),pt=o(),m=a("h2"),m.textContent=Kt,ot=o(),L=a("p"),L.textContent=Qt,lt=o(),T=a("p"),T.textContent=Vt,ct=o(),H=a("p"),H.textContent=Gt,it=o(),D=a("blockquote"),D.innerHTML=Ft,ut=o(),O=a("blockquote"),O.innerHTML=Wt,rt=o(),M=a("p"),M.textContent=Yt,kt=o(),S=a("p"),S.innerHTML=Jt,mt=o(),q=a("ol"),q.innerHTML=Xt,xt=o(),N=a("p"),N.innerHTML=Zt,dt=o(),A=a("ol"),A.innerHTML=$t,ft=o(),I=a("p"),I.textContent=te,vt=o(),R=a("p"),R.textContent=ee,ht=o(),U=a("p"),U.textContent=se,Ct=o(),j=a("pre"),wt=new gt(!1),_t=o(),z=a("pre"),yt=new gt(!1),Et=o(),B=a("p"),B.innerHTML=ne,this.h()},l(t){i=p(t,"NAV",{class:!0,"data-svelte-h":!0}),c(i)!=="svelte-1eu0vne"&&(i.innerHTML=Tt),K=l(t),u=p(t,"H1",{id:!0,"data-svelte-h":!0}),c(u)!=="svelte-4p54x8"&&(u.textContent=Ht),Q=l(t),d=p(t,"BLOCKQUOTE",{"data-svelte-h":!0}),c(d)!=="svelte-1ha1sag"&&(d.innerHTML=Dt),V=l(t),f=p(t,"P",{"data-svelte-h":!0}),c(f)!=="svelte-1fcyzzn"&&(f.textContent=Ot),G=l(t),v=p(t,"P",{"data-svelte-h":!0}),c(v)!=="svelte-76bke9"&&(v.textContent=Mt),F=l(t),h=p(t,"P",{"data-svelte-h":!0}),c(h)!=="svelte-11sc4pg"&&(h.innerHTML=St),W=l(t),C=p(t,"P",{"data-svelte-h":!0}),c(C)!=="svelte-kqp3db"&&(C.innerHTML=qt),Y=l(t),w=p(t,"P",{"data-svelte-h":!0}),c(w)!=="svelte-q448p0"&&(w.textContent=Nt),J=l(t),r=p(t,"H1",{id:!0,"data-svelte-h":!0}),c(r)!=="svelte-1v6kqi2"&&(r.textContent=At),X=l(t),k=p(t,"H2",{id:!0,"data-svelte-h":!0}),c(k)!=="svelte-1dqzdj"&&(k.textContent=It),Z=l(t),_=p(t,"BLOCKQUOTE",{"data-svelte-h":!0}),c(_)!=="svelte-1vwecyo"&&(_.innerHTML=Rt),$=l(t),y=p(t,"P",{"data-svelte-h":!0}),c(y)!=="svelte-rloduk"&&(y.textContent=Ut),tt=l(t),E=p(t,"P",{"data-svelte-h":!0}),c(E)!=="svelte-19khgey"&&(E.textContent=jt),et=l(t),P=p(t,"P",{"data-svelte-h":!0}),c(P)!=="svelte-6oy3lu"&&(P.textContent=zt),st=l(t),g=p(t,"P",{"data-svelte-h":!0}),c(g)!=="svelte-22ygyh"&&(g.textContent=Bt),nt=l(t),b=p(t,"PRE",{class:!0});var e=bt(b);at=Lt(e,!1),e.forEach(s),pt=l(t),m=p(t,"H2",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-1ul8zjb"&&(m.textContent=Kt),ot=l(t),L=p(t,"P",{"data-svelte-h":!0}),c(L)!=="svelte-elr2qt"&&(L.textContent=Qt),lt=l(t),T=p(t,"P",{"data-svelte-h":!0}),c(T)!=="svelte-5v8eiz"&&(T.textContent=Vt),ct=l(t),H=p(t,"P",{"data-svelte-h":!0}),c(H)!=="svelte-246tns"&&(H.textContent=Gt),it=l(t),D=p(t,"BLOCKQUOTE",{"data-svelte-h":!0}),c(D)!=="svelte-1r2caqp"&&(D.innerHTML=Ft),ut=l(t),O=p(t,"BLOCKQUOTE",{"data-svelte-h":!0}),c(O)!=="svelte-1eno1o6"&&(O.innerHTML=Wt),rt=l(t),M=p(t,"P",{"data-svelte-h":!0}),c(M)!=="svelte-o4qljj"&&(M.textContent=Yt),kt=l(t),S=p(t,"P",{"data-svelte-h":!0}),c(S)!=="svelte-152067v"&&(S.innerHTML=Jt),mt=l(t),q=p(t,"OL",{"data-svelte-h":!0}),c(q)!=="svelte-187fdlu"&&(q.innerHTML=Xt),xt=l(t),N=p(t,"P",{"data-svelte-h":!0}),c(N)!=="svelte-cdhagj"&&(N.innerHTML=Zt),dt=l(t),A=p(t,"OL",{"data-svelte-h":!0}),c(A)!=="svelte-lax1kf"&&(A.innerHTML=$t),ft=l(t),I=p(t,"P",{"data-svelte-h":!0}),c(I)!=="svelte-121g6wq"&&(I.textContent=te),vt=l(t),R=p(t,"P",{"data-svelte-h":!0}),c(R)!=="svelte-y93ez0"&&(R.textContent=ee),ht=l(t),U=p(t,"P",{"data-svelte-h":!0}),c(U)!=="svelte-50g5es"&&(U.textContent=se),Ct=l(t),j=p(t,"PRE",{class:!0});var ae=bt(j);wt=Lt(ae,!1),ae.forEach(s),_t=l(t),z=p(t,"PRE",{class:!0});var pe=bt(z);yt=Lt(pe,!1),pe.forEach(s),Et=l(t),B=p(t,"P",{"data-svelte-h":!0}),c(B)!=="svelte-1f9p040"&&(B.innerHTML=ne),this.h()},h(){x(i,"class","toc"),x(u,"id","expression-and-statement"),x(r,"id","example-in-dart"),x(k,"id","switch-statements"),at.a=null,x(b,"class","language-dart"),x(m,"id","switch-expression"),wt.a=null,x(j,"class","language-dart"),yt.a=null,x(z,"class","language-dart")},m(t,e){n(t,i,e),n(t,K,e),n(t,u,e),n(t,Q,e),n(t,d,e),n(t,V,e),n(t,f,e),n(t,G,e),n(t,v,e),n(t,F,e),n(t,h,e),n(t,W,e),n(t,C,e),n(t,Y,e),n(t,w,e),n(t,J,e),n(t,r,e),n(t,X,e),n(t,k,e),n(t,Z,e),n(t,_,e),n(t,$,e),n(t,y,e),n(t,tt,e),n(t,E,e),n(t,et,e),n(t,P,e),n(t,st,e),n(t,g,e),n(t,nt,e),n(t,b,e),at.m(le,b),n(t,pt,e),n(t,m,e),n(t,ot,e),n(t,L,e),n(t,lt,e),n(t,T,e),n(t,ct,e),n(t,H,e),n(t,it,e),n(t,D,e),n(t,ut,e),n(t,O,e),n(t,rt,e),n(t,M,e),n(t,kt,e),n(t,S,e),n(t,mt,e),n(t,q,e),n(t,xt,e),n(t,N,e),n(t,dt,e),n(t,A,e),n(t,ft,e),n(t,I,e),n(t,vt,e),n(t,R,e),n(t,ht,e),n(t,U,e),n(t,Ct,e),n(t,j,e),wt.m(ce,j),n(t,_t,e),n(t,z,e),yt.m(ie,z),n(t,Et,e),n(t,B,e)},p:Pt,i:Pt,o:Pt,d(t){t&&(s(i),s(K),s(u),s(Q),s(d),s(V),s(f),s(G),s(v),s(F),s(h),s(W),s(C),s(Y),s(w),s(J),s(r),s(X),s(k),s(Z),s(_),s($),s(y),s(tt),s(E),s(et),s(P),s(st),s(g),s(nt),s(b),s(pt),s(m),s(ot),s(L),s(lt),s(T),s(ct),s(H),s(it),s(D),s(ut),s(O),s(rt),s(M),s(kt),s(S),s(mt),s(q),s(xt),s(N),s(dt),s(A),s(ft),s(I),s(vt),s(R),s(ht),s(U),s(Ct),s(j),s(_t),s(z),s(Et),s(B))}}}const fe={title:"헷갈리는 용어들 정리(1) - statement & expression",description:"Dart의 switch 공식문서를 살펴보며 statement와 expression의 정의와 차이점에 대해 알아봅니다.",author:"jack",published:!0,date:"2024. 09. 12.",tags:["Dart"]};class ve extends re{constructor(i){super(),ke(this,i,null,me,ue,{})}}export{ve as default,fe as metadata};
